<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TAEUK WIKI</title>
  
  <subtitle>Javascript Library</subtitle>
  <link href="https://taeuk-gang.github.io/atom.xml" rel="self"/>
  
  <link href="https://taeuk-gang.github.io/"/>
  <updated>2022-09-23T11:14:42.733Z</updated>
  <id>https://taeuk-gang.github.io/</id>
  
  <author>
    <name>Taeuk Kang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>아키텍처 변천사 간략한 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98_%ED%9D%90%EB%A6%84/"/>
    <id>https://taeuk-gang.github.io/wiki/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98_%ED%9D%90%EB%A6%84/</id>
    <published>2022-09-19T15:00:00.000Z</published>
    <updated>2022-09-23T11:14:42.733Z</updated>
    
    <content type="html"><![CDATA[<iframe src="/presentation/아키텍처/아키텍처_흐름"></iframe><h1 id="아키텍처-변천사"><a href="#아키텍처-변천사" class="headerlink" title="아키텍처 변천사"></a>아키텍처 변천사</h1><blockquote><p>아무렇게나 코드를 던져두면 필요할 때마다 찾기가 힘듦</p></blockquote><blockquote><p>그래서 개발자들은 비슷한 코드를 모아 서로 이해할 수 있게 분류하기로 결정<br>(아키텍처 = 모두가 이해하고 따를 수 있도록 하는 구조)</p></blockquote><blockquote><p>그런데 개발의 시간이 흐르면서 분류 방식에 대한 논쟁 및 트렌드 변경으로 각 아키텍처에 대한 차이를 알고 이해하기 위해 글을 작성</p></blockquote><p><img src="https://user-images.githubusercontent.com/26294469/74609919-04dc9100-5132-11ea-8c79-d4ff79d5bfde.gif" alt="bg w:300 right center"></p><h2 id="header-MVC"><a href="#header-MVC" class="headerlink" title="header: MVC"></a>header: MVC</h2><div class="mermaid">flowchart LR   view --> model   controller --> model   controller -->|data| view</div><ul><li>화살표의 방향은 의존성을 의미 (ex. view는 model을 알고, model은 view를 모름)</li><li>기존 mvc의 약점으로 지적된 사항들<ul><li>view 가 model을 알고 있는 것의 문제<ul><li>model = 비즈니스 로직(businness domain)이기 때문에 변동성이 잦음 (화면 표시에 대한 이유와는 다른 변동성)</li><li>변화에 대한 이유가 다른데 의존성을 가지고 있음</li><li>model과 view의 관계가 너무 강한 것이 주로 이야기됨</li><li>ex. Java Spring (서버에서는 view -&gt; model 의존성이 없기 때문에 적합)</li></ul></li></ul></li></ul><h3 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h3><ul><li>Controller: 사용자의 요청사항을 데이터를 Model에 전달하고, 데이터를 View에 반영</li><li>Model: 데이터를 주관하는 영역, 데이터를 다루는 로직을 모델에 모아두어 view와 격리</li><li>View: 화면상에 출력되는 내용, 클라이언트 측 기술인 html/css/javascript들을 모아둔 컨테이너</li></ul><h2 id="header-변형된-MVC"><a href="#header-변형된-MVC" class="headerlink" title="header: 변형된 MVC"></a>header: 변형된 MVC</h2><div class="mermaid">flowchart LR   view --> controller   model --> controller   controller --> model   controller -->|data| view</div><ul><li>모든 것을 controller가 관리하는 형태<ul><li>기존 위의 mvc의 view -&gt; model에 대한 의존성이 사라졌지만, controller의 역할이 커짐</li><li>view와 model이 조금만 변경되도 controller까지 변경이 필요함 (유지보수 및 개발 공수가 큼)</li></ul></li></ul><h2 id="header-MVP"><a href="#header-MVP" class="headerlink" title="header: MVP"></a>header: MVP</h2><div class="twocols"><div class="mermaid">flowchart LR   view[view - getter,setter ] --> presenter   model --> presenter   presenter --> model   presenter -->|data| view</div><ul><li>presenter가 view 컴포넌트의 getter, setter를 통해 접근<ul><li>native dom이 아닌 인터페이스로 취급 (model을 주지 않아 로직이 없음) </li><li>모든 기능에 1:1 대응되는 getter, setter 작성 필요</li></ul></li><li>ex. MFC, Android, visual basic</li></ul><p class="break"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PhotoView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//... is a list tag.</span></span><br><span class="line">    tagName:  <span class="string">&quot;li&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass the contents of the photo template through a templating</span></span><br><span class="line">    <span class="comment">// function, cache it for a single photo</span></span><br><span class="line">    template: _.template( $(<span class="string">&quot;#photo-template&quot;</span>).html() ),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The DOM events specific to an item.</span></span><br><span class="line">    events: &#123;</span><br><span class="line">      <span class="string">&quot;click img&quot;</span> : <span class="string">&quot;toggleViewed&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The PhotoView listens for changes to </span></span><br><span class="line">    <span class="comment">// its model, re-rendering. Since tHere&#x27;s</span></span><br><span class="line">    <span class="comment">// a one-to-one correspondence between a </span></span><br><span class="line">    <span class="comment">// **Photo** and a **PhotoView** in this</span></span><br><span class="line">    <span class="comment">// app, we set a direct reference on the model for convenience.</span></span><br><span class="line"></span><br><span class="line">    initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.model.on( <span class="string">&quot;change&quot;</span>, <span class="built_in">this</span>.render, <span class="built_in">this</span> );</span><br><span class="line">      <span class="built_in">this</span>.model.on( <span class="string">&quot;destroy&quot;</span>, <span class="built_in">this</span>.remove, <span class="built_in">this</span> );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-render the photo entry</span></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $( <span class="built_in">this</span>.el ).html( <span class="built_in">this</span>.template(<span class="built_in">this</span>.model.toJSON() ));</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Toggle the `&quot;viewed&quot;` state of the model.</span></span><br><span class="line">    toggleViewed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.model.viewed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="header-MVVM"><a href="#header-MVVM" class="headerlink" title="header: MVVM"></a>header: MVVM</h2><div class="mermaid">flowchart LR   binder --> view   binder -->|observe| view-model   view-model --> model   model --> view-model</div><ul><li>view-model = view를 대신하는 순수한 데이터 구조체<ul><li>view-model에 변경이 감지됬을 때, view가 자동으로 갱신, 혹은 view에서 이벤트가 발생했을 때 view-model을 변경</li><li>view-model은 view에 대한 존재를 몰라야함</li></ul></li></ul><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><ul><li>보통은 아래 2가지 방식이 고려됨, 서로 장단점이 있음 - <a href="https://www.slideshare.net/gyeongseokseo/virtual-dom">참고</a></li></ul><div class="mermaid">flowchart LR   scanner --> binder   scanner --> Dom   binder -->|observe| view-model   view-model --> model   model --> view-model</div><ol><li>DOM 스캔 방식 (angular, svelte): Binder에서 Scanner 분리</li></ol><ul><li>model과 view 분리 쉬움</li><li>DOM에 대한 의존성이 크기 때문에 scanner를 분리 (binder를 보호하기 위함)</li><li>변화율(변동에 대한 시간)에 따라 분리</li></ul><ol start="2"><li>자체 DOM([vdom)을 소유 (react)</li></ol><ul><li>Component 방식(model과 view가 같이 관리 - setState)</li></ul><h2 id="header-참고링크"><a href="#header-참고링크" class="headerlink" title="header: 참고링크"></a>header: 참고링크</h2><ul><li><a href="https://todomvc.com/">TodoMVC</a></li><li><a href="https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch10s05.html">Learning JavaScript Design Patterns</a></li><li><a href="https://yozm.wishket.com/magazine/detail/1663/">프론트엔드 아키텍처 트렌드</a></li><li><a href="https://velog.io/@teo/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-MV-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94">프론트엔드에서-MV-아키텍쳐</a></li><li><a href="https://opentutorials.org/course/697/3828">생활코딩 MVC</a></li><li><a href="https://www.youtube.com/watch?v=RT38Za1pkdI">객체지향 JS</a></li><li><a href="https://brunch.co.kr/@oemilk/75">Android MVP</a></li><li><a href="https://meetup.toast.com/posts/158">Proxy와 가상 돔을 사용하여 나만의 프레임워크 만들기</a></li><li><a href="https://meetup.toast.com/posts/302">JavaScript Proxy. 근데 이제 Reflect를 곁들인</a></li><li><a href="https://www.youtube.com/watch?v=FhYefTLiJkE">프레임워크별 DOM렌더링 전략</a></li><li><a href="http://www.yes24.com/Product/Goods/96639825">Book: 프레임워크 없는 프론트엔드 개발 - VanillaJS로 프레임워크의 원리 구현</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;/presentation/아키텍처/아키텍처_흐름&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;아키텍처-변천사&quot;&gt;&lt;a href=&quot;#아키텍처-변천사&quot; class=&quot;headerlink&quot; title=&quot;아키텍처 변천사&quot;&gt;&lt;/a&gt;아키텍처 변천사&lt;/</summary>
      
    
    
    
    <category term="아키텍처" scheme="https://taeuk-gang.github.io/categories/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/"/>
    
    
    <category term="아키텍처" scheme="https://taeuk-gang.github.io/tags/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 완벽 가이드 1장</title>
    <link href="https://taeuk-gang.github.io/wiki/HTTP_%EC%99%84%EB%B2%BD_%EA%B0%80%EC%9D%B4%EB%93%9C/1%EC%9E%A5/"/>
    <id>https://taeuk-gang.github.io/wiki/HTTP_%EC%99%84%EB%B2%BD_%EA%B0%80%EC%9D%B4%EB%93%9C/1%EC%9E%A5/</id>
    <published>2022-09-17T06:45:20.000Z</published>
    <updated>2022-09-23T11:14:42.733Z</updated>
    
    <content type="html"><![CDATA[<iframe src="/presentation/HTTP_완벽_가이드/1장"></iframe><h1 id="HTTP-완벽-가이드-1장-HTTP-개관"><a href="#HTTP-완벽-가이드-1장-HTTP-개관" class="headerlink" title="HTTP 완벽 가이드 1장: HTTP 개관"></a>HTTP 완벽 가이드 1장: HTTP 개관</h1><p><img src="https://user-images.githubusercontent.com/26294469/74609919-04dc9100-5132-11ea-8c79-d4ff79d5bfde.gif" alt="bg w:300 right center"></p><blockquote><p>목차마다 무엇을 알아야하는지 정리</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><blockquote><p>1장 키워드들</p></blockquote><ol><li>HTTP</li><li>웹 리소스</li><li>MIME 타입</li><li>URI, URL, URN</li><li>HTTP 메시지<ul><li>Request(시작줄, 헤더, 본문)</li><li>Response(상태줄, 헤더, 본문)</li><li>메서드, 상태코드</li></ul></li><li>TCP 커넥션</li><li>프로토콜 버전</li><li>웹 구성요소<ul><li>프록시, 캐시, 게이트웨이, 터널, 에이전트</li></ul></li></ol><h2 id="1-HTTP"><a href="#1-HTTP" class="headerlink" title="1. HTTP"></a>1. HTTP</h2><blockquote><p>📝3-4p, <a href="https://developer.mozilla.org/ko/docs/Web/HTTP">HTTP MDN</a><br>HTTP에 대해서 대략적으로 설명할 수 있으면 이 섹션을 건너뛰어도 좋습니다.</p></blockquote><p>HTTP(HyperText Transfer Protocol) = 하이퍼미디어 문서를 전송하기위한 애플리케이션 레이어 프로토콜, 서버와 클라이언트 사이간의 메시지 통신 규약</p><ul><li>웹 브라우저와 웹 서버간의 커뮤니케이션을위해 디자인되었지만, 다른 목적으로도 사용가능</li><li>HTTP는 클라이언트가 요청을 생성하기 위한 연결을 연다음 응답을 받을때 까지 대기하는 전통적인 <a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model">클라이언트-서버 모델</a>을 따름</li></ul><h2 id="2-웹-리소스"><a href="#2-웹-리소스" class="headerlink" title="2. 웹 리소스"></a>2. 웹 리소스</h2><blockquote><p>📝5p, <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web">MIME_Types MDN</a><br>‘웹 리소스’에 대해서 대략적으로 설명할 수 있으면 이 섹션을 건너뛰어도 좋습니다.</p></blockquote><p>웹 리소스 = HTTP 요청 대상</p><ul><li>리소스의 특성은 더 이상 정의되지 않음(어떤 컨텐츠 등 가능)<ul><li>정적 리소스(ex. text, html, word, pdf 등)</li><li>동적 리소스(ex. 게이트웨이)도 포함</li></ul></li></ul><h2 id="3-MIME-타입"><a href="#3-MIME-타입" class="headerlink" title="3. MIME 타입"></a>3. MIME 타입</h2><blockquote><p>📝6p. <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_Types">MIME 타입 MDN</a>, 뒷장에서 더 설명되서 자세한 내용은 생략<br>‘MIME 타입’에 대해서 대략적으로 설명할 수 있으면 이 섹션을 건너뛰어도 좋습니다.</p></blockquote><p>MIME(Multipurpose Internet Mail Extensions) = 클라이언트에게 전송된 문서의 다양성을 알려주기 위한 메커니즘</p><ul><li>웹에서 파일의 확장자는 별 의미가 없음<ul><li>각 문서와 함께 올바른 MIME 타입을 전송하도록, 서버가 정확히 설정하는 것이 중요</li><li>브라우저들은 리소스를 내려받았을 때 해야 할 기본 동작이 무엇인지를 결정하기 위해 사용</li></ul></li><li>주 타입(Prmiary object type)/부 타입(Specific subtype)으로 구성<ul><li>ex. text/html, image/jpeg, audio/mpeg, video/mpeg, application/pdf</li></ul></li><li>MIME 타입 전체 목록은 📝부록D 혹은 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types">MIME 전체목록 MDN</a>를 참고</li><li>MIME 타입은 대소문자를 구분하지는 않지만 전통적으로 소문자로 쓰여짐</li></ul><h2 id="4-URI-vs-URL"><a href="#4-URI-vs-URL" class="headerlink" title="4. URI vs URL"></a>4. URI vs URL</h2><blockquote><p>📝7-8p, <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web#url%EA%B3%BC_urn">URL과 URN MDN</a><br>‘URI’, ‘URL’, ‘URN’에 대해서 관하여 설명할 수 있으면 이 섹션을 건너뛰어도 좋습니다.</p></blockquote><ul><li><p>URI(Uniform Resource Identifier) = 하나의 리소스를 가리키는 문자열</p></li><li><p>가장 흔한 URI는 <a href="https://developer.mozilla.org/ko/docs/Glossary/URL">URL</a>로, 웹 상에서의 위치로 리소스를 식별</p></li></ul><blockquote><p>식별(URI)과 위치(URL)의 차이라고 보면 되지 않을까 싶네요…<br>MDN문서에서도 굳이 이 차이에 대해서 설명하지 않고 있어, 이 부분은 생략하겠습니다.</p></blockquote><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/URN">URN</a>은 주어진 이름공간 안의 이름으로 리소스를 식별<ul><li>ex <code>urn:isbn:0451450523</code></li><li>책에서는 아직 널리 채택되지않은 기술이라고 언급하고 있지만, 현재는 <a href="https://www.ietf.org/rfc/rfc3986.txt">rfc3986</a>에서 확인한 결과 <code>INTERNET STANDARD</code> 상태이다.</li><li>주소가 바뀌는 것과 상관없이 사용할 수 있는 것이 특성</li></ul></li></ul><h2 id="5-HTTP-메시지"><a href="#5-HTTP-메시지" class="headerlink" title="5. HTTP 메시지"></a>5. HTTP 메시지</h2><blockquote><p>📝9-13p, <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Messages">HTTP 메시지 MDN</a><br>HTTP 메시지 구성 및 방식에 대해서 설명할 수 있으면 이 섹션을 건너뛰어도 좋습니다.</p></blockquote><ul><li>클라이언트와 서버는 HTTP 메시지를 주고받음</li><li>HTTP 메시지 = HTTP 메시지는 서버와 클라이언트 간에 데이터가 교환되는 방식</li><li>메시지 타입은 두 가지<ul><li>요청(request) = 클라이언트가 서버로 전달해서 서버의 액션이 일어나게끔 하는 메시지</li><li>응답(response) = 요청에 대한 서버의 답변</li></ul></li></ul><h3 id="HTTP-요청"><a href="#HTTP-요청" class="headerlink" title="HTTP 요청"></a>HTTP 요청</h3><ul><li>HTTP 요청은 시작줄, 헤더, 본문으로 구성</li></ul><h4 id="시작줄-start-line"><a href="#시작줄-start-line" class="headerlink" title="시작줄(start-line)"></a>시작줄(start-line)</h4><ul><li>첫번째로 오는 것은 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"><code>HTTP 메서드</code></a>로, 영어 동사(GET, PUT,POST) 혹은 명사(HEAD, OPTIONS)를 사용해 서버가 수행해야 할 동작 표시</li><li>두번째로 오는 요청 타겟은 주로 <a href="https://developer.mozilla.org/ko/docs/Glossary/URL">URL</a><ol><li>origin 형식: 끝에 <code>&#39;?&#39;</code>와 쿼리 문자열이 붙는 절대 경로<ul><li>ex. <code>GET /background.png HTTP/1.0</code></li></ul></li><li>absolute 형식: 완전한 URL 형식<ul><li>프록시에 연결하는 경우 대부분 GET과 함께 사용</li><li>ex. <code>GET http://developer.mozilla.org/ HTTP/1.1</code></li></ul></li></ol></li><li>…<ol start="3"><li>authority 형식: 도메인 이름 및 옵션 포트(‘:’가 앞에 붙음)로 이루어진 URL의 authority component<ul><li>HTTP 터널을 구축하는 경우에만 CONNECT와 함께 사용</li><li>ex. <code>CONNECT developer.mozilla.org:80 HTTP/1.1</code></li></ul></li><li>asterisk 형식: OPTIONS와 함께 별표(‘*’) 하나로 간단하게 서버 전체를 표시<ul><li>ex. OPTIONS * HTTP/1.1</li></ul></li></ol></li><li>마지막으로 ​​​​HTTP 버전을 표시<ul><li>ex. <code>HTTP/1.1</code></li></ul></li></ul><h4 id="헤더-header"><a href="#헤더-header" class="headerlink" title="헤더(header)"></a>헤더(header)</h4><ul><li>요청에 들어가는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP 헤더</a>는 HTTP 헤더의 기본 구조를 따름</li><li>대소문자 구분없는 문자열 다음에 콜론(‘:’)이 붙음</li><li>다양한 종류의 요청 헤더<ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/General_header">General 헤더</a>: <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Via"><code>Via</code></a>와 같은 <em>헤더는</em> 메시지 전체에 적용</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Request_header">Request 헤더</a>: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent"><code>User-Agent</code></a> 또는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept"><code>Accept</code></a>와 같은 헤더</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Representation_header">Representation 헤더</a>: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a>와 같은 헤더</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/202209200224305.png" alt="bg fit right"></p><h4 id="본문-body"><a href="#본문-body" class="headerlink" title="본문(body)"></a>본문(body)</h4><ul><li>모든 요청에 본문이 들어가지는 않음<ul><li><code>GET</code>, <code>HEAD</code>, <code>DELETE</code> , <code>OPTIONS</code> 리소스를 가져오는 요청은 보통 본문이 필요없음</li><li>넓게 보면 본문은 두가지 종류<ul><li>단일-리소스 본문(single-resource bodies): 헤더 두 개(<a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a>와 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Content-Length"><code>Content-Length</code></a>)로 정의된 단일 파일로 구성</li><li>다중-리소스 본문(multiple-resource bodies): 멀티파트 본문으로 구성되는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#multipartform-data">다중 리소스 본문</a>에서는 파트마다 다른 정보를 지니게 됩니다. 보통 <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms">HTML 폼</a>과 관련<ul><li><a href="https://velog.io/@shin6403/HTTP-multipartform-data-%EB%9E%80">다중 리소스 참고블로그</a></li></ul></li></ul></li></ul></li></ul><h3 id="HTTP-응답"><a href="#HTTP-응답" class="headerlink" title="HTTP 응답"></a>HTTP 응답</h3><h4 id="상태줄-Status-Line"><a href="#상태줄-Status-Line" class="headerlink" title="상태줄(Status Line)"></a>상태줄(Status Line)</h4><ul><li>HTTP 응답의 시작 줄은 상태 줄(status line)이라고 불림<ol><li>프로토콜 버전: ex. <code>HTTP/1.1</code></li><li>상태 코드: 요청의 성공 여부</li><li>상태 텍스트: 짧고 간결하게 상태 코드에 대한 설명을 글로 나타내어 사람들이 HTTP 메시지를 이해할 때 도움<ul><li>HTTP 2부터는 사유 구절(reason phrase)이 제거됨</li></ul></li></ol><ul><li>ex. <code>HTTP/1.1 404 Not Found</code></li></ul><ol start="4"><li>시작줄과 다른 점은 요청타겟 대신 상태코드가 3자리 숫자로 구성되어 표시 (<a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Status">전체목록 참조</a>)<ul><li>1xx: 정보 응답</li><li>2xx: 성공</li><li>3xx: 리다이렉션</li><li>4xx: 클라이언트 오류</li><li>5xx: 서버 오류</li></ul></li></ol></li></ul><h4 id="헤더-header-Request-Header와-동일"><a href="#헤더-header-Request-Header와-동일" class="headerlink" title="헤더(header): Request Header와 동일"></a>헤더(header): Request Header와 동일</h4><h4 id="본문-body-1"><a href="#본문-body-1" class="headerlink" title="본문(body)"></a>본문(body)</h4><ul><li>모든 응답에 본문이 들어가지는 않음( <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Status/201"><code>201</code></a>, <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Status/204"><code>204</code></a>과 같은 상태 코드를 가진 응답에는 보통 본문이 없음)</li><li>넓게 3가지 종류로 구분<ol><li>이미 길이가 알려진 단일 파일로 구성된 단일-리소스 본문: 헤더 두개(<a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a>와 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Content-Length"><code>Content-Length</code></a>)로 정의</li><li>길이를 모르는 단일 파일로 구성된 단일-리소스 본문: <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Transfer-Encoding"><code>Transfer-Encoding</code></a>가 <code>chunked</code>로 설정되어 있으며, 파일은 청크로 나뉘어 인코딩</li><li>서로 다른 정보를 담고 있는 멀티파트로 이루어진 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#multipartform-data">다중 리소스 본문</a></li></ol></li></ul><blockquote><p>책 내용 외 추가작성. chrome 개발자도구에서는 HTTP Raw Message를 확인할 수 없다. 그렇다면 어떻게 확인할 수 있을까?</p></blockquote><ol><li><p>네트워크 패널에서 확인하고 싶은 요청의 curl을 복사(copy)</p></li><li><p>터미널을 열고 <code>nc -l 8080(임의포트)</code> 실행<br>(요즘은 <code>telnet</code>대신 <code>nc</code>를 사용하는 추세)</p><ul><li>Netcat(ornc)은 TCP 또는 UDP 프로토콜을 사용하여 네트워크 연결을 통해 데이터를 읽고 쓰는 명령줄 유틸리티</li><li>일반적으로 상대 서버의 포트가 열렸는지 확인하거나, 직접 서버가 되어 원격 서버에서(클라이언트) 접속이 가능하지 확인하는 용도로 사용</li></ul></li><li><p>복사한 curl을 붙여넣기(paste)하고 <code>--raw -i</code> 옵션을 추가하여 실행</p></li><li><p><code>nc</code>가 실행된 터미널에서 HTTP 메시지 확인 가능</p></li></ol><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/202209200329747.png" alt="bg fit right"></p><h2 id="6-TCP-커넥션"><a href="#6-TCP-커넥션" class="headerlink" title="6. TCP 커넥션"></a>6. TCP 커넥션</h2><blockquote><p>📝13-18p.<br>HTTP 어플리케이션 계층과 TCP 데이터 전송 계층을 이해했다면 이 섹션을 건너뛰어도 좋습니다.</p></blockquote><ul><li>HTTP는 애플리케이션 계층 프로토콜로 네트워크 통신 핵심적인 세부적인 사항에 대해서 처리를 하지는 않음</li><li>대신 대중적이고 신뢰성 있는 TCP/IP에게 그 역할을 맡김<ul><li>이 책에서 설명하는 TCP 특징<ul><li>오류 없는 데이터 전송(신뢰성)</li><li>언제나 보낸 순서대로 도착</li><li>언제든 어떤 크기로든 보낼 수 있음</li></ul></li></ul></li><li>HTTP 프로토콜 5계층<ul><li>HTTP (어플리케이션 계층)</li><li>TCP (전송 계층)</li><li>IP (네트워크 계층)</li><li>Ethernet (네트워크 인터페이스 계층)</li><li>물리 계층</li></ul></li></ul><ul><li>네트워크를 설명할 때 넘어갈 수 없는 것이 OSI 7계층, OSI 자체는 현재 사용되진 않지만 참조 모델로 주로 사용<ul><li>1계층 물리 계층: 전기적, 기계적, 기능적인 특성을 이용해 데이터를 전송</li><li>2계층 데이터 링크 계층: 물리 계층을 통해 송수신되는 정보의 오류와 흐름을 관리</li><li>3계층 네트워크 계층: 네트워크 통신 경로 선택</li><li>4계층 전송 계층: 네트워크 통신 관리</li><li>5계층 세션 계층: 통신 시작과 종료 순서</li><li>6계층 표현 계층: 데이터의 표현 방법을 정의 </li><li>7계층 응용 계층: 사용자의 요구를 만족시키는 응용 서비스를 제공</li></ul></li><li>TCP/IP를 설명할 때는 보통 4계층으로 묶어서 설명<br>애플리케이션(5-7계층), 전송(4계층)<br>네트워크(3계층), 링크 계층(1-2계층)</li></ul><h2 id="7-프로토콜-버전"><a href="#7-프로토콜-버전" class="headerlink" title="7. 프로토콜 버전"></a>7. 프로토콜 버전</h2><blockquote><p>📝18-19p. <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP">HTTP의 진화 MDN</a><br>HTTP 버전간의 차이를 설명할 수 있다면 이 장을 생략</p></blockquote><ul><li>HTTP 초기 버전에는 버전 번호가 없었음</li><li>0.9부터 버전 관리를 시작</li></ul><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP#http0.9_%E2%80%93_%EC%9B%90-%EB%9D%BC%EC%9D%B8_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C">HTTP/0.9 – 원-라인 프로토콜</a><ul><li>요청은 단일 라인으로 구성</li><li>가능한 메서드는 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/GET"><code>GET</code></a>이 유일</li><li>HTTP 헤더가 없었는데 이는 HTML 파일만 전송될 수 있으며 다른 유형의 문서는 전송될 수 없음을 의미</li><li>문제가 발생한 경우, 특정 HTML 파일이 사람이 처리할 수 있도록, 해당 파일 내부에 문제에 대한 설명과 함께 되돌려 보내짐</li></ul></li></ol><ol start="2"><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP#http1.0_%E2%80%93_%ED%99%95%EC%9E%A5%EC%84%B1_%EB%A7%8C%EB%93%A4%EA%B8%B0">HTTP/1.0 – 확장성 만들기</a> - <a href="https://datatracker.ietf.org/doc/html/rfc1945">RFC 1945</a>에 공개<ul><li>버전 정보가 각 요청 사이내로 전송 ex. <code>GET HTTP/1.0</code></li><li>상태 코드 라인 또한 응답의 시작 부분에 붙어 전송 (브라우저가 요청에 대한 성공과 실패를 알 수 있음)</li><li>HTTP 헤더 개념은 요청과 응답 모두를 위해 도입</li></ul></li></ol><p>일반적인 요청 예시</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;mypage.html HTTP&#x2F;1.0</span><br><span class="line">User-Agent: NCSA_Mosaic&#x2F;2.0 (Windows 3.1)</span><br><span class="line"></span><br><span class="line">200 OK</span><br><span class="line">Date: Tue, 15 Nov 1994 08:12:31 GMT</span><br><span class="line">Server: CERN&#x2F;3.0 libwww&#x2F;2.17</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">A page with an image</span><br><span class="line">  &lt;IMG SRC&#x3D;&quot;&#x2F;myimage.gif&quot;&gt;</span><br><span class="line">&lt;&#x2F;HTML&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP#http1.1_%E2%80%93_%ED%91%9C%EC%A4%80_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C">HTTP/1.1 – 표준 프로토콜</a></li></ol><ul><li>현재 가장 널리 사용되는 HTTP 버전</li><li>커넥션이 재사용 가능 (keep-alive: Three-shake 오버헤드를 줄임)</li><li>파이프라이닝을 추가(첫번째 요청에 대한 응답이 완전히 전송되기 이전에 두번째 요청 전송을 가능케 하여, 커뮤니케이션 레이턴시를 낮춤)</li><li>청크된 응답 또한 지원</li><li>추가적인 캐시 제어 메커니즘이 도입<ul><li>캐시 제어 메커니즘에 대한 내용은 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Caching">이곳</a>에서 확인 가능</li></ul></li><li>언어, 인코딩 혹은 타입을 포함한 컨텐츠 협상이 도입</li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Host"><code>Host</code></a> 헤더 덕분에, 동일 IP 주소에 다른 도메인을 호스트하는 기능이 서버 <code>collocation</code>을 가능</li></ul><ol start="4"><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP#http2_%E2%80%93_%EB%8D%94_%EB%82%98%EC%9D%80_%EC%84%B1%EB%8A%A5%EC%9D%84_%EC%9C%84%ED%95%9C_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C">HTTP/2 – 더 나은 성능을 위한 프로토콜</a>  <ul><li>텍스트 프로토콜이라기 보다는 이진 프로토콜 (더 이상 읽을 수도 없고 수작업을 만들어낼 수 없음)</li><li>병렬 요청이 동일한 커넥션 상에서 다루어질 수 있는 다중화 프로토콜<br>(순서를 제거해주고 HTTP/1.x 프로토콜의 제약사항을 막음)</li><li>전송된 데이터의 분명한 중복과 그런 데이터로부터 유발된 불필요한 오버헤드를 제거<br>(연속된 요청 사이의 매우 유사한 내용으로 존재하는 헤더들을 압축)</li><li>서버로 하여금 사전에 클라이언트 캐시를 서버 푸쉬라고 불리는 메커니즘, 필요한 데이터 채우기 허용</li><li><a href="https://w3techs.com/technologies/details/ce-http2">HTTP2 사용현황</a> - 2022. 09 기준 44% 사용 </li></ul></li></ol><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/202209200742214.png" alt="bg w:500 right"></p><h2 id="8-웹-구성요소"><a href="#8-웹-구성요소" class="headerlink" title="8. 웹 구성요소"></a>8. 웹 구성요소</h2><blockquote><p>📝19-22p. <a href="https://developer.mozilla.org/ko/docs/Glossary/Proxy_server">프록시 서버 MDN</a><br>프록시, 캐시, 게이트웨이, 터널, 에이전트에 대해서 설명할 수 있다면 이 섹션을 건너뛰어도 좋습니다.</p></blockquote><h3 id="프록시"><a href="#프록시" class="headerlink" title="프록시"></a>프록시</h3><ul><li>클라이언트와 서버 사이에 위치하여 클라이언트의 요청을 받아 서버에 전달하고, 서버의 응답을 받아 클라이언트에 전달하는 역할을 하는 중간 서버</li><li><a href="https://valuefactory.tistory.com/165">웹 보안</a>, 어플리케이션 통합, 성능 최적화 등의 목적으로 사용</li><li>일반적으로 크게 주로 2가지 종류의 프록시 서버가 존재<ul><li>포워드 프록시(forward proxy)는 인터넷 상에서 어디로든지 리퀘스트를 전송해주는 프록시<ul><li>주로 캐싱, IP 우회 , 접근 제한 등 으로 사용</li></ul></li><li>리버스 프록시(reverse proxy)는 인터넷에서 리퀘스트를 받으면, 내부망 내의 서버로 전송<ul><li>주로 로드밸런싱, 보안 등 으로 사용</li></ul></li></ul></li></ul><blockquote><dl><dt>vpn과 forward proxy의 차이?</dt><dd>개인 생각으로는 데이터 암호화로, forward proxy가 vpn을 포함하는 더 큰 범주라고 생각</dd></dl></blockquote><blockquote><p>📝19-22p. <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Caching">HTTP 캐싱 MDN</a></p></blockquote><h3 id="캐시"><a href="#캐시" class="headerlink" title="캐시"></a>캐시</h3><ul><li>웹 캐시와 캐시 프록시는 자신을 거쳐 가는 리소스 중 자주 찾는 것의 사본을 저장하는 특별한 HTTP 프록시 라고 책에서 설명되고 있음 (7장에서 더 자세하게 설명)<ul><li>클라이언트는 멀리 떨어진 웹 서버보다 근처의 캐시에서 더 빨리 문서를 받을 수 있음<br>(웹 캐시는 레이턴시와 네트워크 트래픽을 줄여줌)</li><li>캐시 큰 종류는 설(private) 혹은 공유(shared) 캐시 두 가지 부류로 분류<ul><li>공유 캐시는 한 명 이상의 사용자가 재사용할 수 있도록 응답을 저장하는 캐시</li><li>사설 캐시는 한 명의 사용자만 사용하는 캐시</li><li>그 외 게이트웨이 캐시, CDN, 리버스 프록시 캐시 그리고 로드 밸랜서 등이 있지만 현재 장에서 생략</li></ul></li></ul></li></ul><h4 id="브라우저-캐시-Private-Cache"><a href="#브라우저-캐시-Private-Cache" class="headerlink" title="브라우저 캐시(Private Cache)"></a>브라우저 캐시(Private Cache)</h4><ul><li>사설 캐시는 단일 사용자가 전용으로 사용</li><li>사용자에 의하여 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a>를 통해 다운로드된 모든 문서들을 가지고 있음</li><li>서버에 대한 추가적인 요청 없이 뒤로 가기나 앞으로 가기, 저장, 소스로 보기 등을 위해 방문했던 문서들을 사용</li></ul><h4 id="프록시-캐시-Shared-Cache"><a href="#프록시-캐시-Shared-Cache" class="headerlink" title="프록시 캐시(Shared Cache)"></a>프록시 캐시(Shared Cache)</h4><ul><li>공유 캐시는 한 명 이상의 사용자에 의해 재사용되는 응답을 저장하는 캐시</li><li>회사의 ISP는 많은 사용자들을 서비스하기 위해 지역 네트워크 기반의 일부분으로서 웹 프록시를 설치가 가능</li><li>덕분에 조회가 많이 되는 리소스들은 몇 번이고 재사용되어 네트워크 트래픽과 레이턴시를 줄여줌</li></ul><p>위 내용 제어를 원한다면 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Caching#%EC%BA%90%EC%8B%B1_%EC%A0%9C%EC%96%B4"><code>cache-control</code></a> 헤더를 사용</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: private <span class="comment"># 단일 사용자만을 위한 것이며 공유 캐시에 의해 저장되어서는 안됨</span></span><br><span class="line">Cache-Control: public <span class="comment"># 응답이 어떤 캐시에 의해서든 캐시되어도 좋음</span></span><br></pre></td></tr></table></figure><blockquote><p>📝19-22p. <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling">Proxy servers and tunneling MDN</a></p></blockquote><h3 id="게이트웨이"><a href="#게이트웨이" class="headerlink" title="게이트웨이"></a>게이트웨이</h3><ul><li>다른 서버들의 중개자로 동작하는 특별한 서버</li><li>책에서는 주로 HTTP 트래픽을 다른 프로토콜로 변환하기위해 사용된다고 설명 (ex. HTTP/FTP)</li></ul><blockquote><p>게이트웨이와 프록시에 대한 차이는 모호하긴 하지만, 목적에 대한 차이가 있음</p><ul><li>게이트웨이는 서로 다른 서버를 연결해주는데 주 목적 (보통 2개 이상의 서버)</li><li>프록시는 필터링, 보안, 최적화에 등 목적을 갖고 다른 사이트를 대신하며 우회하는데 주 목적 (보통 1개의 서버)</li></ul></blockquote><h3 id="HTTP-터널"><a href="#HTTP-터널" class="headerlink" title="HTTP 터널"></a>HTTP 터널</h3><ul><li>터널은 두 커넥션 사이에서 raw 데이터를 그대로 전달해주는 HTTP 애플리케이션</li><li>예시로 HTTP/SSL 터널링이 있음</li></ul><h3 id="에이전트"><a href="#에이전트" class="headerlink" title="에이전트"></a>에이전트</h3><ul><li>HTTP 요청을 만들어주는 클라이언트 프로그램(보통 웹 브라우저), 추가로 자동화 스파이더, 웹로봇이 존재 (9장 설명)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;/presentation/HTTP_완벽_가이드/1장&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;HTTP-완벽-가이드-1장-HTTP-개관&quot;&gt;&lt;a href=&quot;#HTTP-완벽-가이드-1장-HTTP-개관&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="HTTP 완벽 가이드" scheme="https://taeuk-gang.github.io/categories/HTTP-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C/"/>
    
    
    <category term="HTTP 완벽 가이드" scheme="https://taeuk-gang.github.io/tags/HTTP-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>k8s 1.22 -&gt; 1.23 변경사항 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/k8s/1.22_1.23_k8s_update/"/>
    <id>https://taeuk-gang.github.io/wiki/k8s/1.22_1.23_k8s_update/</id>
    <published>2022-09-04T15:00:00.000Z</published>
    <updated>2022-09-23T10:58:11.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-23에서-stable로-변경된-문서들"><a href="#1-23에서-stable로-변경된-문서들" class="headerlink" title="1.23에서 stable로 변경된 문서들"></a>1.23에서 stable로 변경된 문서들</h2><p>(변경 en:11, ko: 8)</p><ol><li><a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/architecture/cri/">Container Runtime Interface (CRI)</a></li><li><a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/services-networking/dual-stack/">IPv4/IPv6 dual-stack</a></li><li><a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/services-networking/ingress/#%EC%9D%B8%EA%B7%B8%EB%A0%88%EC%8A%A4%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B2%94%EC%9C%84">IngressClass scope</a></li><li><a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes">Generic ephemeral volumes</a></li><li><a href="https://kubernetes.io/ko/docs/concepts/workloads/controllers/ttlafterfinished/">Automatic Clean-up for Finished Jobs</a></li><li><a href="https://v1-23.docs.kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/">TTL mechanism for finished Jobs</a> * 영문만 존재</li><li><a href="https://v1-23.docs.kubernetes.io/ko/docs/tasks/network/validate-dual-stack/">Dual-stack support with kubeadm</a></li><li><a href="https://v1-23.docs.kubernetes.io/docs/tasks/configure-pod-container/security-context/#configure-volume-permission-and-ownership-change-policy-for-pods">Configure volume permission and ownership change policy for Pods</a> * 영문만 존재</li><li><a href="https://kubernetes.io/ko/docs/tasks/run-application/horizontal-pod-autoscale/">Horizontal Pod Autoscaling</a><ol><li>Scaling on custom metrics</li><li>Scaling on multiple metrics </li><li>Configurable scaling behavior </li></ol></li></ol><hr><blockquote><p>특별히 봐야될 것만 작성</p></blockquote><h3 id="1-Container-Runtime-Interface-CRI"><a href="#1-Container-Runtime-Interface-CRI" class="headerlink" title="1. Container Runtime Interface (CRI)"></a>1. <a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/architecture/cri/">Container Runtime Interface (CRI)</a></h3><ul><li>쿠버네티스 v1.23에서는, Kubelet은 CRI v1을 사용하는 것을 권장</li><li>컨테이너 런타임이 CRI v1 버전을 지원하지 않는다면, Kubelet은 지원 가능한 이전 지원 버전으로 협상을 시도</li><li>v1.23 Kubelet은 CRI v1alpha2버전도 협상할 수 있지만, 해당 버전은 사용 중단(deprecated)으로 간주</li><li>Kubelet이 지원되는 CRI 버전을 협상할 수 없는 경우, Kubelet은 협상을 포기하고 노드로 등록하지 않는다.</li></ul><hr><h3 id="2-IPv4-IPv6-dual-stack"><a href="#2-IPv4-IPv6-dual-stack" class="headerlink" title="2. IPv4/IPv6 dual-stack"></a>2. <a href="https://v1-23.docs.kubernetes.io/ko/docs/tasks/network/validate-dual-stack/">IPv4/IPv6 dual-stack</a></h3><ul><li>IPv4/IPv6 이중 스택 네트워킹을 사용하면 파드와 서비스에 IPv4와 IPv6 주소를 모두 할당</li><li>IPv4/IPv6 이중 스택 네트워킹은 1.21부터 쿠버네티스 클러스터에 기본적으로 활성화</li><li>IPv4 및 IPv6 주소를 동시에 할당 가능</li></ul><blockquote><p>자세한 내용은 링크 참조</p></blockquote><hr><h3 id="3-IngressClass-scope"><a href="#3-IngressClass-scope" class="headerlink" title="3. IngressClass scope"></a>3. <a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/services-networking/ingress/#%EC%9D%B8%EA%B7%B8%EB%A0%88%EC%8A%A4%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B2%94%EC%9C%84">IngressClass scope</a></h3><ul><li>인그레스 컨트롤러의 종류에 따라, 클러스터 범위로 설정한 파라미터의 사용이 가능할 수도 있고, 또는 한 네임스페이스에서만 사용 가능</li></ul><h4 id="클러스터"><a href="#클러스터" class="headerlink" title="클러스터"></a>클러스터</h4><ul><li><p>인그레스클래스 파라미터의 기본 범위는 클러스터 범위</p></li><li><p><code>.spec.parameters</code> 필드만 설정하고 <code>.spec.parameters.scope</code> 필드는 지정하지 않거나,</p><p>  <code>.spec.parameters.scope</code> 필드를 Cluster로 지정하면, </p><p>  인그레스클래스는 클러스터 범위의 리소스를 참조</p></li></ul><p>예시</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">external-lb-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">controller:</span> <span class="string">example.com/ingress-controller</span></span><br><span class="line">  <span class="attr">parameters:</span></span><br><span class="line">    <span class="comment"># 이 인그레스클래스에 대한 파라미터는 &quot;external-config-1&quot; 라는</span></span><br><span class="line">    <span class="comment"># ClusterIngressParameter(API 그룹 k8s.example.net)에 기재되어 있다.</span></span><br><span class="line">    <span class="comment"># 이 정의는 쿠버네티스가 </span></span><br><span class="line">    <span class="comment"># 클러스터 범위의 파라미터 리소스를 검색하도록 한다.</span></span><br><span class="line">    <span class="attr">scope:</span> <span class="string">Cluster</span></span><br><span class="line">    <span class="attr">apiGroup:</span> <span class="string">k8s.example.net</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterIngressParameter</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">external-config-1</span></span><br></pre></td></tr></table></figure><h4 id="네임스페이스"><a href="#네임스페이스" class="headerlink" title="네임스페이스"></a>네임스페이스</h4><ul><li><p><code>.spec.parameters</code> 필드를 설정하고 </p><p>  <code>.spec.parameters.scope</code> 필드를 Namespace로 지정하면,</p><p>  인그레스클래스는 네임스페이스 범위의 리소스를 참조</p></li><li><p>파라미터의 kind(+apiGroup)는 네임스페이스 범위의 API (예: 컨피그맵) 를 참조하며, 파라미터의 name은 namespace에 명시한 네임스페이스의 특정 리소스를 가리킴</p></li><li><p>네임스페이스 범위의 파라미터를 이용하여, 클러스터 운영자가 워크로드에 사용되는 환경 설정(예: 로드 밸런서 설정, API 게이트웨이 정의)에 대한 제어를 위임 가능</p></li><li><p>클러스터 범위의 파라미터를 사용했다면 다음 중 하나에 해당</p><ul><li>다른 팀의 새로운 환경 설정 변경을 적용하려고 할 때마다 클러스터 운영 팀이 매번 승인</li><li>애플리케이션 팀이 클러스터 범위 파라미터 리소스를 변경할 수 있게 하는 RBAC 롤, 바인딩 등의 특별 접근 제어를 클러스터 운영자가 정의</li></ul></li><li><p>인그레스클래스 API 자신은 항상 클러스터 범위</p></li><li><p>네임스페이스 범위의 파라미터를 참조하는 인그레스클래스 예시</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">external-lb-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">controller:</span> <span class="string">example.com/ingress-controller</span></span><br><span class="line">  <span class="attr">parameters:</span></span><br><span class="line">    <span class="comment"># 이 인그레스클래스에 대한 파라미터는 </span></span><br><span class="line">    <span class="comment"># &quot;external-configuration&quot; 환경 설정 네임스페이스에 있는</span></span><br><span class="line">    <span class="comment"># &quot;external-config&quot; 라는 IngressParameter(API 그룹 k8s.example.com)에 기재되어 있다.</span></span><br><span class="line">    <span class="attr">scope:</span> <span class="string">Namespace</span></span><br><span class="line">    <span class="attr">apiGroup:</span> <span class="string">k8s.example.com</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">IngressParameter</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">external-configuration</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">external-config</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-Generic-ephemeral-volumes"><a href="#4-Generic-ephemeral-volumes" class="headerlink" title="4. Generic ephemeral volumes"></a>4. <a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes">Generic ephemeral volumes</a></h3><ul><li><p>일반 임시 볼륨은 프로비저닝 후 일반적으로 비어 있는 스크래치 데이터에 대해 파드 별 디렉터리를 제공한다는 점에서 emptyDir 볼륨과 유사</p></li><li><p>하지만 다음과 같은 추가 기능도 제공</p><ul><li>스토리지는 로컬이거나 네트워크 연결형(network-attached)일 수 있음</li><li>볼륨의 크기를 고정할 수 있으며 파드는 이 크기를 초과할 수 없음</li><li>드라이버와 파라미터에 따라 볼륨이 초기 데이터를 가질 수 있음</li><li>볼륨에 대한 일반적인 작업은 드라이버가 지원하는 범위 내에서 지원<br>(<a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/storage/volume-snapshots/">스냅샷</a>, <a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/storage/volume-pvc-datasource/">복제</a>, <a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/storage/persistent-volumes/#%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%ED%8A%B8-%EB%B3%BC%EB%A5%A8-%ED%81%B4%EB%A0%88%EC%9E%84-%ED%99%95%EC%9E%A5">크기 조정</a>, 및 <a href="https://v1-23.docs.kubernetes.io/ko/docs/concepts/storage/storage-capacity/">스토리지 용량 추적</a> 를 포함)</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-frontend</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/scratch&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">scratch-volume</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;1000000&quot;</span> ]</span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">scratch-volume</span></span><br><span class="line">      <span class="attr">ephemeral:</span></span><br><span class="line">        <span class="attr">volumeClaimTemplate:</span></span><br><span class="line">          <span class="attr">metadata:</span></span><br><span class="line">            <span class="attr">labels:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">my-frontend-volume</span></span><br><span class="line">          <span class="attr">spec:</span></span><br><span class="line">            <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">            <span class="attr">storageClassName:</span> <span class="string">&quot;scratch-storage-class&quot;</span></span><br><span class="line">            <span class="attr">resources:</span></span><br><span class="line">              <span class="attr">requests:</span></span><br><span class="line">                <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-Automatic-Clean-up-for-Finished-Jobs"><a href="#5-Automatic-Clean-up-for-Finished-Jobs" class="headerlink" title="5. Automatic Clean-up for Finished Jobs"></a>5. <a href="https://kubernetes.io/ko/docs/concepts/workloads/controllers/ttlafterfinished/">Automatic Clean-up for Finished Jobs</a></h3><ul><li>완료-이후-TTL(TTL-after-finished) 컨트롤러는 실행이 완료된 리소스 오브젝트의 수명을 제한하는 TTL (time to live) 메커니즘을 제공</li><li>TTL 컨트롤러는 잡만을 제어</li></ul><h4 id="완료-이후-TTL-컨트롤러"><a href="#완료-이후-TTL-컨트롤러" class="headerlink" title="완료-이후-TTL 컨트롤러"></a>완료-이후-TTL 컨트롤러</h4><ul><li><p>완료-이후-TTL 컨트롤러는 잡만을 지원</p></li><li><p>클러스터 운영자는 예시 와 같이 <code>.spec.ttlSecondsAfterFinished</code> 필드를 명시하여 완료된 잡(완료 또는 실패)을 자동으로 정리하기 위해 이 기능을 사용가능</p></li><li><p>잡의 작업이 완료된 TTL 초(sec) 후 (다른 말로는, TTL이 만료되었을 때), 완료-이후-TTL 컨트롤러는 해당 잡이 정리될 수 있다고 가정</p></li><li><p>완료-이후-TTL 컨트롤러가 잡을 정리할때 잡을 연속적으로 삭제</p><ul><li>의존하는 오브젝트도 해당 잡과 함께 삭제되는 것을 의미</li></ul></li><li><p>잡이 삭제되면 완료자(finalizers)와 같은 라이프 사이클 보증이 적용</p></li><li><p>TTL 초(sec)는 언제든지 설정이 가능</p></li><li><p>잡 필드 중 .spec.ttlSecondsAfterFinished 를 설정하는 몇 가지 예시</p><ul><li>작업이 완료된 다음, 일정 시간 후에 자동으로 잡이 정리될 수 있도록 잡 메니페스트에 이 필드를 지정</li><li>이미 완료된 기존 잡에 이 새 기능을 적용하기 위해서 이 필드를 설정</li><li>어드미션 웹후크 변형 을 사용해서 잡 생성시 이 필드를 동적으로 설정, 클러스터 관리자는 이것을 사용해서 완료된 잡에 대해 TTL 정책을 적용</li><li>잡이 완료된 이후에 어드미션 웹후크 변형 을 사용해서 이 필드를 동적으로 설정, 잡의 상태, 레이블 등에 따라 다른 TTL 값을 선택</li></ul></li></ul><h4 id="경고"><a href="#경고" class="headerlink" title="경고"></a>경고</h4><h5 id="TTL-초-sec-업데이트"><a href="#TTL-초-sec-업데이트" class="headerlink" title="TTL 초(sec) 업데이트"></a>TTL 초(sec) 업데이트</h5><ul><li>TTL 기간은, 예를 들어 잡의 .spec.ttlSecondsAfterFinished 필드는 잡을 생성하거나 완료한 후에 수정가능</li><li>그러나, 잡을 삭제할 수 있게 되면(TTL이 만료된 경우) 시스템은 TTL을 연장하기 위한 업데이트가 성공적인 API 응답을 리턴하더라도 작업이 유지되도록 보장하지 않는다.</li></ul><h5 id="시간-차이-Skew"><a href="#시간-차이-Skew" class="headerlink" title="시간 차이(Skew)"></a>시간 차이(Skew)</h5><ul><li>완료-이후-TTL 컨트롤러는 쿠버네티스 잡에 저장된 타임스탬프를 사용해서 TTL의 만료 여부를 결정</li><li>클러스터 간의 시간 차이에 민감, 시간 차이에 의해서 완료-이후-TTL 컨트롤러가 잘못된 시간에 잡 오브젝트를 정리가 될 수 도 있음</li></ul><hr><h3 id="6-TTL-mechanism-for-finished-Jobs-영문만-존재"><a href="#6-TTL-mechanism-for-finished-Jobs-영문만-존재" class="headerlink" title="6. TTL mechanism for finished Jobs * 영문만 존재"></a>6. <a href="https://v1-23.docs.kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/">TTL mechanism for finished Jobs</a> * 영문만 존재</h3><blockquote><p>한글 문서 업데이트가 안되긴 했지만, 바뀐 내용 버전(beta -&gt; stable)외에 변경된 것외에 없음</p></blockquote><ul><li><p>완료된 잡 (Complete 또는 Failed)을 자동으로 정리하는 또 다른 방법</p></li><li><p>잡의 .spec.ttlSecondsAfterFinished 필드를 지정해서 완료된 리소스에 대해 TTL 컨트롤러에서 제공하는 TTL 메커니즘을 사용</p></li><li><p>TTL 컨트롤러는 잡을 정리하면 잡을 계단식으로 삭제</p></li><li><p>잡과 함께 파드와 같은 종속 오브젝트를 삭제</p></li><li><p>잡과 함께 파드와 같은 종속 오브젝트를 삭제</p></li></ul><p>예시</p><ul><li>pi-with-ttl 잡은 완료 후 100 초 이후에 자동으로 삭제</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pi-with-ttl</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ttlSecondsAfterFinished:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;perl&quot;</span>,  <span class="string">&quot;-Mbignum=bpi&quot;</span>, <span class="string">&quot;-wle&quot;</span>, <span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><ul><li>만약 필드를 0 으로 설정하면, 잡이 완료된 직후에 자동으로 삭제되도록 할 수 있음</li><li>만약 필드를 설정하지 않으면, 이 잡이 완료된 후에 TTL 컨트롤러에 의해 정리되지 않음</li></ul><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><blockquote><p>AC2-1396 이슈와 관련된 내용</p></blockquote><ul><li>ttlSecondsAfterFinished 필드를 설정하는 것을 권장</li><li>이는 관리되지 않는 잡(직접 생성한, 크론잡 등 다른 워크로드 API를 통해 간접적으로 생성하지 않은 잡)의 기본 삭제 정책이 orphanDependents(관리되지 않는 잡이 완전히 삭제되어도 해당 잡에 의해 생성된 파드를 남겨둠)이기 때문</li><li>삭제된 잡의 파드가 실패하거나 완료된 뒤 컨트롤 플레인이 언젠가 가비지 콜렉션을 한다고 해도, 이렇게 남아 있는 파드는 클러스터의 성능을 저하시킴</li><li>최악의 경우에는 이 성능 저하로 인해 클러스터가 중단</li><li>리밋 레인지(Limit Range)와 리소스 쿼터를 사용하여 특정 네임스페이스가 사용할 수 있는 자원량을 제한하는 것도 방법</li></ul><hr><h3 id="7-Dual-stack-support-with-kubeadm"><a href="#7-Dual-stack-support-with-kubeadm" class="headerlink" title="7. Dual-stack support with kubeadm"></a>7. <a href="https://v1-23.docs.kubernetes.io/ko/docs/tasks/network/validate-dual-stack/">Dual-stack support with kubeadm</a></h3><ul><li>IPv4/IPv6 이중 스택이 활성화된 쿠버네티스 클러스터들을 어떻게 검증하는지 설명</li><li>v1.23 이전 버전에서도 검증을 수행할 수 있지만 GA 기능으로만 제공되며, v1.23부터 공식적으로 지원</li></ul><blockquote><p>자세한 내용은 링크 참조</p></blockquote><hr><h3 id="Configure-volume-permission-and-ownership-change-policy-for-Pods-영문만-존재"><a href="#Configure-volume-permission-and-ownership-change-policy-for-Pods-영문만-존재" class="headerlink" title="Configure volume permission and ownership change policy for Pods * 영문만 존재"></a><a href="https://v1-23.docs.kubernetes.io/docs/tasks/configure-pod-container/security-context/#configure-volume-permission-and-ownership-change-policy-for-pods">Configure volume permission and ownership change policy for Pods</a> * 영문만 존재</h3><ul><li>Pods에 대한 볼륨 사용 권한 및 소유권 변경 정책 구성</li><li>기본적으로 Kubernetes는 볼륨이 마운트될 때 각 볼륨의 컨텐츠에 대한 소유권과 사용 권한을 포드 <code>SecurityContext에</code> 지정된 <code>fsGroup</code>과 일치하도록 반복적으로 변경</li><li>대규모 볼륨의 경우 소유권 및 사용 권한을 확인하고 변경하는 데 많은 시간이 소요되어 포드 시작 속도가 느려질 수 있음</li><li><code>SecurityContext</code> 내에서 <code>fsGroupChangePolicy</code> 필드를 사용하여 Kubernetes가 볼륨에 대한 소유권 및 사용 권한을 확인하고 관리하는 방법을 제어가 가능</li></ul><h4 id="fsGroupChangePolicy"><a href="#fsGroupChangePolicy" class="headerlink" title="fsGroupChangePolicy"></a>fsGroupChangePolicy</h4><ul><li><code>fsGroupChangePolicy</code>는 포드 내부에 <code>expose</code> 되기 전에 볼륨의 소유권 및 사용 권한을 변경하는 동작을 정의</li><li>이 필드는 <code>fsGroup</code> 제어 소유권 및 사용 권한을 지원하는 볼륨 유형에만 적용</li><li>이 필드에는 두 가지 값이 존재<ul><li><code>OnRootMismatch</code>: 루트 디렉터리의 권한 및 소유권이 볼륨의 예상 권한과 일치하지 않는 경우만 변경, 이렇게 하면 볼륨의 소유권과 사용 권한을 변경하는 데 걸리는 시간을 단축가능</li><li><code>Always</code>: 볼륨 마운트되면 항상 볼륨의 사용 권한 및 소유권을 변경</li></ul></li></ul><p>예시.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">securityContext:</span></span><br><span class="line">  <span class="attr">runAsUser:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">runAsGroup:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">fsGroup:</span> <span class="number">2000</span></span><br><span class="line">  <span class="attr">fsGroupChangePolicy:</span> <span class="string">&quot;OnRootMismatch&quot;</span></span><br></pre></td></tr></table></figure><ul><li>이 필드는 secret, configMap 및 emptydir와 같은 사용 후 삭제 볼륨 유형에는 영향 X</li></ul><hr><h3 id="9-Horizontal-Pod-Autoscaling"><a href="#9-Horizontal-Pod-Autoscaling" class="headerlink" title="9. Horizontal Pod Autoscaling"></a>9. <a href="https://kubernetes.io/ko/docs/tasks/run-application/horizontal-pod-autoscale/">Horizontal Pod Autoscaling</a></h3><blockquote><p>stable로 변경된 기능 3가지</p></blockquote><h4 id="사용자-정의-메트릭을-이용하는-스케일링"><a href="#사용자-정의-메트릭을-이용하는-스케일링" class="headerlink" title="사용자 정의 메트릭을 이용하는 스케일링"></a>사용자 정의 메트릭을 이용하는 스케일링</h4><ul><li>이전에는 autoscaling/v2beta2 API 버전이 이 기능을 베타 기능으로 제공</li><li>autoscaling/v2beta2 API 버전을 사용하는 경우, (쿠버네티스 또는 어느 쿠버네티스 구성 요소에도 포함되어 있지 않은) 커스텀 메트릭을 기반으로 스케일링을 수행하도록 HorizontalPodAutoscaler를 구성할 수 있음, 이 경우 HorizontalPodAutoscaler 컨트롤러가 이러한 커스텀 메트릭을 쿠버네티스 API로부터 조회</li><li>요구 사항에 대한 정보는 <a href="https://kubernetes.io/ko/docs/tasks/run-application/horizontal-pod-autoscale/#%EB%A9%94%ED%8A%B8%EB%A6%AD-api%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%A7%80%EC%9B%90">메트릭 API를 위한 지원</a>을 참조</li></ul><h3 id="복수의-메트릭을-이용하는-스케일링"><a href="#복수의-메트릭을-이용하는-스케일링" class="headerlink" title="복수의 메트릭을 이용하는 스케일링"></a>복수의 메트릭을 이용하는 스케일링</h3><ul><li>이전에는 autoscaling/v2beta2 API 버전이 이 기능을 베타 기능으로 제공</li><li>autoscaling/v2 API 버전을 사용하는 경우, HorizontalPodAutoscaler는 스케일링에 사용할 복수의 메트릭을 설정 가능<ul><li>이 경우 HorizontalPodAutoscaler 컨트롤러가 각 메트릭을 확인하고 해당 단일 메트릭에 대한 새로운 스케일링 크기를 제안</li><li>HorizontalPodAutoscaler는 새롭게 제안된 스케일링 크기 중 가장 큰 값을 선택하여 워크로드 사이즈를 조정<br>(이 값이 이전에 설정한 ‘총 최대값(overall maximum)’보다는 크지 않을 때에만)</li></ul></li></ul><h3 id="구성가능한-스케일링-동작"><a href="#구성가능한-스케일링-동작" class="headerlink" title="구성가능한 스케일링 동작"></a>구성가능한 스케일링 동작</h3><ul><li>이전에는 autoscaling/v2beta2 API 버전이 이 기능을 베타 기능으로 제공</li><li>v2 버전의 HorizontalPodAutoscaler API를 사용한다면, <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscalerSpec">behavior 필드(API 레퍼런스 참고)</a>를 사용하여 스케일업 동작과 스케일다운 동작을 별도로 구성가능</li><li>각 방향에 대한 동작은 behavior 필드 아래의 scaleUp / scaleDown를 설정하여 지정가능</li><li><code>stabilizationWindow</code> 를 명시하여 스케일링 목적물의 레플리카 수 워크로드 스케일링의 안정성을 고려할 수 있음</li></ul><h4 id="스케일링-정책"><a href="#스케일링-정책" class="headerlink" title="스케일링 정책"></a>스케일링 정책</h4><ul><li>스펙의 behavior 섹션에 하나 이상의 스케일링 정책을 지정</li><li>정책이 여러 개 지정된 경우 가장 많은 양의 변경을 허용하는 정책이 기본적으로 선택된 폴리시</li></ul><p>스케일 다운 예시</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleDown:</span></span><br><span class="line">    <span class="attr">policies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Pods</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><ul><li><p><code>periodSeconds</code> 는 폴리시가 참(true)으로 유지되어야 하는 기간을 나타냄</p></li><li><p>첫 번째 정책은 (파드들) 이 1분 내에 최대 4개의 레플리카를 스케일 다운할 수 있도록 허용</p></li><li><p>두 번째 정책은 비율 로 현재 레플리카의 최대 10%를 1분 내에 스케일 다운할 수 있도록 허용</p></li><li><p>기본적으로 가장 많은 변경을 허용하는 정책이 선택되기에 두 번째 정책은 파드의 레플리카 수가 40개를 초과하는 경우에만 사용</p></li><li><p>레플리카가 40개 이하인 경우 첫 번째 정책이 적용</p></li><li><p>예를 들어 80개의 레플리카가 있고 대상을 10개의 레플리카로 축소해야 하는 경우 첫 번째 단계에서 8개의 레플리카가 스케일 다운</p></li><li><p>레플리카의 수가 72개일 때 다음 반복에서 파드의 10%는 7.2 이지만, 숫자는 8로 올림</p></li><li><p>오토스케일러 컨트롤러의 각 루프에서 변경될 파드의 수는 현재 레플리카의 수에 따라 재계산</p></li><li><p>레플리카의 수가 40 미만으로 떨어지면 첫 번째 폴리시 (파드들) 가 적용되고 한번에 4개의 레플리카가 줄어듬</p></li></ul><hr><ul><li>확장 방향에 대해 selectPolicy 필드를 확인하여 폴리시 선택을 변경 가능</li><li>레플리카의 수를 최소로 변경할 수 있는 폴리시를 선택하는 최소(Min)로 값을 설정</li><li>값을 Disabled 로 설정하면 해당 방향으로 스케일링이 완전히 비활성화</li></ul><h3 id="stabilizationWindow"><a href="#stabilizationWindow" class="headerlink" title="stabilizationWindow"></a>stabilizationWindow</h3><ul><li><code>stabilizationWindow</code>는 스케일링에 사용되는 메트릭이 계속 변동할 때 레플리카 수의 안정성을 위해 사용</li><li>오토스케일링 알고리즘은 이전의 목표 상태를 추론하고 워크로드 수의 원치 않는 변화를 방지하기 위해 이<code>stabilizationWindow</code>를 활용</li></ul><p>scaleDown에 대해 안정화 윈도우 예시</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleDown:</span></span><br><span class="line">    <span class="attr">stabilizationWindowSeconds:</span> <span class="number">300</span></span><br></pre></td></tr></table></figure><ul><li>메트릭 관측 결과 스케일링 목적물이 스케일 다운 되어야 하는 경우, 알고리즘은 이전에 계산된 목표 상태를 확인하고, 해당 구간에서 계산된 값 중 가장 높은 값을 사용</li><li>위의 예시에서, 이전 5분 동안의 모든 목표 상태가 고려 대상이 됨</li><li>이를 통해 동적 최대값(rolling maximum)을 근사화하여, 스케일링 알고리즘이 빠른 시간 간격으로 파드를 제거하고 바로 다시 동일한 파드를 재생성하는 현상을 방지</li></ul><h4 id="기본-동작"><a href="#기본-동작" class="headerlink" title="기본 동작"></a>기본 동작</h4><ul><li>사용자 지정 스케일링을 사용하기 위해서 모든 필드를 지정하지 않아도 됨</li><li>사용자 정의가 필요한 값만 지정 가능</li><li>이러한 사용자 지정 값은 기본값과 병합</li><li>기본값은 HPA 알고리즘의 기존 동작과 동일</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleDown:</span></span><br><span class="line">    <span class="attr">stabilizationWindowSeconds:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">policies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">scaleUp:</span></span><br><span class="line">    <span class="attr">stabilizationWindowSeconds:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">policies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Pods</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span></span><br><span class="line">    <span class="attr">selectPolicy:</span> <span class="string">Max</span></span><br></pre></td></tr></table></figure><ul><li>스케일링 다운의 경우 300 초 (또는 제공된 경우–horizontal-pod-autoscaler-downscale-stabilization 플래그의 값</li><li>스케일링 다운에서는 현재 실행 중인 레플리카의 100%를 제거할 수 있는 단일 정책만 존재하며 이는 스케일링 대상을 최소 허용 레플리카로 축소할 수 있음을 의미</li><li>스케일링 업에는 <code>stabilizationWindow</code>가 없다</li><li>메트릭이 대상을 스케일 업해야 한다고 표시된다면 대상이 즉시 스케일 업을 한다.<ul><li>두 가지 폴리시가 존재<ul><li>HPA가 정상 상태에 도달 할 때까지 15초 마다 4개의 파드 </li><li>또는 현재 실행 중인 레플리카의 100% 가 추가된다.</li></ul></li></ul></li></ul><h4 id="예시-다운스케일-stabilizationWindow-변경"><a href="#예시-다운스케일-stabilizationWindow-변경" class="headerlink" title="예시: 다운스케일 stabilizationWindow 변경"></a>예시: 다운스케일 stabilizationWindow 변경</h4><ul><li>사용자 지정 다운스케일 안정화 윈도우를 1분 동안 제공하기 위해 다음 동작이 HPA에 추가</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleDown:</span></span><br><span class="line">    <span class="attr">stabilizationWindowSeconds:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><h4 id="예시-스케일-다운-속도-제한"><a href="#예시-스케일-다운-속도-제한" class="headerlink" title="예시: 스케일 다운 속도 제한"></a>예시: 스케일 다운 속도 제한</h4><ul><li>HPA에 의해 파드가 제거되는 속도를 분당 10%로 제한하기 위해 다음 동작이 HPA에 추가</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleDown:</span></span><br><span class="line">    <span class="attr">policies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><ul><li>분당 제거되는 파드 수가 5를 넘지 않도록 하기 위해, 크기가 5로 고정된 두 번째 축소 정책을 추가하고, <code>selectPolicy</code> 를 최소로 설정</li><li><code>selectPolicy</code> 를 <code>Min</code> 으로 설정하면 자동 스케일러가 가장 적은 수의 파드에 영향을 주는 정책을 선택함을 의미</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleDown:</span></span><br><span class="line">    <span class="attr">policies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Pods</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">selectPolicy:</span> <span class="string">Min</span></span><br></pre></td></tr></table></figure><h4 id="예시-스케일-다운-비활성화"><a href="#예시-스케일-다운-비활성화" class="headerlink" title="예시: 스케일 다운 비활성화"></a>예시: 스케일 다운 비활성화</h4><ul><li>selectPolicy 의 Disabled 값은 주어진 방향으로의 스케일링을 끔</li><li>따라서, 다운 스케일링을 방지하기 위해 다음 폴리시가 사용</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleDown:</span></span><br><span class="line">    <span class="attr">selectPolicy:</span> <span class="string">Disabled</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-23-버전-변경된-리소스"><a href="#1-23-버전-변경된-리소스" class="headerlink" title="1.23 버전 변경된 리소스"></a>1.23 버전 변경된 리소스</h2><ol><li>추가 io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy</li><li>변경 io.k8s.api.apps.v1.StatefulSetSpec<ul><li>추가 persistentVolumeClaimRetentionPolicy</li></ul></li><li>추가 io.k8s.api.autoscaling.v2.ContainerResourceMetricSource</li><li>변경 io.k8s.api.batch.v1.JobStatus<ul><li>추가 ready</li></ul></li><li>추가 io.k8s.api.core.v1.GRPCAction</li><li>제거 io.k8s.api.core.v1.Handler</li><li>추가 io.k8s.api.core.v1.LifecycleHandler</li><li>변경 io.k8s.api.core.v1.PersistentVolumeClaimStatus<ul><li>추가 allocatedResources</li></ul></li><li>추가 io.k8s.api.core.v1.PodOS</li><li>추가 io.k8s.api.core.v1.PodSpec<ul><li>추가 os</li></ul></li><li>변경 io.k8s.api.core.v1.Probe<ul><li>추가 grpc</li></ul></li><li>추가 io.k8s.api.flowcontrol.v1beta2.FlowDistinguisherMethod</li><li>추가 io.k8s.api.flowcontrol.v1beta2.FlowSchema</li><li>제거 io.k8s.api.rbac.v1alpha1.AggregationRule</li><li>제거 io.k8s.api.rbac.v1alpha1.ClusterRole</li><li>제거 io.k8s.api.scheduling.v1alpha1.PriorityClass</li><li>제거 io.k8s.api.storage.v1alpha1.VolumeAttachment</li><li>제거 io.k8s.api.storage.v1alpha1.VolumeAttachmentList</li><li>제거 io.k8s.api.storage.v1alpha1.VolumeAttachmentSource</li><li>제거 io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus</li><li>제거 io.k8s.api.storage.v1alpha1.VolumeError</li><li>추가 io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule</li></ol><hr><h2 id="1-23-버전-변경된-k8s-apiserver"><a href="#1-23-버전-변경된-k8s-apiserver" class="headerlink" title="1.23 버전 변경된 k8s-apiserver"></a>1.23 버전 변경된 k8s-apiserver</h2><ol><li>변경 <code>/api/v1/namespaces/&#123;namespace&#125;/services</code><ul><li>method: delete</li></ul></li><li>추가 <code>/apis/autoscaling/v2/</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/autoscaling/v2/horizontalpodautoscalers</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/autoscaling/v2/namespaces/&#123;namespace&#125;/horizontalpodautoscalers</code><ul><li>methods: delete, get, post</li></ul></li><li>추가 <code>/apis/autoscaling/v2/namespaces/&#123;namespace&#125;/horizontalpodautoscalers/&#123;name&#125;</code><ul><li>methods: delete, get, patch, put</li></ul></li><li>추가 <code>/apis/autoscaling/v2/namespaces/&#123;namespace&#125;/horizontalpodautoscalers/&#123;name&#125;/status</code><ul><li>methods: get, patch, put</li></ul></li><li>추가 <code>/apis/autoscaling/v2/watch/horizontalpodautoscalers</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/autoscaling/v2/watch/namespaces/&#123;namespace&#125;/horizontalpodautoscalers</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/autoscaling/v2/watch/namespaces/&#123;namespace&#125;/horizontalpodautoscalers/&#123;name&#125;</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas</code><ul><li>methods: delete, get, post</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/&#123;name&#125;</code><ul><li>methods: delete, get, patch, put</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/&#123;name&#125;/status</code><ul><li>methods: get, patch, put</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations</code><ul><li>methods: delete, get, post</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/&#123;name&#125;</code><ul><li>methods: delete, get, patch, put</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/&#123;name&#125;/status</code><ul><li>methods: get, patch, put</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/&#123;name&#125;</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations</code><ul><li>methods: get</li></ul></li><li>추가 <code>/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/&#123;name&#125;</code><ul><li>methods: get</li></ul></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/&#123;namespace&#125;/rolebindings</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/&#123;namespace&#125;/rolebindings/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/&#123;namespace&#125;/roles</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/&#123;namespace&#125;/roles/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/roles</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/&#123;namespace&#125;/rolebindings</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/&#123;namespace&#125;/rolebindings/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/&#123;namespace&#125;/roles</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/&#123;namespace&#125;/roles/&#123;name&#125;</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings</code></li><li>제거 <code>/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles</code></li><li>제거 <code>/apis/scheduling.k8s.io/v1alpha1/</code></li><li>제거 <code>/apis/scheduling.k8s.io/v1alpha1/priorityclasses</code></li><li>제거 <code>/apis/scheduling.k8s.io/v1alpha1/priorityclasses/&#123;name&#125;</code></li><li>제거 <code>/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses</code></li><li>제거 <code>/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses/&#123;name&#125;</code></li><li>변경 <code>/apis/storage.k8s.io/v1alpha1/namespaces/&#123;namespace&#125;/csistoragecapacities/&#123;name&#125;</code></li><li>제거 <code>/apis/storage.k8s.io/v1alpha1/volumeattachments/&#123;name&#125;</code></li><li>제거 <code>/apis/storage.k8s.io/v1alpha1/watch/volumeattachments</code></li><li>제거 <code>/apis/storage.k8s.io/v1alpha1/watch/volumeattachments/&#123;name&#125;</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-23에서-stable로-변경된-문서들&quot;&gt;&lt;a href=&quot;#1-23에서-stable로-변경된-문서들&quot; class=&quot;headerlink&quot; title=&quot;1.23에서 stable로 변경된 문서들&quot;&gt;&lt;/a&gt;1.23에서 stable로 변경된 문</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Helm 사용해보기</title>
    <link href="https://taeuk-gang.github.io/wiki/TIL/2021/11/20/helm/"/>
    <id>https://taeuk-gang.github.io/wiki/TIL/2021/11/20/helm/</id>
    <published>2021-11-20T14:15:22.000Z</published>
    <updated>2022-09-23T10:58:11.384Z</updated>
    
    <content type="html"><![CDATA[<iframe src="/presentation/TIL/2021/11/20"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;/presentation/TIL/2021/11/20&quot;&gt;&lt;/iframe&gt;</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/categories/Kubernetes/"/>
    
    <category term="Helm" scheme="https://taeuk-gang.github.io/categories/Kubernetes/Helm/"/>
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/tags/Kubernetes/"/>
    
    <category term="Helm" scheme="https://taeuk-gang.github.io/tags/Helm/"/>
    
  </entry>
  
  <entry>
    <title>TIL 10월 11일 (월)</title>
    <link href="https://taeuk-gang.github.io/wiki/TIL/2021/10/11/"/>
    <id>https://taeuk-gang.github.io/wiki/TIL/2021/10/11/</id>
    <published>2021-10-11T03:15:22.000Z</published>
    <updated>2022-09-23T10:58:11.384Z</updated>
    
    <content type="html"><![CDATA[<iframe src="/presentation/TIL/2021/10/11"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;/presentation/TIL/2021/10/11&quot;&gt;&lt;/iframe&gt;</summary>
      
    
    
    
    <category term="TIL" scheme="https://taeuk-gang.github.io/categories/TIL/"/>
    
    <category term="2021" scheme="https://taeuk-gang.github.io/categories/TIL/2021/"/>
    
    <category term="10" scheme="https://taeuk-gang.github.io/categories/TIL/2021/10/"/>
    
    
    <category term="TIL" scheme="https://taeuk-gang.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL 10월 10일 (일)</title>
    <link href="https://taeuk-gang.github.io/wiki/TIL/2021/10/10/"/>
    <id>https://taeuk-gang.github.io/wiki/TIL/2021/10/10/</id>
    <published>2021-10-10T03:15:22.000Z</published>
    <updated>2022-09-23T10:58:11.384Z</updated>
    
    <content type="html"><![CDATA[<iframe src="/presentation/TIL/2021/10/10"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;/presentation/TIL/2021/10/10&quot;&gt;&lt;/iframe&gt;</summary>
      
    
    
    
    <category term="TIL" scheme="https://taeuk-gang.github.io/categories/TIL/"/>
    
    <category term="2021" scheme="https://taeuk-gang.github.io/categories/TIL/2021/"/>
    
    <category term="10" scheme="https://taeuk-gang.github.io/categories/TIL/2021/10/"/>
    
    
    <category term="TIL" scheme="https://taeuk-gang.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>리팩토링 - Typescript</title>
    <link href="https://taeuk-gang.github.io/wiki/Refactoring_typescript/"/>
    <id>https://taeuk-gang.github.io/wiki/Refactoring_typescript/</id>
    <published>2020-12-15T14:43:18.000Z</published>
    <updated>2022-09-23T10:58:11.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="리팩토링-Typescript"><a href="#리팩토링-Typescript" class="headerlink" title="리팩토링: Typescript"></a>리팩토링: Typescript</h1><blockquote><ol><li>작성 방식</li></ol><p>AS-IS 를 제시하고, 리팩토링 기법을 사용한 결과인 TO-BE 와 비교</p><ol start="2"><li>연관성 있는 리팩토링 기법은 묶기</li><li>중요도 순서별로 순서 배열하기</li></ol></blockquote><h2 id="코드-악취-안티-코딩"><a href="#코드-악취-안티-코딩" class="headerlink" title="코드 악취 (안티 코딩)"></a>코드 악취 (안티 코딩)</h2><h3 id="1-기이한-이름"><a href="#1-기이한-이름" class="headerlink" title="1. 기이한 이름"></a>1. 기이한 이름</h3><ul><li>함수 선언 바꾸기</li><li>변수 이름 바꾸기</li><li>필드 이름 바꾸기</li></ul><h3 id="2-중복-코드"><a href="#2-중복-코드" class="headerlink" title="2. 중복 코드"></a>2. 중복 코드</h3><h3 id="3-긴-함수"><a href="#3-긴-함수" class="headerlink" title="3. 긴 함수"></a>3. 긴 함수</h3><h3 id="4-긴-매개변수-목록"><a href="#4-긴-매개변수-목록" class="headerlink" title="4. 긴 매개변수 목록"></a>4. 긴 매개변수 목록</h3><h3 id="5-전역-데이터"><a href="#5-전역-데이터" class="headerlink" title="5. 전역 데이터"></a>5. 전역 데이터</h3><h3 id="6-가변-데이터"><a href="#6-가변-데이터" class="headerlink" title="6. 가변 데이터"></a>6. 가변 데이터</h3><h3 id="7-뒤엉킨-변경"><a href="#7-뒤엉킨-변경" class="headerlink" title="7. 뒤엉킨 변경"></a>7. 뒤엉킨 변경</h3><h3 id="8-산탄총-수술"><a href="#8-산탄총-수술" class="headerlink" title="8. 산탄총 수술"></a>8. 산탄총 수술</h3><h3 id="9-기능-편애"><a href="#9-기능-편애" class="headerlink" title="9. 기능 편애"></a>9. 기능 편애</h3><h3 id="10-데이터-뭉치"><a href="#10-데이터-뭉치" class="headerlink" title="10. 데이터 뭉치"></a>10. 데이터 뭉치</h3><h3 id="11-기본형-집착"><a href="#11-기본형-집착" class="headerlink" title="11. 기본형 집착"></a>11. 기본형 집착</h3><h3 id="12-반복-switch문"><a href="#12-반복-switch문" class="headerlink" title="12. 반복 switch문"></a>12. 반복 switch문</h3><h3 id="13-반복문"><a href="#13-반복문" class="headerlink" title="13. 반복문"></a>13. 반복문</h3><h3 id="14-성의-없는-요소"><a href="#14-성의-없는-요소" class="headerlink" title="14. 성의 없는 요소"></a>14. 성의 없는 요소</h3><h3 id="15-추측성-일반화"><a href="#15-추측성-일반화" class="headerlink" title="15. 추측성 일반화"></a>15. 추측성 일반화</h3><h3 id="16-임시-필드"><a href="#16-임시-필드" class="headerlink" title="16. 임시 필드"></a>16. 임시 필드</h3><h3 id="17-메시지-체인"><a href="#17-메시지-체인" class="headerlink" title="17. 메시지 체인"></a>17. 메시지 체인</h3><h3 id="18-중개자"><a href="#18-중개자" class="headerlink" title="18. 중개자"></a>18. 중개자</h3><h3 id="19-내부자-거래"><a href="#19-내부자-거래" class="headerlink" title="19. 내부자 거래"></a>19. 내부자 거래</h3><h3 id="20-거대한-클래스"><a href="#20-거대한-클래스" class="headerlink" title="20. 거대한 클래스"></a>20. 거대한 클래스</h3><h3 id="21-서로-다른-인터페이스의-대안-클래스"><a href="#21-서로-다른-인터페이스의-대안-클래스" class="headerlink" title="21. 서로 다른 인터페이스의 대안 클래스"></a>21. 서로 다른 인터페이스의 대안 클래스</h3><h3 id="22-데이터-클래스"><a href="#22-데이터-클래스" class="headerlink" title="22. 데이터 클래스"></a>22. 데이터 클래스</h3><h3 id="23-상속-포기"><a href="#23-상속-포기" class="headerlink" title="23. 상속 포기"></a>23. 상속 포기</h3><h3 id="24-주석"><a href="#24-주석" class="headerlink" title="24. 주석"></a>24. 주석</h3><h2 id="리팩토링-기법"><a href="#리팩토링-기법" class="headerlink" title="리팩토링 기법"></a>리팩토링 기법</h2><h3 id="기본적인-리팩토링"><a href="#기본적인-리팩토링" class="headerlink" title="기본적인 리팩토링"></a>기본적인 리팩토링</h3><h4 id="7-변수-이름-바꾸기"><a href="#7-변수-이름-바꾸기" class="headerlink" title="7. 변수 이름 바꾸기"></a>7. 변수 이름 바꾸기</h4><h5 id="AS-IS"><a href="#AS-IS" class="headerlink" title="AS-IS"></a>AS-IS</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = height * width;</span><br></pre></td></tr></table></figure><h5 id="TO-BE"><a href="#TO-BE" class="headerlink" title="TO-BE"></a>TO-BE</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> area = heigth * width;</span><br></pre></td></tr></table></figure><h3 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a>캡슐화</h3><h3 id="기능-이동"><a href="#기능-이동" class="headerlink" title="기능 이동"></a>기능 이동</h3><h3 id="데이터-조직화"><a href="#데이터-조직화" class="headerlink" title="데이터 조직화"></a>데이터 조직화</h3><h3 id="조건부-로직-간소화"><a href="#조건부-로직-간소화" class="headerlink" title="조건부 로직 간소화"></a>조건부 로직 간소화</h3><h3 id="API-리팩토링"><a href="#API-리팩토링" class="headerlink" title="API 리팩토링"></a>API 리팩토링</h3><h3 id="상속-다루기"><a href="#상속-다루기" class="headerlink" title="상속 다루기"></a>상속 다루기</h3><h3 id="값을-참조로-바꾸기"><a href="#값을-참조로-바꾸기" class="headerlink" title="값을 참조로 바꾸기"></a>값을 참조로 바꾸기</h3><p>만약 데이터를 갱신해야하는 경우면, 해당 데이터를 값으로 복사하면 안된다. 갱신의 경우에는 참조를 이용</p><h4 id="AS-IS-1"><a href="#AS-IS-1" class="headerlink" title="AS-IS"></a>AS-IS</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> customer = <span class="keyword">new</span> Customer(customData);</span><br></pre></td></tr></table></figure><h4 id="TO-BE-1"><a href="#TO-BE-1" class="headerlink" title="TO-BE"></a>TO-BE</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> customer = customerRepository.get(customerData.id);</span><br></pre></td></tr></table></figure><h2 id="참조를-값으로-바꾸기"><a href="#참조를-값으로-바꾸기" class="headerlink" title="참조를 값으로 바꾸기"></a>참조를 값으로 바꾸기</h2><h3 id="AS-IS-2"><a href="#AS-IS-2" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Product &#123;</span><br><span class="line">applyDiscount(arg) &#123;</span><br><span class="line">    <span class="built_in">this</span>._price.amount -= arg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TO-BE-2"><a href="#TO-BE-2" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Product &#123;</span><br><span class="line">  applyDiscount(arg) &#123;</span><br><span class="line">    <span class="built_in">this</span>._price = <span class="keyword">new</span> Money(<span class="built_in">this</span>._price.amount - arg, <span class="built_in">this</span>._price.currency);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="객체-통째로-넘기기"><a href="#객체-통째로-넘기기" class="headerlink" title="객체 통째로 넘기기"></a>객체 통째로 넘기기</h2><p>변화에 대응이 쉬움, 그러나 함수가 레코드 자체에 의존하지 않는다면 쓰지말 것</p><h3 id="AS-IS-3"><a href="#AS-IS-3" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> low = aRoom.daysTemRange.low;</span><br><span class="line"><span class="keyword">const</span> high = aRoom.daysTemRange.high;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aPlan.withinRangle(low, high))</span><br></pre></td></tr></table></figure><h3 id="TO-BE-3"><a href="#TO-BE-3" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (aPlan.withinRange(aRoom.daysTempRange))</span><br></pre></td></tr></table></figure><h2 id="계층-합치기"><a href="#계층-합치기" class="headerlink" title="계층 합치기"></a>계층 합치기</h2><p>클래스 계층구조가 개발하면서, 부모와 자식관계가 너무 비슷해져 더는 독립적일 필요가 없는 경우에 사용</p><h3 id="AS-IS-4"><a href="#AS-IS-4" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Employee &#123;...&#125;</span><br><span class="line"><span class="keyword">class</span> Salesperson <span class="keyword">extends</span> Employee &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="TO-BE-4"><a href="#TO-BE-4" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Employee &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="기본형을-객체로-바꾸기"><a href="#기본형을-객체로-바꾸기" class="headerlink" title="기본형을 객체로 바꾸기"></a>기본형을 객체로 바꾸기</h2><blockquote><p> 직관적이지는 않으나, 이후 프로그램이 커질수록 유지보수가 쉬워짐</p></blockquote><h3 id="AS-IS-5"><a href="#AS-IS-5" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PRIORITY_VALUE = &#123;</span><br><span class="line">  low: <span class="number">0</span>,</span><br><span class="line">  normal: <span class="number">1</span>,</span><br><span class="line">  high: <span class="number">2</span>,</span><br><span class="line">  rush: <span class="number">3</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">type</span> PRIORITY_VALUE = <span class="keyword">typeof</span> PRIORITY_VALUE[keyof <span class="keyword">typeof</span> PRIORITY_VALUE];</span><br><span class="line"><span class="keyword">type</span> PRIORITY_KEY = keyof <span class="keyword">typeof</span> PRIORITY_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Order &#123; </span><br><span class="line">  _priority: PRIORITY_KEY;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">data: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._priority = data.priority;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get priority(): PRIORITY_KEY &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._priority;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  set priority(value: PRIORITY_KEY) &#123;</span><br><span class="line">    <span class="built_in">this</span>._priority = value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  higherThan(otherValue: PRIORITY_KEY): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PRIORITY_VALUE[<span class="built_in">this</span>._priority] &gt; PRIORITY_VALUE[otherValue];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orders: Order[] = [</span><br><span class="line">  <span class="keyword">new</span> Order(&#123;priority: <span class="string">`normal`</span>&#125;), </span><br><span class="line">  <span class="keyword">new</span> Order(&#123;priority: <span class="string">`high`</span>&#125;), </span><br><span class="line">  <span class="keyword">new</span> Order(&#123;priority: <span class="string">`rush`</span>&#125;)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  orders.filter(<span class="function"><span class="params">order</span> =&gt;</span> order.higherThan(<span class="string">`high`</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="TO-BE-5"><a href="#TO-BE-5" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PRIORITY_VALUE = &#123;</span><br><span class="line">  low: <span class="number">0</span>,</span><br><span class="line">  normal: <span class="number">1</span>,</span><br><span class="line">  high: <span class="number">2</span>,</span><br><span class="line">  rush: <span class="number">3</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">type</span> PRIORITY_VALUE = <span class="keyword">typeof</span> PRIORITY_VALUE[keyof <span class="keyword">typeof</span> PRIORITY_VALUE];</span><br><span class="line"><span class="keyword">type</span> PRIORITY_KEY = keyof <span class="keyword">typeof</span> PRIORITY_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 기본형 대신, 클래스 생성</span></span><br><span class="line"><span class="keyword">class</span> Priority &#123;</span><br><span class="line">  _value: PRIORITY_KEY;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">value: PRIORITY_KEY</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  priority(): PRIORITY_KEY &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  higherThan(other: Priority): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PRIORITY_VALUE[<span class="built_in">this</span>._value] &gt; PRIORITY_VALUE[other._value];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Order &#123; </span><br><span class="line">  _priority: Priority;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 캡슐화</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">data: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._priority = <span class="keyword">new</span> Priority(data.priority);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3. 게터 및 세터 수정</span></span><br><span class="line">  get priority(): Priority &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._priority;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get priorityValue(): PRIORITY_KEY &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._priority.priority();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  set priorityValue(value: PRIORITY_KEY) &#123;</span><br><span class="line">    <span class="built_in">this</span>._priority = <span class="keyword">new</span> Priority(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orders: Order[] = [</span><br><span class="line">  <span class="keyword">new</span> Order(&#123;priority: <span class="string">`normal`</span>&#125;), </span><br><span class="line">  <span class="keyword">new</span> Order(&#123;priority: <span class="string">`high`</span>&#125;), </span><br><span class="line">  <span class="keyword">new</span> Order(&#123;priority: <span class="string">`rush`</span>&#125;)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  orders.filter(<span class="function"><span class="params">order</span> =&gt;</span> order.priority.higherThan(<span class="keyword">new</span> Priority(<span class="string">`normal`</span>)))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>절차</p><ol><li>변수 캡슐화</li><li>클래스 생성</li><li>setter와, getter 수정</li></ol><h2 id="단계-쪼개기"><a href="#단계-쪼개기" class="headerlink" title="단계 쪼개기"></a>단계 쪼개기</h2><h3 id="AS-IS-6"><a href="#AS-IS-6" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orderData = orderString.split(<span class="string">`/\s+/`</span>);</span><br><span class="line"><span class="keyword">const</span> productPrice = priceList[orderData[<span class="number">0</span>].split(<span class="string">`-`</span>)[<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">const</span> orderPrice = <span class="built_in">parseInt</span>(orderData[<span class="number">1</span>]) * productPrice;</span><br></pre></td></tr></table></figure><h3 id="TO-BE-6"><a href="#TO-BE-6" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orderRecord = parseOrder(order);</span><br><span class="line"><span class="keyword">const</span> productPrice = priceList[orderData[<span class="number">0</span>].split(<span class="string">`-`</span>)[<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseOrder</span>(<span class="params">aString</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> values = aString.split(<span class="regexp">/\s+/</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    productID: values[<span class="number">0</span>].split(<span class="string">`-`</span>)[<span class="number">1</span>],</span><br><span class="line">    quantity: <span class="built_in">parseInt</span>(values[<span class="number">1</span>]),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">price</span>(<span class="params">order, priceList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> order.quantity + priceList[order.productID];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="레코드-캡슐화하기"><a href="#레코드-캡슐화하기" class="headerlink" title="레코드 캡슐화하기"></a>레코드 캡슐화하기</h2><h3 id="AS-IS-7"><a href="#AS-IS-7" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">organization = &#123;</span><br><span class="line">  name: <span class="string">`taeuk`</span>,</span><br><span class="line">  country: <span class="string">`korea`</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TO-BE-7"><a href="#TO-BE-7" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Organization &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = data.name;</span><br><span class="line">    <span class="built_in">this</span>._country = data.country;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get name(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  set name(aString): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._name = aString;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get country(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._country;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  set country(aString): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._country = aString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="매개변수-객체-만들기"><a href="#매개변수-객체-만들기" class="headerlink" title="매개변수 객체 만들기"></a>매개변수 객체 만들기</h2><h3 id="AS-IS-8"><a href="#AS-IS-8" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">amountInvoiced</span>(<span class="params">startDate, endDate</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="TO-BE-8"><a href="#TO-BE-8" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">amountInvoiced</span>(<span class="params">aDateRange</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h2 id="매개변수를-질의-함수로-바꾸기"><a href="#매개변수를-질의-함수로-바꾸기" class="headerlink" title="매개변수를 질의 함수로 바꾸기"></a>매개변수를 질의 함수로 바꾸기</h2><h3 id="AS-IS-9"><a href="#AS-IS-9" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-9"><a href="#TO-BE-9" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="질의-함수를-매개변수로-바꾸기"><a href="#질의-함수를-매개변수로-바꾸기" class="headerlink" title="질의 함수를 매개변수로 바꾸기"></a>질의 함수를 매개변수로 바꾸기</h2><h3 id="AS-IS-10"><a href="#AS-IS-10" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-10"><a href="#TO-BE-10" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-매직-리터럴-바꾸기"><a href="#9-매직-리터럴-바꾸기" class="headerlink" title="9. 매직 리터럴 바꾸기"></a>9. 매직 리터럴 바꾸기</h2><h3 id="AS-IS-11"><a href="#AS-IS-11" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-11"><a href="#TO-BE-11" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-메서드-내리기"><a href="#10-메서드-내리기" class="headerlink" title="10. 메서드 내리기"></a>10. 메서드 내리기</h2><h3 id="AS-IS-12"><a href="#AS-IS-12" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-12"><a href="#TO-BE-12" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-메서드-올리기"><a href="#11-메서드-올리기" class="headerlink" title="11. 메서드 올리기"></a>11. 메서드 올리기</h2><h3 id="AS-IS-13"><a href="#AS-IS-13" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-13"><a href="#TO-BE-13" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-명령을-함수로-바꾸기"><a href="#12-명령을-함수로-바꾸기" class="headerlink" title="12. 명령을 함수로 바꾸기"></a>12. 명령을 함수로 바꾸기</h2><h3 id="AS-IS-14"><a href="#AS-IS-14" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-14"><a href="#TO-BE-14" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-문장-슬라이드하기"><a href="#13-문장-슬라이드하기" class="headerlink" title="13. 문장 슬라이드하기"></a>13. 문장 슬라이드하기</h2><h3 id="AS-IS-15"><a href="#AS-IS-15" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-15"><a href="#TO-BE-15" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14-문장을-함수로-옮기기"><a href="#14-문장을-함수로-옮기기" class="headerlink" title="14. 문장을 함수로 옮기기"></a>14. 문장을 함수로 옮기기</h2><h3 id="AS-IS-16"><a href="#AS-IS-16" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-16"><a href="#TO-BE-16" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15-문장을-호출한-곳으로-옮기기"><a href="#15-문장을-호출한-곳으로-옮기기" class="headerlink" title="15. 문장을 호출한 곳으로 옮기기"></a>15. 문장을 호출한 곳으로 옮기기</h2><h3 id="AS-IS-17"><a href="#AS-IS-17" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-17"><a href="#TO-BE-17" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="16-반복문-쪼개기"><a href="#16-반복문-쪼개기" class="headerlink" title="16. 반복문 쪼개기"></a>16. 반복문 쪼개기</h2><h3 id="AS-IS-18"><a href="#AS-IS-18" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-18"><a href="#TO-BE-18" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="17-반복문을-파이프라인으로-바꾸기"><a href="#17-반복문을-파이프라인으로-바꾸기" class="headerlink" title="17. 반복문을 파이프라인으로 바꾸기"></a>17. 반복문을 파이프라인으로 바꾸기</h2><h3 id="AS-IS-19"><a href="#AS-IS-19" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-19"><a href="#TO-BE-19" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="18-변수-이름-바꾸기"><a href="#18-변수-이름-바꾸기" class="headerlink" title="18. 변수 이름 바꾸기"></a>18. 변수 이름 바꾸기</h2><h3 id="AS-IS-20"><a href="#AS-IS-20" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-20"><a href="#TO-BE-20" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="19-변수-인라인하기"><a href="#19-변수-인라인하기" class="headerlink" title="19. 변수 인라인하기"></a>19. 변수 인라인하기</h2><h3 id="AS-IS-21"><a href="#AS-IS-21" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-21"><a href="#TO-BE-21" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="20-변수-쪼개기"><a href="#20-변수-쪼개기" class="headerlink" title="20. 변수 쪼개기"></a>20. 변수 쪼개기</h2><h3 id="AS-IS-22"><a href="#AS-IS-22" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-22"><a href="#TO-BE-22" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="21-변수-추출하기"><a href="#21-변수-추출하기" class="headerlink" title="21. 변수 추출하기"></a>21. 변수 추출하기</h2><h3 id="AS-IS-23"><a href="#AS-IS-23" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-23"><a href="#TO-BE-23" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="22-변수-캡슐화하기"><a href="#22-변수-캡슐화하기" class="headerlink" title="22. 변수 캡슐화하기"></a>22. 변수 캡슐화하기</h2><h3 id="AS-IS-24"><a href="#AS-IS-24" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-24"><a href="#TO-BE-24" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="23-생성자-본문-올리기"><a href="#23-생성자-본문-올리기" class="headerlink" title="23. 생성자 본문 올리기"></a>23. 생성자 본문 올리기</h2><h3 id="AS-IS-25"><a href="#AS-IS-25" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-25"><a href="#TO-BE-25" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="24-생성자를-팩터리-함수로-바꾸기"><a href="#24-생성자를-팩터리-함수로-바꾸기" class="headerlink" title="24. 생성자를 팩터리 함수로 바꾸기"></a>24. 생성자를 팩터리 함수로 바꾸기</h2><h3 id="AS-IS-26"><a href="#AS-IS-26" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-26"><a href="#TO-BE-26" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="25-서브클래스-제거하기"><a href="#25-서브클래스-제거하기" class="headerlink" title="25. 서브클래스 제거하기"></a>25. 서브클래스 제거하기</h2><h3 id="AS-IS-27"><a href="#AS-IS-27" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-27"><a href="#TO-BE-27" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="26-서브클래스를-위임으로-바꾸기"><a href="#26-서브클래스를-위임으로-바꾸기" class="headerlink" title="26. 서브클래스를 위임으로 바꾸기"></a>26. 서브클래스를 위임으로 바꾸기</h2><h3 id="AS-IS-28"><a href="#AS-IS-28" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-28"><a href="#TO-BE-28" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="27-세터-제거하기"><a href="#27-세터-제거하기" class="headerlink" title="27. 세터 제거하기"></a>27. 세터 제거하기</h2><h3 id="AS-IS-29"><a href="#AS-IS-29" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-29"><a href="#TO-BE-29" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="28-수정된-값-변환하기"><a href="#28-수정된-값-변환하기" class="headerlink" title="28. 수정된 값 변환하기"></a>28. 수정된 값 변환하기</h2><h3 id="AS-IS-30"><a href="#AS-IS-30" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-30"><a href="#TO-BE-30" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="29-슈퍼클래스-추출하기"><a href="#29-슈퍼클래스-추출하기" class="headerlink" title="29. 슈퍼클래스 추출하기"></a>29. 슈퍼클래스 추출하기</h2><h3 id="AS-IS-31"><a href="#AS-IS-31" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-31"><a href="#TO-BE-31" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="30-슈퍼클래스를-위임으로-바꾸기"><a href="#30-슈퍼클래스를-위임으로-바꾸기" class="headerlink" title="30. 슈퍼클래스를 위임으로 바꾸기"></a>30. 슈퍼클래스를 위임으로 바꾸기</h2><h3 id="AS-IS-32"><a href="#AS-IS-32" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-32"><a href="#TO-BE-32" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="31-알고리즘-교체하기"><a href="#31-알고리즘-교체하기" class="headerlink" title="31. 알고리즘 교체하기"></a>31. 알고리즘 교체하기</h2><h3 id="AS-IS-33"><a href="#AS-IS-33" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-33"><a href="#TO-BE-33" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="32-Assertion-추가하기"><a href="#32-Assertion-추가하기" class="headerlink" title="32. Assertion 추가하기"></a>32. Assertion 추가하기</h2><h3 id="AS-IS-34"><a href="#AS-IS-34" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-34"><a href="#TO-BE-34" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="33-여러-함수를-변환-함수로-묶기"><a href="#33-여러-함수를-변환-함수로-묶기" class="headerlink" title="33. 여러 함수를 변환 함수로 묶기"></a>33. 여러 함수를 변환 함수로 묶기</h2><h3 id="AS-IS-35"><a href="#AS-IS-35" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-35"><a href="#TO-BE-35" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="34-여러-함수를-클래스로-묶기"><a href="#34-여러-함수를-클래스로-묶기" class="headerlink" title="34. 여러 함수를 클래스로 묶기"></a>34. 여러 함수를 클래스로 묶기</h2><h3 id="AS-IS-36"><a href="#AS-IS-36" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-36"><a href="#TO-BE-36" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="35-예외를-사전확인으로-바꾸기"><a href="#35-예외를-사전확인으로-바꾸기" class="headerlink" title="35. 예외를 사전확인으로 바꾸기"></a>35. 예외를 사전확인으로 바꾸기</h2><h3 id="AS-IS-37"><a href="#AS-IS-37" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-37"><a href="#TO-BE-37" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="36-오류-코드를-예외로-바꾸기"><a href="#36-오류-코드를-예외로-바꾸기" class="headerlink" title="36. 오류 코드를 예외로 바꾸기"></a>36. 오류 코드를 예외로 바꾸기</h2><h3 id="AS-IS-38"><a href="#AS-IS-38" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-38"><a href="#TO-BE-38" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="37-위임-숨기기"><a href="#37-위임-숨기기" class="headerlink" title="37. 위임 숨기기"></a>37. 위임 숨기기</h2><h3 id="AS-IS-39"><a href="#AS-IS-39" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-39"><a href="#TO-BE-39" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="38-인라인-코드를-함수-호출로-바꾸기"><a href="#38-인라인-코드를-함수-호출로-바꾸기" class="headerlink" title="38. 인라인 코드를 함수 호출로 바꾸기"></a>38. 인라인 코드를 함수 호출로 바꾸기</h2><h3 id="AS-IS-40"><a href="#AS-IS-40" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-40"><a href="#TO-BE-40" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="39-임시-변수를-질의-함수로-바꾸기"><a href="#39-임시-변수를-질의-함수로-바꾸기" class="headerlink" title="39. 임시 변수를 질의 함수로 바꾸기"></a>39. 임시 변수를 질의 함수로 바꾸기</h2><h3 id="AS-IS-41"><a href="#AS-IS-41" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-41"><a href="#TO-BE-41" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="40-제어-플래그를-탈출문으로-바꾸기"><a href="#40-제어-플래그를-탈출문으로-바꾸기" class="headerlink" title="40. 제어 플래그를 탈출문으로 바꾸기"></a>40. 제어 플래그를 탈출문으로 바꾸기</h2><h3 id="AS-IS-42"><a href="#AS-IS-42" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-42"><a href="#TO-BE-42" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="41-조건문-분해하기"><a href="#41-조건문-분해하기" class="headerlink" title="41. 조건문 분해하기"></a>41. 조건문 분해하기</h2><h3 id="AS-IS-43"><a href="#AS-IS-43" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-43"><a href="#TO-BE-43" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="42-조건부-로직을-다형성으로-바꾸기"><a href="#42-조건부-로직을-다형성으로-바꾸기" class="headerlink" title="42. 조건부 로직을 다형성으로 바꾸기"></a>42. 조건부 로직을 다형성으로 바꾸기</h2><h3 id="AS-IS-44"><a href="#AS-IS-44" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-44"><a href="#TO-BE-44" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="43-조건식-통합하기"><a href="#43-조건식-통합하기" class="headerlink" title="43. 조건식 통합하기"></a>43. 조건식 통합하기</h2><h3 id="AS-IS-45"><a href="#AS-IS-45" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-45"><a href="#TO-BE-45" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="44-죽은-코드-제거하기"><a href="#44-죽은-코드-제거하기" class="headerlink" title="44. 죽은 코드 제거하기"></a>44. 죽은 코드 제거하기</h2><h3 id="AS-IS-46"><a href="#AS-IS-46" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-46"><a href="#TO-BE-46" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="45-중개자-제거하기"><a href="#45-중개자-제거하기" class="headerlink" title="45. 중개자 제거하기"></a>45. 중개자 제거하기</h2><h3 id="AS-IS-47"><a href="#AS-IS-47" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-47"><a href="#TO-BE-47" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="46-중첩-조건문을-보호-구문으로-바꾸기"><a href="#46-중첩-조건문을-보호-구문으로-바꾸기" class="headerlink" title="46. 중첩 조건문을 보호 구문으로 바꾸기"></a>46. 중첩 조건문을 보호 구문으로 바꾸기</h2><h3 id="AS-IS-48"><a href="#AS-IS-48" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-48"><a href="#TO-BE-48" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="48-질의-함수와-변경-함수-분리하기"><a href="#48-질의-함수와-변경-함수-분리하기" class="headerlink" title="48. 질의 함수와 변경 함수 분리하기"></a>48. 질의 함수와 변경 함수 분리하기</h2><h3 id="AS-IS-49"><a href="#AS-IS-49" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-49"><a href="#TO-BE-49" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="50-컬렉션-캡슐화하기"><a href="#50-컬렉션-캡슐화하기" class="headerlink" title="50. 컬렉션 캡슐화하기"></a>50. 컬렉션 캡슐화하기</h2><h3 id="AS-IS-50"><a href="#AS-IS-50" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-50"><a href="#TO-BE-50" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="51-클래스-인라인하기"><a href="#51-클래스-인라인하기" class="headerlink" title="51. 클래스 인라인하기"></a>51. 클래스 인라인하기</h2><h3 id="AS-IS-51"><a href="#AS-IS-51" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-51"><a href="#TO-BE-51" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="52-클래스-추출하기"><a href="#52-클래스-추출하기" class="headerlink" title="52. 클래스 추출하기"></a>52. 클래스 추출하기</h2><h3 id="AS-IS-52"><a href="#AS-IS-52" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-52"><a href="#TO-BE-52" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="53-타입-코드를-서브클래스로-바꾸기"><a href="#53-타입-코드를-서브클래스로-바꾸기" class="headerlink" title="53. 타입 코드를 서브클래스로 바꾸기"></a>53. 타입 코드를 서브클래스로 바꾸기</h2><h3 id="AS-IS-53"><a href="#AS-IS-53" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-53"><a href="#TO-BE-53" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="54-특이-케이스-추가하기"><a href="#54-특이-케이스-추가하기" class="headerlink" title="54. 특이 케이스 추가하기"></a>54. 특이 케이스 추가하기</h2><h3 id="AS-IS-54"><a href="#AS-IS-54" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-54"><a href="#TO-BE-54" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="55-파생-변수를-질의-함수로-바꾸기"><a href="#55-파생-변수를-질의-함수로-바꾸기" class="headerlink" title="55. 파생 변수를 질의 함수로 바꾸기"></a>55. 파생 변수를 질의 함수로 바꾸기</h2><h3 id="AS-IS-55"><a href="#AS-IS-55" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-55"><a href="#TO-BE-55" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="56-플래그-인수-제거하기"><a href="#56-플래그-인수-제거하기" class="headerlink" title="56. 플래그 인수 제거하기"></a>56. 플래그 인수 제거하기</h2><h3 id="AS-IS-56"><a href="#AS-IS-56" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-56"><a href="#TO-BE-56" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="57-필드-내리기"><a href="#57-필드-내리기" class="headerlink" title="57. 필드 내리기"></a>57. 필드 내리기</h2><h3 id="AS-IS-57"><a href="#AS-IS-57" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-57"><a href="#TO-BE-57" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="58-필드-올리기"><a href="#58-필드-올리기" class="headerlink" title="58. 필드 올리기"></a>58. 필드 올리기</h2><h3 id="AS-IS-58"><a href="#AS-IS-58" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-58"><a href="#TO-BE-58" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="59-필드-옮기기"><a href="#59-필드-옮기기" class="headerlink" title="59. 필드 옮기기"></a>59. 필드 옮기기</h2><h3 id="AS-IS-59"><a href="#AS-IS-59" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-59"><a href="#TO-BE-59" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="60-필드-이름-바꾸기"><a href="#60-필드-이름-바꾸기" class="headerlink" title="60. 필드 이름 바꾸기"></a>60. 필드 이름 바꾸기</h2><h3 id="AS-IS-60"><a href="#AS-IS-60" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-60"><a href="#TO-BE-60" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="61-함수-매개변수화하기"><a href="#61-함수-매개변수화하기" class="headerlink" title="61. 함수 매개변수화하기"></a>61. 함수 매개변수화하기</h2><h3 id="AS-IS-61"><a href="#AS-IS-61" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-61"><a href="#TO-BE-61" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="62-함수-선언-바꾸기"><a href="#62-함수-선언-바꾸기" class="headerlink" title="62. 함수 선언 바꾸기"></a>62. 함수 선언 바꾸기</h2><h3 id="AS-IS-62"><a href="#AS-IS-62" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-62"><a href="#TO-BE-62" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="63-함수-옮기기"><a href="#63-함수-옮기기" class="headerlink" title="63. 함수 옮기기"></a>63. 함수 옮기기</h2><h3 id="AS-IS-63"><a href="#AS-IS-63" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-63"><a href="#TO-BE-63" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="64-함수-인라인하기"><a href="#64-함수-인라인하기" class="headerlink" title="64. 함수 인라인하기"></a>64. 함수 인라인하기</h2><h3 id="AS-IS-64"><a href="#AS-IS-64" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-64"><a href="#TO-BE-64" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="65-함수-추출하기"><a href="#65-함수-추출하기" class="headerlink" title="65. 함수 추출하기"></a>65. 함수 추출하기</h2><h3 id="AS-IS-65"><a href="#AS-IS-65" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-65"><a href="#TO-BE-65" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="66-함수를-명령으로-바꾸기"><a href="#66-함수를-명령으로-바꾸기" class="headerlink" title="66. 함수를 명령으로 바꾸기"></a>66. 함수를 명령으로 바꾸기</h2><h3 id="AS-IS-66"><a href="#AS-IS-66" class="headerlink" title="AS-IS"></a>AS-IS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TO-BE-66"><a href="#TO-BE-66" class="headerlink" title="TO-BE"></a>TO-BE</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;리팩토링-Typescript&quot;&gt;&lt;a href=&quot;#리팩토링-Typescript&quot; class=&quot;headerlink&quot; title=&quot;리팩토링: Typescript&quot;&gt;&lt;/a&gt;리팩토링: Typescript&lt;/h1&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>kind를 이용한 클러스터 설치</title>
    <link href="https://taeuk-gang.github.io/wiki/make-kind-cluster/"/>
    <id>https://taeuk-gang.github.io/wiki/make-kind-cluster/</id>
    <published>2020-11-15T14:43:18.000Z</published>
    <updated>2022-09-23T10:58:11.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kind를-이용한-클러스터-설치"><a href="#kind를-이용한-클러스터-설치" class="headerlink" title="kind를 이용한 클러스터 설치"></a>kind를 이용한 클러스터 설치</h1><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-$(uname)-amd64</span><br><span class="line">chmod +x ./kind</span><br><span class="line">mv ./kind /some-dir-in-your-PATH/kind <span class="comment"># e.g. mv ./kind /usr/local/bin/kind</span></span><br></pre></td></tr></table></figure><h2 id="Basic-command"><a href="#Basic-command" class="headerlink" title="Basic command"></a>Basic command</h2><p>기본값으로 <code>kind-kind</code> 의 이름으로 클러스터가 생성됨</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind create cluster</span><br></pre></td></tr></table></figure><h3 id="확인방법"><a href="#확인방법" class="headerlink" title="확인방법"></a>확인방법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl config get-contexts</span><br></pre></td></tr></table></figure><p>현재는 이미 생성되어있는 클러스터 목록들</p><p><img src="https://i.loli.net/2020/11/15/zBgZDsH9qCwoLfM.png" alt="image-20201115234340989"></p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind create cluster --config config.yaml</span><br></pre></td></tr></table></figure><p>config.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kind.x-k8s.io/v1alpha4</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">apiServerPort:</span> <span class="number">6443</span></span><br><span class="line">  <span class="attr">apiServerAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">nodes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">role:</span> <span class="string">control-plane</span></span><br></pre></td></tr></table></figure><h3 id="이름-설정"><a href="#이름-설정" class="headerlink" title="이름 설정"></a>이름 설정</h3><p>기본 명령어만 치면, kind라는 이름의 클러스터명으로만 생성이 되기 때문에</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind create cluster --naeme &lt;클러스터명&gt;</span><br></pre></td></tr></table></figure><p>위의 명령어를 이용해 클러스터명을 지정할 수 있다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>위와 같이 kind를 이용하여, 클러스터를 생성하고 관리하면 쿠버네티스 오브젝트를 독립적으로 관리할 수 있다.</p><p>예를 들면, <code>kubectl api-resources</code> 를 이용하여 확인 했을 경우, 클러스터 마다 다른 것을 알 수있다.</p><p>확인은 아래의 예시를 통해 알 수 있다.</p><h3 id="예시1-kind-rancher-클러스터의-경우-오브젝트-목록"><a href="#예시1-kind-rancher-클러스터의-경우-오브젝트-목록" class="headerlink" title="예시1. kind-rancher 클러스터의 경우, 오브젝트 목록"></a>예시1. kind-rancher 클러스터의 경우, 오브젝트 목록</h3><p><img src="https://i.loli.net/2020/11/15/Rqf7glkJU2WcvA3.png" alt="image-20201115234913462"></p><h3 id="예시2-kind-kubesphere-클러스터의-경우-오브젝트-목록"><a href="#예시2-kind-kubesphere-클러스터의-경우-오브젝트-목록" class="headerlink" title="예시2. kind-kubesphere 클러스터의 경우, 오브젝트 목록"></a>예시2. kind-kubesphere 클러스터의 경우, 오브젝트 목록</h3><p><img src="https://i.loli.net/2020/11/15/A2ijmK4aWO8Ulg1.png" alt="image-20201115234956138"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kind를-이용한-클러스터-설치&quot;&gt;&lt;a href=&quot;#kind를-이용한-클러스터-설치&quot; class=&quot;headerlink&quot; title=&quot;kind를 이용한 클러스터 설치&quot;&gt;&lt;/a&gt;kind를 이용한 클러스터 설치&lt;/h1&gt;&lt;h2 id=&quot;Downl</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>4장 레플리케이션과 컨트롤러 - 관리되는 파드 배포</title>
    <link href="https://taeuk-gang.github.io/wiki/4_k8s_replication/"/>
    <id>https://taeuk-gang.github.io/wiki/4_k8s_replication/</id>
    <published>2020-11-15T13:33:18.000Z</published>
    <updated>2022-09-23T10:58:11.376Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>개인이 “쿠버네티스 인 액션” 책을 읽고 학습한 내용으로, <del>주말에 술 마시고 공부한 내용으로…</del> 틀린 내용이 있을 수 있습니다.</p></blockquote><h1 id="4장-래플리케이션과-컨트롤러-관리되는-파드-배포"><a href="#4장-래플리케이션과-컨트롤러-관리되는-파드-배포" class="headerlink" title="4장 래플리케이션과 컨트롤러 - 관리되는 파드 배포"></a>4장 래플리케이션과 컨트롤러 - 관리되는 파드 배포</h1><blockquote><p>다루는 내용 소개</p></blockquote><h3 id="4-1-파드의-안정적-유지"><a href="#4-1-파드의-안정적-유지" class="headerlink" title="4.1 파드의 안정적 유지"></a>4.1 파드의 안정적 유지</h3><h4 id="4-1-1-라이브니스-프로브-소개"><a href="#4-1-1-라이브니스-프로브-소개" class="headerlink" title="4.1.1 라이브니스 프로브 소개"></a>4.1.1 라이브니스 프로브 소개</h4><h4 id="4-1-2-HTTP-기반-라이브니스-프로브-생성"><a href="#4-1-2-HTTP-기반-라이브니스-프로브-생성" class="headerlink" title="4.1.2 HTTP 기반 라이브니스 프로브 생성"></a>4.1.2 HTTP 기반 라이브니스 프로브 생성</h4><h4 id="4-1-3-동작-중인-라이브니스-프로브-확인"><a href="#4-1-3-동작-중인-라이브니스-프로브-확인" class="headerlink" title="4.1.3 동작 중인 라이브니스 프로브 확인"></a>4.1.3 동작 중인 라이브니스 프로브 확인</h4><h4 id="4-1-4-라이브니스-프로브-추가-속성-설정"><a href="#4-1-4-라이브니스-프로브-추가-속성-설정" class="headerlink" title="4.1.4 라이브니스 프로브 추가 속성 설정"></a>4.1.4 라이브니스 프로브 추가 속성 설정</h4><h4 id="4-1-5-효과적인-라이브니스-프로브-생성"><a href="#4-1-5-효과적인-라이브니스-프로브-생성" class="headerlink" title="4.1.5 효과적인 라이브니스 프로브 생성"></a>4.1.5 효과적인 라이브니스 프로브 생성</h4><p>오늘 여기까지</p><hr><h3 id="4-2-레플리케이션-컨트롤러-소개"><a href="#4-2-레플리케이션-컨트롤러-소개" class="headerlink" title="4.2 레플리케이션 컨트롤러 소개"></a>4.2 레플리케이션 컨트롤러 소개</h3><h4 id="4-2-1-레플리케이션-컨트롤러-동작"><a href="#4-2-1-레플리케이션-컨트롤러-동작" class="headerlink" title="4.2.1 레플리케이션 컨트롤러 동작"></a>4.2.1 레플리케이션 컨트롤러 동작</h4><h4 id="4-2-2-레플리케이션-컨트롤러-생성"><a href="#4-2-2-레플리케이션-컨트롤러-생성" class="headerlink" title="4.2.2 레플리케이션 컨트롤러 생성"></a>4.2.2 레플리케이션 컨트롤러 생성</h4><h4 id="4-2-3-레플리케이션-컨트롤러-작동-확인"><a href="#4-2-3-레플리케이션-컨트롤러-작동-확인" class="headerlink" title="4.2.3 레플리케이션 컨트롤러 작동 확인"></a>4.2.3 레플리케이션 컨트롤러 작동 확인</h4><h4 id="4-2-4-레플리케이션-컨트롤러-범위-안팎으로-파드-이동"><a href="#4-2-4-레플리케이션-컨트롤러-범위-안팎으로-파드-이동" class="headerlink" title="4.2.4 레플리케이션 컨트롤러 범위 안팎으로 파드 이동"></a>4.2.4 레플리케이션 컨트롤러 범위 안팎으로 파드 이동</h4><h4 id="4-2-5-파드-템플릿-변경"><a href="#4-2-5-파드-템플릿-변경" class="headerlink" title="4.2.5 파드 템플릿 변경"></a>4.2.5 파드 템플릿 변경</h4><h4 id="4-2-6-수평-파드-스케일링"><a href="#4-2-6-수평-파드-스케일링" class="headerlink" title="4.2.6 수평 파드 스케일링"></a>4.2.6 수평 파드 스케일링</h4><h4 id="4-2-7-레플리케이션-컨트롤러-삭제"><a href="#4-2-7-레플리케이션-컨트롤러-삭제" class="headerlink" title="4.2.7 레플리케이션 컨트롤러 삭제"></a>4.2.7 레플리케이션 컨트롤러 삭제</h4><h3 id="4-3-레플리케이션-컨트롤러-대신-레플리카셋-사용"><a href="#4-3-레플리케이션-컨트롤러-대신-레플리카셋-사용" class="headerlink" title="4.3 레플리케이션 컨트롤러 대신 레플리카셋 사용"></a>4.3 레플리케이션 컨트롤러 대신 레플리카셋 사용</h3><h4 id="4-3-1-레플리카셋-vs-레플리케이션-컨트롤러"><a href="#4-3-1-레플리카셋-vs-레플리케이션-컨트롤러" class="headerlink" title="4.3.1 레플리카셋 vs 레플리케이션 컨트롤러"></a>4.3.1 레플리카셋 vs 레플리케이션 컨트롤러</h4><h4 id="4-3-2-레플리카셋-정의"><a href="#4-3-2-레플리카셋-정의" class="headerlink" title="4.3.2 레플리카셋 정의"></a>4.3.2 레플리카셋 정의</h4><h4 id="4-3-3-레플리카셋-생성-및-정의"><a href="#4-3-3-레플리카셋-생성-및-정의" class="headerlink" title="4.3.3 레플리카셋 생성 및 정의"></a>4.3.3 레플리카셋 생성 및 정의</h4><h4 id="4-3-4-레플리카셋-라벨-셀렉터-정의"><a href="#4-3-4-레플리카셋-라벨-셀렉터-정의" class="headerlink" title="4.3.4 레플리카셋 라벨 셀렉터 정의"></a>4.3.4 레플리카셋 라벨 셀렉터 정의</h4><h4 id="4-3-5-레플리카셋-정리"><a href="#4-3-5-레플리카셋-정리" class="headerlink" title="4.3.5 레플리카셋 정리"></a>4.3.5 레플리카셋 정리</h4><h3 id="4-4-데몬셋으로-각-노드에서-파드-1개로-처리하기"><a href="#4-4-데몬셋으로-각-노드에서-파드-1개로-처리하기" class="headerlink" title="4.4 데몬셋으로 각 노드에서 파드 1개로 처리하기"></a>4.4 데몬셋으로 각 노드에서 파드 1개로 처리하기</h3><h4 id="4-4-1-데몬셋으로-모든-노드에-파드-실행"><a href="#4-4-1-데몬셋으로-모든-노드에-파드-실행" class="headerlink" title="4.4.1 데몬셋으로 모든 노드에 파드 실행"></a>4.4.1 데몬셋으로 모든 노드에 파드 실행</h4><h4 id="4-4-2-데몬셋으로-특정-노드에서만-파드-실행"><a href="#4-4-2-데몬셋으로-특정-노드에서만-파드-실행" class="headerlink" title="4.4.2 데몬셋으로 특정 노드에서만 파드 실행"></a>4.4.2 데몬셋으로 특정 노드에서만 파드 실행</h4><h3 id="4-5-완료-가능한-단일-태스크-수행가능한-파드-생성"><a href="#4-5-완료-가능한-단일-태스크-수행가능한-파드-생성" class="headerlink" title="4.5 완료 가능한 단일 태스크 수행가능한 파드 생성"></a>4.5 완료 가능한 단일 태스크 수행가능한 파드 생성</h3><h4 id="4-5-1-잡-리소스-소개"><a href="#4-5-1-잡-리소스-소개" class="headerlink" title="4.5.1 잡 리소스 소개"></a>4.5.1 잡 리소스 소개</h4><h4 id="4-5-2-잡-리소스-정의"><a href="#4-5-2-잡-리소스-정의" class="headerlink" title="4.5.2 잡 리소스 정의"></a>4.5.2 잡 리소스 정의</h4><h4 id="4-5-3-파드-실행한-잡-정의"><a href="#4-5-3-파드-실행한-잡-정의" class="headerlink" title="4.5.3 파드 실행한 잡 정의"></a>4.5.3 파드 실행한 잡 정의</h4><h4 id="4-5-4-잡에서-여러-파드-인스턴스-실행"><a href="#4-5-4-잡에서-여러-파드-인스턴스-실행" class="headerlink" title="4.5.4 잡에서 여러 파드 인스턴스 실행"></a>4.5.4 잡에서 여러 파드 인스턴스 실행</h4><h4 id="4-5-5-잡-파드가-완료되는-시간-제한"><a href="#4-5-5-잡-파드가-완료되는-시간-제한" class="headerlink" title="4.5.5 잡 파드가 완료되는 시간 제한"></a>4.5.5 잡 파드가 완료되는 시간 제한</h4><h3 id="4-6-잡-주기적으로-또는-한번-실행-스케줄링"><a href="#4-6-잡-주기적으로-또는-한번-실행-스케줄링" class="headerlink" title="4.6 잡 주기적으로 또는 한번 실행 스케줄링"></a>4.6 잡 주기적으로 또는 한번 실행 스케줄링</h3><h4 id="4-6-1-크론잡-생성"><a href="#4-6-1-크론잡-생성" class="headerlink" title="4.6.1 크론잡 생성"></a>4.6.1 크론잡 생성</h4><h4 id="4-6-2-스케줄된-잡의-실행-방법-이해"><a href="#4-6-2-스케줄된-잡의-실행-방법-이해" class="headerlink" title="4.6.2 스케줄된 잡의 실행 방법 이해"></a>4.6.2 스케줄된 잡의 실행 방법 이해</h4><h3 id="4-7-요약"><a href="#4-7-요약" class="headerlink" title="4.7 요약"></a>4.7 요약</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;개인이 “쿠버네티스 인 액션” 책을 읽고 학습한 내용으로, &lt;del&gt;주말에 술 마시고 공부한 내용으로…&lt;/del&gt; 틀린 내용이 있을 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;4장-래플리케이션과-컨트롤러-</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>3장 파드 - 쿠버네티스에서 컨테이너 실행</title>
    <link href="https://taeuk-gang.github.io/wiki/k8s_3_pod/"/>
    <id>https://taeuk-gang.github.io/wiki/k8s_3_pod/</id>
    <published>2020-11-08T13:33:18.000Z</published>
    <updated>2022-09-23T10:58:11.387Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>개인이 “쿠버네티스 인 액션” 책을 읽고 학습한 내용으로, 틀린 내용이 있을 수 있습니다.</p></blockquote><h1 id="3장-파드-쿠버네티스에서-컨테이너-실행"><a href="#3장-파드-쿠버네티스에서-컨테이너-실행" class="headerlink" title="3장 파드: 쿠버네티스에서 컨테이너 실행"></a>3장 파드: 쿠버네티스에서 컨테이너 실행</h1><blockquote><p>주요 내용</p><ul><li>파드 생성, 실행, 정지</li><li>파드, 다른 리소스를 라벨로 조직화</li><li>특정 라벨을 가진 모든 파드에서 작업 수행</li><li>네임스페이스로 파드 나누기</li><li>특정 형식을 가진 워커노드에 파드 배치</li></ul></blockquote><h2 id="3-1-파드-소개"><a href="#3-1-파드-소개" class="headerlink" title="3.1 파드 소개"></a>3.1 파드 소개</h2><p>Q: 파드가 뭔가요?</p><p>A: 쿠버네티스의 기본 단위로, <strong>컨테이너를 개별적으로 배포하기보다</strong> 일반적으로 한개의 <strong>컨테이너를 가진 파드를 배포</strong>하여 운영합니다. 특정 상황에서는 두개 이상이 될 수도 있겠지만, 일반적으로 하나의 컨테이너만 포함한 상태로 배포를 합니다.<br>중요한 것은 <strong>항상 하나의 워커 노드에서 실행</strong>이 된다는 것입니다.</p><h3 id="3-1-1-파드-필요-이유"><a href="#3-1-1-파드-필요-이유" class="headerlink" title="3.1.1 파드 필요 이유"></a>3.1.1 파드 필요 이유</h3><p>Q: 왜 파드가 필요한가요?<br>or 컨테이너를 왜 직접 사용하지 않나요?<br>or 왜 일반적으로 여러 컨테이너를 같이 실행하지 않나요?<br>or 모든 프로세스를 단일 컨테이너에 넣으면 안되나요?</p><p>A: 컨테이너는 단일 프로세스를 실행하는 것을 목적으로 설계되었고, 그 이유는 관련 없는 다른 프로세스들 을 모두 집어넣었을 경우, 동일한 표준 출력으로 로그를 기록하기 때문에 <strong>각 로그가 누가 남긴 로그인지 분별하기 힘들다</strong>.</p><blockquote><p>단일 책임 원칙과 비슷한 원리로 이해됨, 상세 이유는 그 뒷장에서 소개됨</p><p>간단히 더 이야기하면, 컨테이너 그룹(파드)를 쪼갤 수록 노드의 파드들을 균형있게 분배할 수 있으며, 한쪽으로 자원이 넘쳐 실행되지 않을 것이다.</p></blockquote><h3 id="3-1-2-파드-이해"><a href="#3-1-2-파드-이해" class="headerlink" title="3.1.2 파드 이해"></a>3.1.2 파드 이해</h3><p>(질문 이어서)</p><p>A: <strong>여러 프로세스를 단일 컨테이너로 묶지 않기 때문에</strong>, 컨테이너를 묶을 단위가 필요하여 나타난게 <strong>파드</strong>이다.</p><p>쿠버네티스는 파드 안에 모든 컨테이너가 네임스페이스가 아닌 동일한 리눅스 네임스페이스를 공유하도록 도커를 설정함</p><p>Q: 설정 내용이 뭐가 있나요?</p><p>A: 파드 내의 컨테이너들은 같은 호스트이름과 네트워크 인터페이스를 공유하고 IPC를 통해 서로 통신합니다.<br>그래서 파드 내 컨테이너는 동일한 IP주소와 포트를 공유합니다.</p><p>Q: 그럼 부분 격리라고 하였는데, 현재 공유되는 내용만 이야기되었는데 격리되는 내용은 무엇인가요?</p><p>A: 기본값으로 파일시스템은 다른 컨테이너와 완전히 분리됩니다. 볼륨에서 설정을 통해야만 파일을 공유할 수 있습니다.</p><p>Q: 파드간 네트워크 IP주소와 포트는 다르다는 이야기로 들리는데, 파드간에는 어떻게 통신하나요?</p><p>A: 파드간 다른 IP주소를 통해 접근을 하지만, 둘 사이에는 NAT(network address translation)이 없어서, LAN간 통신처럼 통신할 수 있습니다. 이것을 플랫 네트워크라고 표현합니다. 이는 소프트웨어 네트워크 계층으로 이루어져있습니다.</p><h3 id="3-1-3-파드와-컨테이너-구성"><a href="#3-1-3-파드와-컨테이너-구성" class="headerlink" title="3.1.3 파드와 컨테이너 구성"></a>3.1.3 파드와 컨테이너 구성</h3><p>Q: 프론트 서버와 백엔드(DB) 컨테이너를 어떻게 구성하면 좋을까요?</p><p>A: 앞에 이야기한 내용에서 일반적으로 한개의 컨테이너당 하나의 파드로 분할하여 실행시키는 것이 좋습니다. 만약 둘이 하나의 파드로 묶여 관리된다면 둘은 항상 같은 노드에서 실행되어야하며, 만약 두개의 노드가 있다면 1개는 유휴 상태가 될 것 입니다.</p><p>A2: 또한 두 컨테이너를 하나의 파드에서 관리하면 안되는 이유로는 스케일링 입니다. 파드가 스케일링의 기본 최소 단위이기 때문에 쿠버네티스는 개별 컨테이너를 수평으로 확장하지 못합니다. 그래서 전체 파드를 수평으로 확장해야합니다. 그런데 프론트와 백엔드는 서로 다른 스케일링 요구사항을 가지고있기 때문에 나누는 것이 좋습니다.</p><p>Q: 그럼에도 불구하고, 예외적으로 하나의 파드에서 여러 컨테이너를 사용해야하는 경우가 있을까요?</p><p>A: 여러 컨테이너를 단일 파드에 넣는 주요 경우는 (주 컨테이너 + 보조 컨테이너들) 을 이루는 경우인데요.</p><p>예를 들어,<br>주 컨테이너 = 웹 서버<br>보조 컨테이너 = 주기적으로 컨텐츠를 웹서버 디렉토리에 저장<br>혹은 로그 수집, 데이터 프로세서, 통신 어댑터 등등</p><p>을 사유로하는 컨테이너들이 함께 실행되야하는 경우입니다.</p><p>그래서 여러 컨테이너를 단일 파드에서 실행해야한다면 다음과 같은 조건을 생각해야합니다.</p><ol><li>컨테이너를 함께 실행시켜야하는가?</li><li>여러 컨테이너가 결국 하나의 구성요소인가?</li><li>컨테이너가 함께 스케일링 되어야하는가?</li></ol><h2 id="3-2-YAML-또는-JSON으로-파드-생성"><a href="#3-2-YAML-또는-JSON으로-파드-생성" class="headerlink" title="3.2 YAML 또는 JSON으로 파드 생성"></a>3.2 YAML 또는 JSON으로 파드 생성</h2><p>Q: YAML으로 작성하면 장점이 무엇이 있나요?</p><p>A: <code>kubectl run</code>으로 간단하게 리소소를 생성 가능하지만, 제한된 속성만 생성할 수 있으며, YAML을 사용할 경우 <strong>버전 관리가 가능</strong>해지는 장점이 있습니다.</p><p>YAML의 작성은 <a href="https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/">해당 링크</a>를 참조하면 됩니다. (하루종일 보고 사는 링크…;;)</p><h3 id="3-2-1-기존-파드-YAML-살펴보기"><a href="#3-2-1-기존-파드-YAML-살펴보기" class="headerlink" title="3.2.1 기존 파드 YAML 살펴보기"></a>3.2.1 기존 파드 YAML 살펴보기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod &lt;파드명&gt; -o yaml</span><br></pre></td></tr></table></figure><p>위의 명령어를 입력하면 YAML 정의를 볼 수 있다.</p><p>막상 보면 너무 긴 내용이 있을텐데, 주요 파트는 3개이다.</p><ul><li>metadata: 이름, 네임스페이스, 라벨, 파드에 관한 정보</li><li>Spec: 파드 컨테이너, 볼륨, 파드 실제 명세 정보</li><li>status: 파드 상태, 각 컨테이너 설명, 상태, 파드 내부IP 등 현재 실행중인 파드 정보<br>파드를 생성할 때는 작성할 필요없는 항목</li></ul><h3 id="3-2-2-파드-정의-YAML-작성"><a href="#3-2-2-파드-정의-YAML-작성" class="headerlink" title="3.2.2 파드 정의 YAML 작성"></a>3.2.2 파드 정의 YAML 작성</h3><p>kubia-manual.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">kubia-menual</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="string">-</span><span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>포트를 지정해둔 것은 단지 정보에 불과, 이를 생략해도 다른 클라이언트에서 포트를 통해 파드에 연결할 수 있는지에 영향 미치지 않음. 0.0.0.0 주소에 열어둔 포트를 통해 접속을 허용시에 파드 스펙과 별개로 항상 해당 파드에 접속이 가능하기 때문</p><p>Q: 그럼 왜 명시하나요?</p><p>A: 포트를 명시적으로 정의하면, 클러스터를 사용하는 모든 사람이 볼 수 있고, 포트에 이름을 지정해 편리하게 사용 가능</p><h3 id="기타-유용한-명령어-kubucetl-explain"><a href="#기타-유용한-명령어-kubucetl-explain" class="headerlink" title="기타: 유용한 명령어 kubucetl explain"></a>기타: 유용한 명령어 <code>kubucetl explain</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pods</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/wtCPd6khueFbqms.png" alt="image-20201108175732508"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod.spec</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/ZGXSAFoVjTndCkJ.png" alt="image-20201108175825146"></p><h3 id="3-2-3-kubectl-create"><a href="#3-2-3-kubectl-create" class="headerlink" title="3.2.3 kubectl create"></a>3.2.3 <code>kubectl create</code></h3><p>음… 리소스를 만들기 전에 현재 어느 네임스페이스에서 만드는지는 확인하는 것이 좋다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k config get-contexts</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">k config view --minify | grep namespace:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/1LTtx5UHuV4Qj8E.png" alt="image-20201108180326200"></p><p>클러스터 c201에서 test2 네임스페이스를 사용하는 것을 확인할 수 있음</p><h4 id="생성"><a href="#생성" class="headerlink" title="생성"></a>생성</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k create -f kubia-manual.yaml -o yaml</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/5umetJ6CElbP1Qq.png" alt="image-20201108180852090"></p><h4 id="생성-확인"><a href="#생성-확인" class="headerlink" title="생성 확인"></a>생성 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k get pods</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/wltGNscUE67zLiJ.png" alt="image-20201108181004010"></p><h3 id="3-2-4-애플리케이션-로그-보기"><a href="#3-2-4-애플리케이션-로그-보기" class="headerlink" title="3.2.4 애플리케이션 로그 보기"></a>3.2.4 애플리케이션 로그 보기</h3><p>컨테이너의 애플리케이션은 보통 로그를 파일에 쓰기보다는 표준 출력과 표준 에러에 로그를 남기는 것이 일반적</p><p>컨테이너 런타임(ex. 도커)는 이러한 스트림을 파일로 전달하고 다음 명령을 통해 로그를 가져옴</p><p>쿠버네티스를 사용하지 않았다면, ssh로 파드가 실행 중인 노드에 접속해 <code>docker logs &lt;컨테이너ID&gt;</code>를 치겠지만,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs kubia-manual</span><br></pre></td></tr></table></figure><p>쿠버네티스는 해당 명령을 제공한다.</p><p><img src="https://i.loli.net/2020/11/08/rdRpCn8H2yiLWvj.png" alt="image-20201108181515961"></p><h4 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h4><p><strong>컨테이너 로그는 하루 단위 또는 로그 파일이 10MB에 도달할 때마다 순환함</strong></p><p><strong>kubectl logs는 마지막으로 순환된 로그만 보여줌</strong></p><p><strong>또한 파드가 삭제되면 로그도 삭제됨</strong></p><p><strong>파드가 삭제되도 로그를 확인하고 싶다면 클러스터 전체의 중앙집중식 로깅을 설정해야함(17장)</strong></p><h4 id="여러-컨테이너를-가진-파드의-로그-확인"><a href="#여러-컨테이너를-가진-파드의-로그-확인" class="headerlink" title="여러 컨테이너를 가진 파드의 로그 확인"></a>여러 컨테이너를 가진 파드의 로그 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl logs &lt;파드명&gt; -c &lt;컨테이너명&gt;</span></span><br><span class="line">kubectl logs kubia-manual -c kubia</span><br></pre></td></tr></table></figure><h3 id="3-2-5-파드에-요청-보내기"><a href="#3-2-5-파드에-요청-보내기" class="headerlink" title="3.2.5 파드에 요청 보내기"></a>3.2.5 파드에 요청 보내기</h3><p>파드의 실제 동작을 보는 방법 (<code>kubectl expose</code>를 사용하지 않고)</p><p>파드에 테스트와 디버깅 목적으로 사용, 포트포워딩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward kubia-manual 8888:8080</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/QW8ic6l4kr13h29.png" alt="image-20201108182156830"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888</span><br></pre></td></tr></table></figure><p><code>curl</code>을 통해 접근이 가능</p><p><img src="https://i.loli.net/2020/11/08/8s5brpld2v1zc6S.png" alt="image-20201108182422839"></p><h2 id="3-3-라벨을-이용한-파드-구성"><a href="#3-3-라벨을-이용한-파드-구성" class="headerlink" title="3.3 라벨을 이용한 파드 구성"></a>3.3 라벨을 이용한 파드 구성</h2><p>실제 애플리케이션들이 배포된 클러스터 내에는 매우 많은 파드들이 존재, 그러므로 파드를 정리하는 매커니즘이 필요</p><h3 id="3-3-1-라벨-소개"><a href="#3-3-1-라벨-소개" class="headerlink" title="3.3.1 라벨 소개"></a>3.3.1 라벨 소개</h3><p>위의 이유로 라벨은 리소스에 키-값으로 첨부할 수 있다. 해당 리소스내에서 고유하다면, 원하는 만큼 추가할 수 있다.</p><p>예를 들면, <code>app=ui</code>, <code>app=as</code>, <code>app=pc</code> 등으로 애플리케이션 라벨을 붙이고, <code>rel=stable</code>, <code>rel=beta</code>, <code>rel=alpha</code>로 버전을 관리할 수 있다.</p><h3 id="3-3-2-파드-생성시-라벨-지정"><a href="#3-3-2-파드-생성시-라벨-지정" class="headerlink" title="3.3.2 파드 생성시 라벨 지정"></a>3.3.2 파드 생성시 라벨 지정</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia-menual</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">rel:</span> <span class="string">beta</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h4 id="파드-라벨-보기"><a href="#파드-라벨-보기" class="headerlink" title="파드 라벨 보기"></a>파드 라벨 보기</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --show-labels</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/Yht1nmSdaj9KA7l.png" alt="image-20201108184538134"></p><h4 id="파드-특정-라벨만-보기"><a href="#파드-특정-라벨만-보기" class="headerlink" title="파드 특정 라벨만 보기"></a>파드 특정 라벨만 보기</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -L app</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/S6RFvwdjXlDCgLW.png" alt="image-20201108184629324"></p><h3 id="3-3-3-기존-파드-라벨-수정"><a href="#3-3-3-기존-파드-라벨-수정" class="headerlink" title="3.3.3 기존 파드 라벨 수정"></a>3.3.3 기존 파드 라벨 수정</h3><h4 id="파드에-새로운-라벨-추가"><a href="#파드에-새로운-라벨-추가" class="headerlink" title="파드에 새로운 라벨 추가"></a>파드에 새로운 라벨 추가</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label po kubia-manual added_label=0</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/phAWVZw8Y2oByFI.png" alt="image-20201108185237231"></p><h4 id="파드에-기존-라벨-수정"><a href="#파드에-기존-라벨-수정" class="headerlink" title="파드에 기존 라벨 수정"></a>파드에 기존 라벨 수정</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label po kubia-manual added_label=1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/LFmABDTg3h2jNqn.png" alt="image-20201108185303697"></p><h2 id="3-4-라벨-셀렉터로-파드-부분-집합-나열"><a href="#3-4-라벨-셀렉터로-파드-부분-집합-나열" class="headerlink" title="3.4 라벨 셀렉터로 파드 부분 집합 나열"></a>3.4 라벨 셀렉터로 파드 부분 집합 나열</h2><p>라벨의 중요성은 라벨 셀렉터를 함께 사용할때 알 수 있음</p><p>예를 들어,</p><ul><li>특정 키를 포함하거나 포함하지않는 라벨의 리소스</li><li>특정 키와 값을 가진 라벨의 리소스</li><li>특정 키를 가지고있지만, 다른 값을 라벨의 리소스</li></ul><h3 id="3-4-1-라벨-셀렉터로-파드-나열"><a href="#3-4-1-라벨-셀렉터로-파드-나열" class="headerlink" title="3.4.1 라벨 셀렉터로 파드 나열"></a>3.4.1 라벨 셀렉터로 파드 나열</h3><h4 id="특정-키와-값-라벨-셀렉터-조건"><a href="#특정-키와-값-라벨-셀렉터-조건" class="headerlink" title="특정 키와 값 라벨 셀렉터 조건"></a>특정 키와 값 라벨 셀렉터 조건</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -l app=<span class="built_in">test</span> -L app</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/08/2Yd5CRl4ZVqO163.png" alt="image-20201108185938590"></p><h4 id="값은-상관하지않는-라벨-셀렉터-조건"><a href="#값은-상관하지않는-라벨-셀렉터-조건" class="headerlink" title="값은 상관하지않는 라벨 셀렉터 조건"></a>값은 상관하지않는 라벨 셀렉터 조건</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -l app -L app</span><br></pre></td></tr></table></figure><h4 id="값을-가지고있지-않는-라벨-셀렉터-조건"><a href="#값을-가지고있지-않는-라벨-셀렉터-조건" class="headerlink" title="값을 가지고있지 않는 라벨 셀렉터 조건"></a>값을 가지고있지 않는 라벨 셀렉터 조건</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -l <span class="string">&#x27;!app&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="값이-아닌-라벨-셀렉터-조건"><a href="#값이-아닌-라벨-셀렉터-조건" class="headerlink" title="값이 아닌 라벨 셀렉터 조건"></a>값이 아닌 라벨 셀렉터 조건</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -l app!=<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="값이-A-또는-B-인-조건"><a href="#값이-A-또는-B-인-조건" class="headerlink" title="값이 A 또는 B 인 조건"></a>값이 A 또는 B 인 조건</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -l env <span class="keyword">in</span> (<span class="built_in">test</span>, rel)</span><br></pre></td></tr></table></figure><h4 id="값이-둘다-아닌-것"><a href="#값이-둘다-아닌-것" class="headerlink" title="값이 둘다 아닌 것"></a>값이 둘다 아닌 것</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -l env notin (<span class="built_in">test</span>, rel)</span><br></pre></td></tr></table></figure><h3 id="3-4-2-라벨-셀렉터에서-조건-사용"><a href="#3-4-2-라벨-셀렉터에서-조건-사용" class="headerlink" title="3.4.2 라벨 셀렉터에서 조건 사용"></a>3.4.2 라벨 셀렉터에서 조건 사용</h3><p>책에 자세한 내용 X</p><blockquote><p><a href="https://kubernetes.io/ko/docs/concepts/overview/working-with-objects/labels/">해당 링크</a> 참조</p></blockquote><h2 id="3-5-라벨-셀렉터로-파드-스케줄링"><a href="#3-5-라벨-셀렉터로-파드-스케줄링" class="headerlink" title="3.5 라벨 셀렉터로 파드 스케줄링"></a>3.5 라벨 셀렉터로 파드 스케줄링</h2><p>쿠버네티스는 기본적으로 무작위로 워커 노드에 스케줄링한다. 모든 노드를 하나의 대규모 배포 플랫폼으로 생각하고 어떤 노드에 스케줄링은 중요하지 않기 때문이다.</p><p>그러나, 하드웨어 인프라가 동일하지 않은 상황일 경우, ex- 워커 노드 중 일부는 ssd, 다른 일부는 hdd, 거나 GPU 가속 제한 등은 특정 파드를 스케줄링 해주어야 할 것이다.</p><p>정확한 노드를 지정하는 대신, 노드의 필요 요구사항을 기술하고 만족하는 노드를 선택하도록 한다.<br>이를 노드 라벨과 라벨 셀렉터를 통해 할 수 있다.</p><h3 id="3-5-1-워커-노드-분류에-라벨-사용"><a href="#3-5-1-워커-노드-분류에-라벨-사용" class="headerlink" title="3.5.1 워커 노드 분류에 라벨 사용"></a>3.5.1 워커 노드 분류에 라벨 사용</h3><p>라벨은 모든 리소스에 적용 가능</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label node &lt;노드명&gt; gpu=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-특정-노드에-파드-스케줄링"><a href="#3-5-2-특정-노드에-파드-스케줄링" class="headerlink" title="3.5.2 특정 노드에 파드 스케줄링"></a>3.5.2 특정 노드에 파드 스케줄링</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia-gpu</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">gpu:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubia</span></span><br></pre></td></tr></table></figure><p>spec.nodeSelector를 사용하여 파드 스케줄링</p><h3 id="3-5-3-하나의-특정-노드로-스케줄링"><a href="#3-5-3-하나의-특정-노드로-스케줄링" class="headerlink" title="3.5.3 하나의 특정 노드로 스케줄링"></a>3.5.3 하나의 특정 노드로 스케줄링</h3><p>각 노드에는 <code>kubernetes.io/hostname=&lt;호트트네임&gt;</code>으로 고유 라벨이 존재하기 때문에 특정 하나의 노드로 스케줄링이 가능하다.</p><p>그러나, 해당 노드가 오프라인일 경우, 스케줄링이 되지 않을 수 있다.</p><h2 id="3-6-파드에-어노테이션-달기"><a href="#3-6-파드에-어노테이션-달기" class="headerlink" title="3.6 파드에 어노테이션 달기"></a>3.6 파드에 어노테이션 달기</h2><p>어노테이션 또한 라벨처럼 모든 리로스에 추가할 수 있다. 그러나 차이점으로, 식별 정보를 가지고 있지 않다.(셀렉터가 없음)</p><p>그러면 어디다 쓰지? 라벨보다 많은 정보를 가질 수 있다. (256kb까지 허용) </p><p>주로 쿠버네티스의 새기능이 추가하기 전에 어노테이션에서 시험적으로 적용되고, 이후 결정되면 필드로 도입된다.</p><p>유용하게 사용되는 경우는 오브젝트를 만든 사람을 어노테이션으로 지정해두면, 협업자들이 더 쉽게 알 수 있다.</p><h3 id="3-6-1-오브젝트-어노테이션-조회"><a href="#3-6-1-오브젝트-어노테이션-조회" class="headerlink" title="3.6.1 오브젝트 어노테이션 조회"></a>3.6.1 오브젝트 어노테이션 조회</h3><p><code>k describe</code> or <code>k get po -o json</code> 으로 조회</p><h3 id="3-6-2-어노테이션-추가-및-수정"><a href="#3-6-2-어노테이션-추가-및-수정" class="headerlink" title="3.6.2 어노테이션 추가 및 수정"></a>3.6.2 어노테이션 추가 및 수정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl annotate pod kubia-manual company.com/annotation=<span class="string">&quot;test data&quot;</span></span><br></pre></td></tr></table></figure><p>어노테이션의 경우 <code>--overwrite</code>없이 덮어쓰기 때문에 위의 형식처럼 입력된다.</p><h2 id="3-7-네임스페이스로-리소스-그룹화"><a href="#3-7-네임스페이스로-리소스-그룹화" class="headerlink" title="3.7 네임스페이스로 리소스 그룹화"></a>3.7 네임스페이스로 리소스 그룹화</h2><p><strong>쿠버네티스 네임스페이스</strong>는 프로세스를 격리하는데 사용하는 <strong>리눅스 네임스페이스</strong>와는 다르다.</p><p>오브젝트 그룹이 서로 겹칠 수 있기 때문에 한번에 하나의 그룹에서만 작업하고 싶을 때 사용</p><h3 id="3-7-1-네임스페이스-필요성"><a href="#3-7-1-네임스페이스-필요성" class="headerlink" title="3.7.1 네임스페이스 필요성"></a>3.7.1 네임스페이스 필요성</h3><p>여러 네임스페이스를 사용하면, 멀티테넌트 환경처럼 리소스를 분리하는데 사용된다. (다른 네임스페이스 간에는 동일한 리소스명을 가질 수 있다)</p><p>예를 들어, 프로덕션, 개발, QA 환경 등으로 나누어 사용할 수 있다.</p><p>또한 네임스페이스는 리소스를 격리하는 것외에도 특정 사용자가 지정된 리소스에만 접근할 수 있도록 하고, 컴퓨팅 리소스르 ㄹ제한하는데도 사용된다.</p><h3 id="3-7-2-네임스페이스-조회"><a href="#3-7-2-네임스페이스-조회" class="headerlink" title="3.7.2 네임스페이스 조회"></a>3.7.2 네임스페이스 조회</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 네임스페이스 목록 조회</span></span><br><span class="line">kubectl get ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 특정 네임스페이스에 속한 파드 목록 조회</span></span><br><span class="line">kubectl get po -n kube-system</span><br></pre></td></tr></table></figure><h3 id="3-7-3-네임스페이스-생성"><a href="#3-7-3-네임스페이스-생성" class="headerlink" title="3.7.3 네임스페이스 생성"></a>3.7.3 네임스페이스 생성</h3><h4 id="Yaml로-생성"><a href="#Yaml로-생성" class="headerlink" title="Yaml로 생성"></a>Yaml로 생성</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">custom-ns</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k create -f create-ns.yaml</span><br></pre></td></tr></table></figure><h4 id="명령어로-생성"><a href="#명령어로-생성" class="headerlink" title="명령어로 생성"></a>명령어로 생성</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns custom-ns</span><br></pre></td></tr></table></figure><p>대부분의 오브젝트는 RFC1035 규칙 - 문자, 숫자, 대시, 점을 표현할 수 있지만, 네임스페이스의 경우 점(.)을 포함하지 못한다.</p><h3 id="3-7-4-다른-네임스페이스-오브젝트-관리"><a href="#3-7-4-다른-네임스페이스-오브젝트-관리" class="headerlink" title="3.7.4 다른 네임스페이스 오브젝트 관리"></a>3.7.4 다른 네임스페이스 오브젝트 관리</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f &lt;YAML파일명&gt;.yaml -n &lt;파드를 생성할 네임스페이스명&gt;</span><br></pre></td></tr></table></figure><h4 id="현재-네임스페이스-빠르게-변경하는-alias"><a href="#현재-네임스페이스-빠르게-변경하는-alias" class="headerlink" title="현재 네임스페이스 빠르게 변경하는 alias"></a>현재 네임스페이스 빠르게 변경하는 alias</h4><p><code>~/.bashrc</code>에 추가</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> kcd=<span class="string">&#x27;kubectl config set-context $(kubectl config current-context) --namespace &#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-5-네임스페이스-격리-이해"><a href="#3-7-5-네임스페이스-격리-이해" class="headerlink" title="3.7.5 네임스페이스 격리 이해"></a>3.7.5 네임스페이스 격리 이해</h3><p>네임스페이스를 사용하면 오브젝트를 별도 그룹으로 분리해 작업할 수 있게 하지만, 실행 중인 오브젝트에 대한 격리는 제공하지 않는다.</p><p>예를 들어, 다른 사용자들이 서로 다른 네임스페이스에 파드를 배포할 때 해당 파드가 서로 격리되어 통신할 수 없는 것이 반드시 이루어지지는 않는다. 해당 쿠버네티스 네트워킹 솔루션에 따라 다르다.</p><h2 id="3-8-파드-중지-제거"><a href="#3-8-파드-중지-제거" class="headerlink" title="3.8 파드 중지 제거"></a>3.8 파드 중지 제거</h2><h3 id="3-8-1-이름으로-파드-삭제"><a href="#3-8-1-이름으로-파드-삭제" class="headerlink" title="3.8.1 이름으로 파드 삭제"></a>3.8.1 이름으로 파드 삭제</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl delete po &lt;삭제할 파드명&gt;</span></span><br><span class="line">kubectl delete po kubia-gpu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 여러개 제거시</span></span><br><span class="line">kubectl delete po pod1 pod2</span><br></pre></td></tr></table></figure><p>파드를 삭제하면, 해당 파드 안에 있는 모든 컨테이너를 종료하도록 지시한다. 과정은 아래와 같다.</p><ol><li>쿠버네티스는 프로세스에 SIGTERM 신호를 보냄 (기본값 30초 동안 기다림)</li><li>종료되지 않으면 SIGKILL 신호를 통해 종료 (정상 종료는 SIGTERM)</li></ol><h3 id="3-8-2-라벨-셀렉터로-파드-삭제"><a href="#3-8-2-라벨-셀렉터로-파드-삭제" class="headerlink" title="3.8.2 라벨 셀렉터로 파드 삭제"></a>3.8.2 라벨 셀렉터로 파드 삭제</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete po -l rel=beta</span><br></pre></td></tr></table></figure><p>해당 라벨에 관련된 파드가 제거됨</p><h3 id="3-8-3-네임스페이스로-파드-제거"><a href="#3-8-3-네임스페이스로-파드-제거" class="headerlink" title="3.8.3 네임스페이스로 파드 제거"></a>3.8.3 네임스페이스로 파드 제거</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete ns custom-ns</span><br></pre></td></tr></table></figure><p>네임스페이스 전체를 삭제하고, 해당 내에 파드는 자동으로 삭제된다.</p><h3 id="3-8-4-네임스페이스-유지하면서-안에-모든-파드-삭제"><a href="#3-8-4-네임스페이스-유지하면서-안에-모든-파드-삭제" class="headerlink" title="3.8.4 네임스페이스 유지하면서 안에 모든 파드 삭제"></a>3.8.4 네임스페이스 유지하면서 안에 모든 파드 삭제</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete po --all</span><br></pre></td></tr></table></figure><p>현재 네임스페이스 내의 모든 파드를 제거</p><blockquote><p>만약 파드를 삭제하더라도 계속 생성이 된다면, 레플리케이션컨트롤러가 계속 재생성하는 것으로 레플리케이션컨트롤러를 삭제해야한다.</p></blockquote><h3 id="3-8-5-네임스페이스-모든-리소스-삭제"><a href="#3-8-5-네임스페이스-모든-리소스-삭제" class="headerlink" title="3.8.5 네임스페이스 모든 리소스 삭제"></a>3.8.5 네임스페이스 모든 리소스 삭제</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete all --all</span><br></pre></td></tr></table></figure><p>현재 네임스페이스에 모든 리소스 제거 명령</p><h2 id="3-9-요약"><a href="#3-9-요약" class="headerlink" title="3.9 요약"></a>3.9 요약</h2><p>다 읽고 할 수 있어야 하는 것들</p><ul><li>특정 컨테이너를 파드로 묶어야 하는지 결정</li><li>파드로 여러 프로세스를 실행</li><li>YAML 또는 JSON으로 파드 작성, 정의, 상태 확인</li><li>라벨과 라벨 셀렉터로 파드를 그룹화하고 한번에 여러 파드를 작업</li><li>노드 라벨과 셀렉터로 특정 노드에 파드를 스케줄링</li><li>어노테이션을 이용하여 더 큰 데이터 파드에 달기</li><li>네임스페이스로 팀들 간 동일한 클러스터를 각자 작업</li><li>Kubectl explain 명령으로 리소스 정보를 찾기</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;개인이 “쿠버네티스 인 액션” 책을 읽고 학습한 내용으로, 틀린 내용이 있을 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3장-파드-쿠버네티스에서-컨테이너-실행&quot;&gt;&lt;a href=&quot;#3장-파드-쿠버네티스에서-</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://taeuk-gang.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>일일 커밋 알람 어플</title>
    <link href="https://taeuk-gang.github.io/wiki/DailyCommit/"/>
    <id>https://taeuk-gang.github.io/wiki/DailyCommit/</id>
    <published>2020-11-01T13:22:05.000Z</published>
    <updated>2022-09-23T10:58:11.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="일일-커밋-알림-어플"><a href="#일일-커밋-알림-어플" class="headerlink" title="일일 커밋 알림 어플"></a>일일 커밋 알림 어플</h1><h2 id="기획-키워드"><a href="#기획-키워드" class="headerlink" title="기획 키워드"></a>기획 키워드</h2><ul><li>타겟: 일일 커밋을 목표로 하는 개발자 = 승민이와 나, 개발자의 자기관리</li><li>오늘 커밋이 없으면, 1시간(옵션 조절 가능)마다 알림 메세지 발송</li><li>위젯 넣어서, 하루 커밋 개수 확인</li></ul><h2 id="개발-키워드"><a href="#개발-키워드" class="headerlink" title="개발 키워드"></a>개발 키워드</h2><ul><li>리액트 네이티브</li></ul><h2 id="레이아웃"><a href="#레이아웃" class="headerlink" title="레이아웃"></a>레이아웃</h2><p><a href="https://xd.adobe.com/view/95d7530f-77a4-496a-638a-c9f49a13014a-e3e6/">https://xd.adobe.com/view/95d7530f-77a4-496a-638a-c9f49a13014a-e3e6/</a></p><p><img src="https://i.loli.net/2020/10/22/dEr2MVx7iCquyL4.png" alt="image-20201022061001705"></p><h2 id="expo-gt-react-native-cli-로-넘어가기"><a href="#expo-gt-react-native-cli-로-넘어가기" class="headerlink" title="expo -&gt; react-native-cli 로 넘어가기"></a>expo -&gt; react-native-cli 로 넘어가기</h2><p><code>expo</code> 를 사용하면, 네이티브 라이브러리 사용에 제한이 되는 것을 알 수 있었음</p><p><a href="https://reactnative.dev/docs/0.60/getting-started">https://reactnative.dev/docs/0.60/getting-started</a> 여길 참고하여 셋팅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init daily-github --template react-native-template-typescript</span><br><span class="line"></span><br><span class="line">npx react-native run-ios</span><br><span class="line"></span><br><span class="line">npx react-native run-android</span><br></pre></td></tr></table></figure><h2 id="typescript-template-사용할-때-버그-발생"><a href="#typescript-template-사용할-때-버그-발생" class="headerlink" title="typescript template 사용할 때 버그 발생"></a>typescript template 사용할 때 버그 발생</h2><p><a href="https://github.com/react-native-community/react-native-template-typescript">공식 깃허브</a> 에도 있는 known issue이고,</p><p><a href="https://kimck.tistory.com/entry/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8CReact-Native-TypeScript-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%97%90%EB%9F%AC">같은 버그가 발생한 사람</a> 이 있어서, 이 글을 참고하여 해결</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g react-native-cli</span><br><span class="line"></span><br><span class="line">yarn global add @react-native-community/cli</span><br><span class="line"></span><br><span class="line">npx react-native init MyApp --template react-native-template-typescript</span><br></pre></td></tr></table></figure><p>그리고 MyApp처럼 카멜케이스로 입력해야함 <code>-</code> 가 들어가면 에러가 뜸</p><p>해당 에러</p><p><img src="https://i.loli.net/2020/10/22/VKJnSxg2FyGz3iR.png" alt="image-20201023005651603"></p><p>정상 설치시 뜨는 화면</p><p><img src="https://i.loli.net/2020/10/22/cCWZXs29bl5pwrP.png" alt="image-20201023005733123"></p><p>Fast Debug 및 시뮬레이터 둘다 뜨는 것 확인</p><p><img src="https://i.loli.net/2020/10/23/8dOPGC2MWDJYm4f.png" alt="image-20201023010127345"></p><h2 id="eslint-auto-fix"><a href="#eslint-auto-fix" class="headerlink" title="eslint auto fix"></a>eslint auto fix</h2><p>workspace setting.json에 설정</p><p>[해당링크](<a href="https://www.digitalocean.com/community/tutorials/linting-and-formatting-with-eslint-in-vs-">https://www.digitalocean.com/community/tutorials/linting-and-formatting-with-eslint-in-vs-</a> code) 참조</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.codeActionsOnSave&quot;: &#123;</span><br><span class="line">  &quot;source.fixAll.eslint&quot;: true</span><br><span class="line">&#125;,</span><br><span class="line">&quot;eslint.validate&quot;: [&quot;javascript&quot;]</span><br></pre></td></tr></table></figure><h2 id="백그라운드-이미지-삽입-스플래시"><a href="#백그라운드-이미지-삽입-스플래시" class="headerlink" title="백그라운드 이미지 삽입 (스플래시)"></a>백그라운드 이미지 삽입 (스플래시)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;ImageBackground&#125; from &#39;react-native&#39;;</span><br><span class="line"></span><br><span class="line">const image &#x3D; require(&#39;.&#x2F;assets&#x2F;img&#x2F;logo-og.png&#39;);</span><br><span class="line"></span><br><span class="line">&lt;ImageBackground source&#x3D;&#123;image&#125; style&#x3D;&#123;styles.image&#125;&gt;</span><br><span class="line">  &lt;Text style&#x3D;&#123;styles.text&#125;&gt;백그라운드 이미지&lt;&#x2F;Text&gt;</span><br><span class="line">&lt;&#x2F;ImageBackground&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/10/23/JgV6KYhyeNQx2dT.png" alt="image-20201023021115627"></p><p>resizemode가 제대로 적용이 안됬는데..?</p><p>아니… react-native 공식 다큐먼트가 잘못 작성함</p><p>style에 들어가는 것이 아닌, prop에 들어가야 적용이 됨.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageBackground resizeMode&#x3D;&quot;contain&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="React-native-firebase-환경설정"><a href="#React-native-firebase-환경설정" class="headerlink" title="React-native-firebase 환경설정"></a>React-native-firebase 환경설정</h2><p><a href="https://rnfirebase.io/">https://rnfirebase.io/</a> 참고</p><p>흐음… 어째 코르도바랑 하는 일은 똑같네</p><h2 id="Mac-안드로이드-에뮬레이터에서-인터넷이-안될때"><a href="#Mac-안드로이드-에뮬레이터에서-인터넷이-안될때" class="headerlink" title="Mac 안드로이드 에뮬레이터에서 인터넷이 안될때"></a>Mac 안드로이드 에뮬레이터에서 인터넷이 안될때</h2><p><img src="https://i.loli.net/2020/10/23/5Bn1x8e4zikOGbJ.png" alt="image-20201023033028119"></p><h2 id="ios-google-service-json-추가-방법"><a href="#ios-google-service-json-추가-방법" class="headerlink" title="ios google-service.json 추가 방법"></a>ios google-service.json 추가 방법</h2><p>폴더에 넣는 것만으로는 절대! 안되며, 이런 형식으로 프로젝트에 추가해줘야함</p><p><img src="https://i.loli.net/2020/10/23/RsHJri1mzt7PADZ.png" alt="image-20201023041210230"></p><h2 id="React-native-firebaseui-설치"><a href="#React-native-firebaseui-설치" class="headerlink" title="React-native-firebaseui 설치"></a><del>React-native-firebaseui 설치</del></h2><p> <del>깃허브 로그인(oauth) 만들기 목적</del></p><ul><li><del>설치</del></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yarn add @react-native-firebase/app</span><br><span class="line"></span><br><span class="line">yarn add @react-native-firebase/auth</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ios/ &amp;&amp; pod install</span><br><span class="line"></span><br><span class="line">npm install react-native-firebaseui --save</span><br><span class="line"></span><br><span class="line">react-native link react-native-firebaseui</span><br></pre></td></tr></table></figure><ul><li><del>podfile 설정</del></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;SDWebImage&#39;, &#39;~&gt; 4.0&#39;</span><br></pre></td></tr></table></figure><p>auth에 관한 것이 아니었음</p><h2 id="React-native-firebaseui-auth-사용"><a href="#React-native-firebaseui-auth-사용" class="headerlink" title="React-native-firebaseui-auth 사용"></a><del>React-native-firebaseui-auth 사용</del></h2><p><del><a href="https://github.com/oijusti/react-native-firebaseui-auth">https://github.com/oijusti/react-native-firebaseui-auth</a>  이걸 사용해보기로함</del></p><h3 id="멀티인덱스-에러-이슈"><a href="#멀티인덱스-에러-이슈" class="headerlink" title="멀티인덱스 에러 이슈"></a><del>멀티인덱스 에러 이슈</del></h3><ul><li><del><a href="https://stackoverflow.com/questions/50199565/react-native-build-error-while-merging-dex-archives">https://stackoverflow.com/questions/50199565/react-native-build-error-while-merging-dex-archives</a> 참고하여 해결</del></li></ul><p>안됨 =&gt; expo에서 깃허브로 로그인을 구현한 사례가 있어서 이동</p><hr><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><del>GitHub</del></h2><p><del><a href="https://blog.expo.io/firebase-github-authentication-with-react-native-2543e32697b4">https://blog.expo.io/firebase-github-authentication-with-react-native-2543e32697b4</a></del></p><p><del>여기를 참고하여, 따라가보기</del></p><p>expo-auth-session이 독립되면서 많이 바뀐 듯함</p><p><a href="https://docs.expo.io/guides/authentication/#github">공식 docs</a> 여기를 참고하는 것이 좋아보임</p><h2 id="Authorization-callback-URL-amp-Redirect-URL"><a href="#Authorization-callback-URL-amp-Redirect-URL" class="headerlink" title="Authorization callback URL &amp; Redirect URL"></a>Authorization callback URL &amp; Redirect URL</h2><p>development모드에서는 exp:// 을 사용하고, 배포시에는 scheme://를 사용</p><h3 id="dev"><a href="#dev" class="headerlink" title="dev"></a>dev</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp:&#x2F;&#x2F;127.0.0.1:19000&#x2F;--&#x2F;expo-auth-session</span><br></pre></td></tr></table></figure><h3 id="prod"><a href="#prod" class="headerlink" title="prod"></a>prod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comdailycommit:&#x2F;&#x2F;redirect</span><br></pre></td></tr></table></figure><h2 id="accessToken-얻기"><a href="#accessToken-얻기" class="headerlink" title="accessToken 얻기"></a>accessToken 얻기</h2><p><a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/">https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/</a></p><p>accessToken 발급 확인 완료</p><h2 id="라우터-구현"><a href="#라우터-구현" class="headerlink" title="라우터 구현"></a>라우터 구현</h2><p><a href="https://docs.expo.io/guides/routing-and-navigation/">https://docs.expo.io/guides/routing-and-navigation/</a> - 공식 docs의 예제가 오래된 것인지 작동하지 않는다.</p><p><a href="https://wordbe.tistory.com/entry/React-Native-5-React-Navigation-%EC%84%A4%EC%A0%95">~~https://wordbe.tistory.com/entry/React-Native-5-React-Navigation-%EC%84%A4%EC%A0%95</a>~~</p><p><del>음. 이걸 따라해보지 뭐…</del>  deprecated된 패키지</p><p><a href="https://reactnavigation.org/docs/getting-started">공식 문서</a> 를 참고하여 따라해봄</p><p><a href="https://snack.expo.io/?platform=android&name=Hello%20React%20Navigation%20%7C%20React%20Navigation&dependencies=@react-native-community/masked-view@%5E0.1.7,@react-navigation/bottom-tabs@%5E5.8.0,@react-navigation/drawer@%5E5.9.0,@react-navigation/material-bottom-tabs@%5E5.2.16,@react-navigation/material-top-tabs@%5E5.2.16,@react-navigation/native@%5E5.7.3,@react-navigation/stack@%5E5.9.0,react-native-paper@%5E4.0.1,react-native-reanimated@%5E1.7.0,react-native-safe-area-context@%5E3.0.2,react-native-screens@%5E2.9.0,react-native-tab-view@%5E2.15.1&sourceUrl=https://reactnavigation.org/examples/5.x/new-screen.js">참고 예제</a> 따라하면 될 듯</p><h2 id="react-native-folder-structure"><a href="#react-native-folder-structure" class="headerlink" title="react-native folder structure"></a>react-native folder structure</h2><p><img src="https://i.loli.net/2020/10/27/6W8j7zVoIChpZiK.png" alt="image-20201027191721516"></p><p><a href="https://github.com/pcofilada/simple-react-native-starter">https://github.com/pcofilada/simple-react-native-starter</a></p><h2 id="Header-제거"><a href="#Header-제거" class="headerlink" title="Header 제거"></a>Header 제거</h2><p><img src="https://i.loli.net/2020/10/27/BRkx9vblatnZADU.png" alt="image-20201027193122335"></p><p><a href="https://reactnavigation.org/docs/stack-navigator/#headershown">https://reactnavigation.org/docs/stack-navigator/#headershown</a> 여기 참고</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Stack.Navigator initialRouteName&#x3D;&quot;Home&quot; headerMode&#x3D;&quot;none&quot;&gt;</span><br></pre></td></tr></table></figure><p>headerMode 설정과 관련이 있음</p><h2 id="React-native-http통신-useEffect"><a href="#React-native-http통신-useEffect" class="headerlink" title="React-native http통신 + useEffect"></a>React-native http통신 + useEffect</h2><p><a href="https://ko.reactjs.org/docs/hooks-effect.html">https://ko.reactjs.org/docs/hooks-effect.html</a></p><p><a href="https://loy124.tistory.com/238">https://loy124.tistory.com/238</a></p><h2 id="Redux-Typescript"><a href="#Redux-Typescript" class="headerlink" title="Redux + Typescript"></a>Redux + Typescript</h2><p>뭐쓰지? redux? mobx? redux가 함수형에 가까우므로, 오랜만에 사용해보자</p><h3 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h3><ul><li><p><a href="https://www.digitalocean.com/community/tutorials/react-react-native-redux">https://www.digitalocean.com/community/tutorials/react-react-native-redux</a></p></li><li><p><a href="https://chaewonkong.github.io/posts/react-native-redux.html">https://chaewonkong.github.io/posts/react-native-redux.html</a> </p></li><li><p><a href="https://react.vlpt.us/using-typescript/05-ts-redux.html#">https://react.vlpt.us/using-typescript/05-ts-redux.html#</a></p></li></ul><h2 id="Redux는-선택사항-이라는-글을-읽고…"><a href="#Redux는-선택사항-이라는-글을-읽고…" class="headerlink" title="Redux는 선택사항 이라는 글을 읽고…"></a>Redux는 선택사항 이라는 글을 읽고…</h2><p><code>useState</code>를 사용하면서, redux의 필요성에 관해 의문이 들어 자료 조사</p><p><a href="https://delivan.dev/react/stop-asking-if-react-hooks-replace-redux-kr/">https://delivan.dev/react/stop-asking-if-react-hooks-replace-redux-kr/</a></p><h2 id="Redux-Action-axios"><a href="#Redux-Action-axios" class="headerlink" title="Redux Action + axios"></a>Redux Action + axios</h2><p><a href="https://velog.io/@secho/React-13-%EB%A6%AC%EB%8D%95%EC%8A%A4-Axios%EB%A1%9C-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0">https://velog.io/@secho/React-13-%EB%A6%AC%EB%8D%95%EC%8A%A4-Axios%EB%A1%9C-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0</a></p><p><code>createAsyncAction</code> : <a href="https://github.com/piotrwitek/typesafe-actions#createasyncaction">https://github.com/piotrwitek/typesafe-actions#createasyncaction</a></p><p>흠… 앱의 규모에 맞지않게 기술 스택이 너무 깊어지는데? 학습 목적이라고 생각을 해야하나…</p><p>기존의 간단한 코드로 가능한 사항들이 복잡도가 올라가고 있어서 불편</p><h2 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h2><p><a href="https://medium.com/duckuism/react-native-%EB%94%94%EB%B2%84%EA%B9%85-%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0-7e46bfe89f6">https://medium.com/duckuism/react-native-%EB%94%94%EB%B2%84%EA%B9%85-%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0-7e46bfe89f6</a></p><p>아래 링크로 접속해야함</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rndebugger:&#x2F;&#x2F;set-debugger-loc?host&#x3D;localhost&amp;port&#x3D;19001</span><br></pre></td></tr></table></figure><h2 id="Router-Hook"><a href="#Router-Hook" class="headerlink" title="Router Hook"></a>Router Hook</h2><p><a href="https://reactrouter.com/web/api/Hooks">https://reactrouter.com/web/api/Hooks</a></p><h2 id="비율"><a href="#비율" class="headerlink" title="비율"></a>비율</h2><p>전체 높이: 100%</p><ol><li>헤더 10%</li><li>오늘 커밋 15%</li><li>첫 커밋 내용 10%</li><li>전체 커밋 현황 25%</li><li>셋팅 30% </li><li>로그아웃 10%</li></ol><h2 id="오늘-커밋-개수-구하기"><a href="#오늘-커밋-개수-구하기" class="headerlink" title="오늘 커밋 개수 구하기"></a>오늘 커밋 개수 구하기</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;&#123;owner&#125;&#x2F;&#123;repo&#125;&#x2F;stats&#x2F;commit_activity</span><br></pre></td></tr></table></figure><p>owner, repo 필요함</p><ul><li>owner: 이미 access_token으로 가지고있음 + organzation 도 포함해야할듯<ul><li>organization List의 경우, 하나하나 사용자가 클릭해서 허락해줘야하는 번거로움이 있어 퍼블릭 올거니제이션만 포함</li></ul></li><li>repo: repo list에서 반복 돌려야할듯</li></ul><h3 id="owner"><a href="#owner" class="headerlink" title=":owner"></a>:owner</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.github.com&#x2F;users&#x2F;taeuk-gang&#x2F;orgs</span><br></pre></td></tr></table></figure><p><code>+</code> login(유저 고유아이디)</p><h3 id="repo"><a href="#repo" class="headerlink" title=":repo"></a>:repo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.github.com&#x2F;user&#x2F;repos</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.github.com&#x2F;orgs&#x2F;:org&#x2F;repos</span><br></pre></td></tr></table></figure><h2 id="commit-history"><a href="#commit-history" class="headerlink" title="commit history"></a>commit history</h2><p>개인 레포</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;user&#x2F;repos</span><br></pre></td></tr></table></figure><p>올거니제이션 레포</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;repos&#x2F;&#123;owner&#125;&#x2F;&#123;repo&#125;&#x2F;commits</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;일일-커밋-알림-어플&quot;&gt;&lt;a href=&quot;#일일-커밋-알림-어플&quot; class=&quot;headerlink&quot; title=&quot;일일 커밋 알림 어플&quot;&gt;&lt;/a&gt;일일 커밋 알림 어플&lt;/h1&gt;&lt;h2 id=&quot;기획-키워드&quot;&gt;&lt;a href=&quot;#기획-키워드&quot; cla</summary>
      
    
    
    
    <category term="Projects" scheme="https://taeuk-gang.github.io/categories/Projects/"/>
    
    <category term="Daily-Commit App" scheme="https://taeuk-gang.github.io/categories/Projects/Daily-Commit-App/"/>
    
    
    <category term="Projects" scheme="https://taeuk-gang.github.io/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 12장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start_12/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start_12/</id>
    <published>2020-10-18T15:00:00.000Z</published>
    <updated>2022-09-23T10:58:11.386Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p></blockquote><h1 id="12장-비동기-처리"><a href="#12장-비동기-처리" class="headerlink" title="12장 비동기 처리"></a>12장 비동기 처리</h1><h2 id="📝395p-브라우저-Promise-지원-현황"><a href="#📝395p-브라우저-Promise-지원-현황" class="headerlink" title="📝395p. 브라우저 Promise 지원 현황"></a>📝395p. 브라우저 Promise 지원 현황</h2><p>IE 지원 안함</p><p>Chrome 57 이상</p><p>Safari 10 이상</p><p>Android Browser 53 이상</p><p>IOS safari 10.2 이상</p><h2 id="📝SetTimeout-3번째-인자"><a href="#📝SetTimeout-3번째-인자" class="headerlink" title="📝SetTimeout 3번째 인자"></a>📝SetTimeout 3번째 인자</h2><p><a href="https://developer.mozilla.org/ko/docs/Web/API/WindowTimers/setTimeout">https://developer.mozilla.org/ko/docs/Web/API/WindowTimers/setTimeout</a></p><p><img src="https://i.loli.net/2020/10/19/8xwAXZgfmGTuL5h.png" alt="image-20201020004247332"></p><p><code>param ~ paramN</code> : 타이머 완료 이후, 추가적으로 전달되는 파라미터</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseAsync = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sec = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">isTrue: <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isTrue) &#123;</span><br><span class="line">      resolve(sec);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, sec * <span class="number">1000</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res + <span class="string">`s`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-all-결과값"><a href="#Promise-all-결과값" class="headerlink" title="Promise.all([]) 결과값"></a>Promise.all([]) 결과값</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncDelay</span>(<span class="params">order: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> ms = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`작업 완료: `</span> + order);</span><br><span class="line">            resolve(order);</span><br><span class="line">        &#125;, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncResultPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p1 = asyncDelay(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> p2 = asyncDelay(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> p3 = asyncDelay(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">const</span> p4 = asyncDelay(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.all([p1, p2, p3, p4]).then(<span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`동기화된 출력: <span class="subst">$&#123;order&#125;</span>`</span>);</span><br><span class="line">    &#125;);<span class="comment">// LOG: 동기화된 출력: 1,2,3,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">syncResultPromise();</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/10/19/nQ1J5lgir3dueyA.png" alt="image-20201020005554668"></p><p>[p1, p2, p3, p4]의 결과값을 한번에 결과값으로 제공해주는 것을 알 수 있음 </p><h2 id="📝404p-RxJS"><a href="#📝404p-RxJS" class="headerlink" title="📝404p. RxJS"></a>📝404p. RxJS</h2><blockquote><p>RxJS에 관한 책이 아니기 때문에, 간단하게 설명하고 넘어간 듯 하다.</p><p>간단하게만 정리</p></blockquote><p>반응형 프로그래밍 모델은 스트림 형태의 입력 이벤트를 감지해 반응을 처리할 수 있는 모델</p><p>입력된 데이터 스트림은 관측할 수 있고 다랄 수 있는 대상이 되므로 observables이 됨</p><p><strong>발행 구독 패턴</strong></p><p>옵저버 &lt;-&gt; 옵저버블</p><p>-&gt; 구독</p><p>&lt;- 통지</p><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @reactivex/rxjs</span><br></pre></td></tr></table></figure><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Rx <span class="keyword">from</span> <span class="string">&#x27;@reactivex/rxjs&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="데이터-스트림의-형태"><a href="#데이터-스트림의-형태" class="headerlink" title="데이터 스트림의 형태"></a>데이터 스트림의 형태</h3><p>유형1: 규칙이 있고, 제한범위가 있는 경우</p><p>유형2: 규칙이 있고, 제한 범위가 없는</p><p>유형3: 규칙이 없고, 제한 범위가 있는</p><p>유형4: 규칙이 없고, 제한 범위가 없는</p><h3 id="비동기-코드-제어의-방식-차이"><a href="#비동기-코드-제어의-방식-차이" class="headerlink" title="비동기 코드 제어의 방식 차이"></a>비동기 코드 제어의 방식 차이</h3><p><code>promise</code>와 다르게 오퍼레이터 메서드를 이용하여 연쇄적으로 처리할 수 있게 관련 인터페이스를 제공</p><ol><li><p>생성 연산자</p></li><li><p>변형 연산자</p></li><li><p>콤비네이션 연산자</p></li><li><p>조건 연산자</p></li><li><p>필터링 연산자</p></li></ol><blockquote><p>자세한 사항은 RxJs에 관한 문서가 아니기 때문에 생략</p><p>추후, 별도 문서에서 공식 도큐먼트 참고하여 작성하기로…</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;12장-비동기-처리&quot;&gt;&lt;a href=&quot;#12장-비동기-처리&quot; c</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 11장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start_11/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start_11/</id>
    <published>2020-10-17T15:00:00.000Z</published>
    <updated>2022-09-23T10:58:11.386Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p></blockquote><h1 id="11장-제네릭"><a href="#11장-제네릭" class="headerlink" title="11장 제네릭"></a>11장 제네릭</h1><h2 id="📝361p-제네릭-소개"><a href="#📝361p-제네릭-소개" class="headerlink" title="📝361p 제네릭 소개"></a>📝361p 제네릭 소개</h2><p>제네릭(generics)은 클래스와 함수에 <strong>타입이 고정되는 것을 방지</strong>하고 <strong>재사용할 수 있는 요소를 선언</strong>할 수 있게 하는 것</p><p>기존 C#, JAVA에서 제공되었던 기능, 타입스크립트는 0.9부터 지원</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ol><li>컴파일 시간에 진행해 타입 안정성을 보장</li><li>타입 캐스팅과 관련된 코드를 제거 가능</li><li>재사용이 가능한 코드 작성 가능</li></ol><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayConcat</span>&lt;<span class="title">T</span>&gt;(<span class="params">array1: T[], array2: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...array1, ...array2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resultConcat = arrayConcat&lt;<span class="built_in">number</span>&gt;(array1, array2);</span><br></pre></td></tr></table></figure><p><code>&lt;T&gt;</code>  가상의 타입(= 타입 매개변수(<code>type parameter</code>) = 제네릭 타입 변수(<code>generic type variables</code>))으로 임의의 단어를 사용해도 된다.</p><h3 id="예제-타입-캐스팅과-관련-코드-제거"><a href="#예제-타입-캐스팅과-관련-코드-제거" class="headerlink" title="예제. 타입 캐스팅과 관련 코드 제거"></a>예제. 타입 캐스팅과 관련 코드 제거</h3><blockquote><p>음… 결국 문자열만 받아서, 캐스팅 코드를 없애거나, 숫자를 받아서 캐스팅 코드를 이후 처리하는거나 조삼모사 아닌가?</p><p>그럼 본질적으로 타입 캐스팅과 관련된 코드를 제거할 수 없는 것이 아닌가?</p></blockquote><p>이전</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">String</span>(str) + <span class="built_in">String</span>(str2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">concat(<span class="string">`abc`</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>이후</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>&lt;<span class="title">T</span>&gt;(<span class="params">str1: T, str2: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str1 + str2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">concat&lt;<span class="built_in">string</span>&gt;(<span class="string">`abc`</span>, <span class="built_in">String</span>(<span class="number">123</span>));<span class="comment">// 음 결국? 캐스팅 코드가 필요해져버림</span></span><br></pre></td></tr></table></figure><h2 id="📝366p-타입-매개변수-T를-특정-타입으로-제한해야할-경우"><a href="#📝366p-타입-매개변수-T를-특정-타입으로-제한해야할-경우" class="headerlink" title="📝366p. 타입 매개변수 T를 특정 타입으로 제한해야할 경우"></a>📝366p. 타입 매개변수 T를 특정 타입으로 제한해야할 경우</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;T extends string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">string</span>&gt;(<span class="params">str1: T, str2: T</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str1 + str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝367p-오버로드시의-제네릭"><a href="#📝367p-오버로드시의-제네릭" class="headerlink" title="📝367p. 오버로드시의 제네릭"></a>📝367p. 오버로드시의 제네릭</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>&lt;<span class="title">T</span>&gt;(<span class="params">str1: T, str2: T</span>): <span class="title">T</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">str1: <span class="built_in">any</span>, str2: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str1 + str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝369p-타입-매개변수-2개-이상-선언법"><a href="#📝369p-타입-매개변수-2개-이상-선언법" class="headerlink" title="📝369p. 타입 매개변수 2개 이상 선언법"></a>📝369p. 타입 매개변수 2개 이상 선언법</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapArray = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">put</span>&lt;<span class="title">T</span>, <span class="title">T2</span>&gt;(<span class="params">str1: T, str2: T2</span>): <span class="title">T</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params">idx: <span class="built_in">any</span>, str: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  mapArray[idx] = str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>&lt;<span class="title">T</span>, <span class="title">T2</span>&gt;(<span class="params">idx: T</span>): <span class="title">T2</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">idx: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mapArray[idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">put&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">`hello`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(get&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="📝371p-Generic-class"><a href="#📝371p-Generic-class" class="headerlink" title="📝371p. Generic class"></a>📝371p. Generic class</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 클래스명&lt;T&gt; &#123;</span><br><span class="line">  메소드(param: <span class="built_in">Array</span>&lt;T&gt;, param2: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> param[param2];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> 인스턴스명 = <span class="keyword">new</span> 클래스명&lt;<span class="built_in">number</span>&gt;(파라미터);</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IName &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Profile <span class="keyword">implements</span> IName &#123;</span><br><span class="line">  name: <span class="built_in">string</span> = <span class="string">`taeuk`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Accessor&lt;T <span class="keyword">extends</span> IName&gt; &#123;</span><br><span class="line">  getKey(obj: T) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> acc = <span class="keyword">new</span> Accessor();</span><br><span class="line"><span class="built_in">console</span>.log(acc.getKey(<span class="keyword">new</span> Profile()));<span class="comment">// LOG: taeuk</span></span><br></pre></td></tr></table></figure><h2 id="📝377p-룩업-타입-lookup"><a href="#📝377p-룩업-타입-lookup" class="headerlink" title="📝377p. 룩업 타입(lookup)"></a>📝377p. 룩업 타입(lookup)</h2><p><code>keyof</code> 키워드로 키값을 탐색하여, 유니언 타입처럼 작동시킴</p><p>아래의 예제를 보면, 인터페이스의 키값만을 허용하는 유니언 방식처럼 작동됨을 알 수 있음</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> INumber &#123;</span><br><span class="line">  one: <span class="built_in">number</span>;</span><br><span class="line">  two: <span class="built_in">number</span>;</span><br><span class="line">  three: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NumberKeys = keyof INumber;<span class="comment">// one, two, three, 인터페이스 키값만을 허용</span></span><br></pre></td></tr></table></figure><h3 id="활용-예제"><a href="#활용-예제" class="headerlink" title="활용 예제"></a>활용 예제</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> numbersKeys = &#123;</span><br><span class="line">  one: <span class="number">1</span>,</span><br><span class="line">  two: <span class="number">2</span>,</span><br><span class="line">  three: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getValue(numbersKeys, <span class="string">`one`</span>));<span class="comment">// LOG: 1</span></span><br></pre></td></tr></table></figure><h2 id="📝379p-인터페이스-상속과-동시에-제네릭-확장"><a href="#📝379p-인터페이스-상속과-동시에-제네릭-확장" class="headerlink" title="📝379p. 인터페이스 상속과 동시에 제네릭 확장"></a>📝379p. 인터페이스 상속과 동시에 제네릭 확장</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IFilter&lt;T&gt; &#123;</span><br><span class="line">  unique(array: <span class="built_in">Array</span>&lt;T&gt;): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Filter&lt;T&gt; <span class="keyword">implements</span> IFilter&lt;T&gt; &#123;</span><br><span class="line">  unique(array: <span class="built_in">Array</span>&lt;T&gt;): <span class="built_in">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function">(<span class="params">v, i, array</span>) =&gt;</span> array.indexOf(v) === i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myFilter = <span class="keyword">new</span> Filter&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="keyword">let</span> resultFilter = myFilter.unique([<span class="string">`a`</span>, <span class="string">`b`</span>, <span class="string">`c`</span>, <span class="string">`a`</span>, <span class="string">`b`</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(resultFilter);<span class="comment">// LOG: [`a`, `b`, `c`]</span></span><br></pre></td></tr></table></figure><h2 id="📝381p-맵-객체-소개"><a href="#📝381p-맵-객체-소개" class="headerlink" title="📝381p. 맵 객체 소개"></a>📝381p. 맵 객체 소개</h2><p>생략</p><h2 id="📝384p-제네릭-기반의-자료구조-작성"><a href="#📝384p-제네릭-기반의-자료구조-작성" class="headerlink" title="📝384p. 제네릭 기반의 자료구조 작성"></a>📝384p. 제네릭 기반의 자료구조 작성</h2><p>스택, 큐, ArrayList같은 자료구조는 내장 객체로 지원되지 않아서 직접 구현을 필요로 하는데, 이 때 제네릭을 사용하는 것이 좋음</p><p>이 중 책에서는 ArrayList를 구현하는 것을 설명</p><p>자료구조를 학습하는 것이 목적이 아니기 때문에 생략</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;11장-제네릭&quot;&gt;&lt;a href=&quot;#11장-제네릭&quot; class=&quot;</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 10장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start_10/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start_10/</id>
    <published>2020-10-14T11:39:05.000Z</published>
    <updated>2022-09-23T10:58:11.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p></blockquote><h1 id="10장-타입-선언과-변경-타입-호환"><a href="#10장-타입-선언과-변경-타입-호환" class="headerlink" title="10장 타입 선언과 변경, 타입 호환"></a>10장 타입 선언과 변경, 타입 호환</h1><h2 id="📝342p-타입-캐스팅과-타입-변환의-차이"><a href="#📝342p-타입-캐스팅과-타입-변환의-차이" class="headerlink" title="📝342p. 타입 캐스팅과 타입 변환의 차이"></a>📝342p. 타입 캐스팅과 타입 변환의 차이</h2><p>명시적인 것의 차이</p><p>타입 캐스팅(type casting): 명시적으로 선언한 캐스팅 코드에 의한 타입 변경</p><p>타입 변환(type conversion): JS 인터프리터에 의한 타입 변경</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type casting</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">string</span>;</span><br><span class="line">b = <span class="built_in">String</span>(a); <span class="comment">// 명시적인 타입 캐스팅</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type conversion</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);<span class="comment">// string</span></span><br><span class="line">b = a;<span class="comment">// 자동 타입 변환</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);<span class="comment">// number</span></span><br></pre></td></tr></table></figure><h2 id="📝343p-타입-캐스팅-type-casting-과-타입-어설션-type-assertion-차이"><a href="#📝343p-타입-캐스팅-type-casting-과-타입-어설션-type-assertion-차이" class="headerlink" title="📝343p. 타입 캐스팅(type casting)과 타입 어설션(type assertion) 차이"></a>📝343p. 타입 캐스팅(type casting)과 타입 어설션(type assertion) 차이</h2><p>컴파일 이후의 유지 여부</p><p>타입 캐스팅의 경우: 컴파일 이후, 코드 유지</p><p>타입 어설션의 경우: 컴파일 과정까지만 유효, 컴파일 이후 제거</p><h2 id="📝344p-타입-어셜선-선언-방법"><a href="#📝344p-타입-어셜선-선언-방법" class="headerlink" title="📝344p. 타입 어셜선 선언 방법"></a>📝344p. 타입 어셜선 선언 방법</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방법 1</span></span><br><span class="line"><span class="keyword">let</span> num4: <span class="built_in">number</span> = &lt;<span class="built_in">number</span>&gt;myNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방법 2</span></span><br><span class="line"><span class="keyword">let</span> num5: <span class="built_in">number</span> = myNum <span class="keyword">as</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><p>방법1 (꺾쇠 방식)의 경우는 JSX 문법과 유사해 충돌 위험이 존재하여, <code>as</code>를 쓰는 것을 권장</p><h2 id="📝346p-프로그래밍-언어마다의-타입-검사-방식과-타입스크립트의-타이핑-방식"><a href="#📝346p-프로그래밍-언어마다의-타입-검사-방식과-타입스크립트의-타이핑-방식" class="headerlink" title="📝346p. 프로그래밍 언어마다의 타입 검사 방식과 타입스크립트의 타이핑 방식"></a>📝346p. 프로그래밍 언어마다의 타입 검사 방식과 타입스크립트의 타이핑 방식</h2><ol><li>동적 타입 검사(dynamic type checking): Javascript의 duck typing - 런타임 시점</li><li>정적 타입 검사(static type chcking): C++, Java - 컴파일 시점</li></ol><p>타입 스크립트의 경우는 두개 모두 지원</p><h3 id="타입스크립트의-4가지-타입-지정-방식"><a href="#타입스크립트의-4가지-타입-지정-방식" class="headerlink" title="타입스크립트의 4가지 타입 지정 방식"></a>타입스크립트의 4가지 타입 지정 방식</h3><blockquote><p>아래와 같은 방법의 이름은 몰라도 개발하면서 자연스럽게 사용해야한다.</p></blockquote><ol><li>덕 타이핑(Duck typing)</li><li>구조 타이핑(structural typing)</li><li>구조 서브타이핑(structural subtyping)</li><li>명목 타이핑(nominal typing)</li></ol><h3 id="덕-타이핑"><a href="#덕-타이핑" class="headerlink" title="덕 타이핑"></a>덕 타이핑</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DuckGoose &#123;</span><br><span class="line">  speak();</span><br><span class="line">  swim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Duck &#123;</span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`꽥`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  swim() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`수영 중...`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Goose &#123;</span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`구우`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  swim() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`거위 수영 중...`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swim</span>(<span class="params">obj: DuckGoose</span>) </span>&#123;</span><br><span class="line">  obj.speak();</span><br><span class="line">  obj.swim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> Duck();</span><br><span class="line"><span class="keyword">let</span> goose = <span class="keyword">new</span> Goose();</span><br><span class="line"></span><br><span class="line">swim(duck);</span><br><span class="line">swim(goose);</span><br></pre></td></tr></table></figure><p>자바스크립트 런타임시 동적으로 타이핑이 이뤄지는 타입 지정 방식</p><p>같은 메서드를 호출하는 것을 볼 수 있음, 선언되지 않은 메소드의 경우 에러 발생</p><h3 id="구조-타이핑"><a href="#구조-타이핑" class="headerlink" title="구조 타이핑"></a>구조 타이핑</h3><h4 id="1-구조가-같은-클래스의-경우"><a href="#1-구조가-같은-클래스의-경우" class="headerlink" title="1. 구조가 같은 클래스의 경우"></a>1. 구조가 같은 클래스의 경우</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, weight: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bird &#123;</span><br><span class="line">  name: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">speed: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal: Animal = <span class="keyword">new</span> Animal(<span class="string">`happy`</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">let</span> bird: Bird = <span class="keyword">new</span> Bird(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타입 호환 가능</span></span><br><span class="line">animal = bird;</span><br><span class="line">bird = animal;</span><br></pre></td></tr></table></figure><p>타입스크립트 컴파일 시간에 타입 호환이 가능한지를 검사</p><p>클래스의 멤버 변수가 같으므로 서로 타입 호환이 가능</p><p>생성자 매개변수는 상관없음, 접근 제한자가 설정되있지 않기 때문에 생성자 내부에서만 사용할 수 있기 때문<br>(생성자 매개변수 기본값 <code>private</code>)</p><h4 id="2-상속-관계를-고려한-구조가-같은-클래스의-경우"><a href="#2-상속-관계를-고려한-구조가-같은-클래스의-경우" class="headerlink" title="2. 상속 관계를 고려한 구조가 같은 클래스의 경우"></a>2. 상속 관계를 고려한 구조가 같은 클래스의 경우</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Member <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> grade: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Admin <span class="keyword">extends</span> Member &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MemberCard &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> grade: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin: Admin = <span class="keyword">new</span> Admin();</span><br><span class="line">admin = <span class="keyword">new</span> MemberCard(); <span class="comment">// 타입 호환이 가능</span></span><br></pre></td></tr></table></figure><p>admin과 MemberCard는 아무런 관계가 없지만, 완전히 동일하지는 않지만 같은 구조의 멤버 변수를 소유하고 있으나 타입 호환이 가능</p><h4 id="3-구조가-같은-클래스와-인터페이스-간의-구조-타이핑"><a href="#3-구조가-같은-클래스와-인터페이스-간의-구조-타이핑" class="headerlink" title="3. 구조가 같은 클래스와 인터페이스 간의 구조 타이핑"></a>3. 구조가 같은 클래스와 인터페이스 간의 구조 타이핑</h4><p>클래스와 인터페이스의 구조 같으면 타입 호환이 가능</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person: Person;</span><br><span class="line">person = <span class="keyword">new</span> Employee();<span class="comment">// 타입 호환이 가능</span></span><br></pre></td></tr></table></figure><h3 id="구조-서브타이핑"><a href="#구조-서브타이핑" class="headerlink" title="구조 서브타이핑"></a>구조 서브타이핑</h3><p>타입 구조가 같아야지만 타입 호환이 이뤄지지만, 구조 서브타이핑은 구조가 부분적으로 같더라도 타입 호환을 지원</p><h4 id="구조-서브타이핑의-조건"><a href="#구조-서브타이핑의-조건" class="headerlink" title="구조 서브타이핑의 조건"></a>구조 서브타이핑의 조건</h4><p>하위 타입이 상위 타입으로만 호환</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 상위 타입</span></span><br><span class="line"><span class="keyword">interface</span> TypeA &#123;</span><br><span class="line">  a: <span class="built_in">string</span>;</span><br><span class="line">  b: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 하위 타입</span></span><br><span class="line"><span class="keyword">interface</span> TypeB &#123;</span><br><span class="line">  a: <span class="built_in">string</span>;</span><br><span class="line">  b: <span class="built_in">string</span>;</span><br><span class="line">  c: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-타입이-없지만-구조가-일부-같은-변수-간의-구조-서브타이핑"><a href="#1-타입이-없지만-구조가-일부-같은-변수-간의-구조-서브타이핑" class="headerlink" title="1. 타입이 없지만 구조가 일부 같은 변수 간의 구조 서브타이핑"></a>1. 타입이 없지만 구조가 일부 같은 변수 간의 구조 서브타이핑</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> infoUpper = &#123;</span><br><span class="line">  name: <span class="string">&quot;taeuk&quot;</span>,</span><br><span class="line">  country: <span class="string">&quot;korea&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> infoSub = &#123;</span><br><span class="line">  name: <span class="string">&quot;taeuk&quot;</span>,</span><br><span class="line">  country: <span class="string">&quot;korea&quot;</span>,</span><br><span class="line">  status: <span class="string">&quot;happy&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">infoUpper = infoSub;</span><br></pre></td></tr></table></figure><h4 id="2-매개변수-개수가-다른-함수-타입간의-구조-서브타이핑"><a href="#2-매개변수-개수가-다른-함수-타입간의-구조-서브타이핑" class="headerlink" title="2. 매개변수 개수가 다른 함수 타입간의 구조 서브타이핑"></a>2. 매개변수 개수가 다른 함수 타입간의 구조 서브타이핑</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> funcUpper = <span class="function">(<span class="params">a: <span class="built_in">string</span></span>) =&gt;</span> a;</span><br><span class="line"><span class="keyword">let</span> funcSub = (a: <span class="built_in">string</span>, b: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line">funcSub = funcUpper;<span class="comment">// 하위 타입 = 상위 타입</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(funcSub(<span class="string">`hello`</span>, <span class="string">`world`</span>));</span><br></pre></td></tr></table></figure><h4 id="3-구조가-일부-같은-객체와-인터페이스-간의-구조-서브타이핑"><a href="#3-구조가-일부-같은-객체와-인터페이스-간의-구조-서브타이핑" class="headerlink" title="3. 구조가 일부 같은 객체와 인터페이스 간의 구조 서브타이핑"></a>3. 구조가 일부 같은 객체와 인터페이스 간의 구조 서브타이핑</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GroupUpper &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> groupSub = &#123;</span><br><span class="line">  name: <span class="string">`Typescrript Group`</span>,</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> groupUpper: GroupUpper;</span><br><span class="line">groupUpper = groupSub;</span><br></pre></td></tr></table></figure><h3 id="명목-타이핑"><a href="#명목-타이핑" class="headerlink" title="명목 타이핑"></a>명목 타이핑</h3><p>명시적으로 지정된 타입 간에만 타입이 호환</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> EastAsia1 &#123;</span><br><span class="line">  korea = <span class="number">88</span>,</span><br><span class="line">  china = <span class="number">86</span>,</span><br><span class="line">  japan = <span class="number">81</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> EastAsia2 &#123;</span><br><span class="line">  korea = <span class="number">88</span>,</span><br><span class="line">  china = <span class="number">86</span>,</span><br><span class="line">  japan = <span class="number">81</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> east1: EastAsia1 = EastAsia1.china;</span><br><span class="line"><span class="keyword">let</span> ease2: EastAsia2 = EastAsia2.korea;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 구조적으로는 같지만, 아래의 코드는 작동하지 않음</span></span><br><span class="line"><span class="comment">// let east1: EastAsia1 = EastAsia2.china;</span></span><br><span class="line"><span class="comment">// let east2: EastAsia2 = EastAsia1.korea;</span></span><br><span class="line"></span><br><span class="line">east1 = <span class="number">1000</span>;</span><br><span class="line">east2 = <span class="number">2000</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;10장-타입-선언과-변경-타입-호환&quot;&gt;&lt;a href=&quot;#10장-</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 9장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-9%EC%9E%A5/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-9%EC%9E%A5/</id>
    <published>2020-04-12T09:39:05.000Z</published>
    <updated>2022-09-23T10:58:11.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p></blockquote><h1 id="9장-고급-타입"><a href="#9장-고급-타입" class="headerlink" title="9장 고급 타입"></a>9장 고급 타입</h1><h2 id="📝315p-유니언-타입"><a href="#📝315p-유니언-타입" class="headerlink" title="📝315p. 유니언 타입"></a>📝315p. 유니언 타입</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><h2 id="📝317p-타입-가드"><a href="#📝317p-타입-가드" class="headerlink" title="📝317p. 타입 가드"></a>📝317p. 타입 가드</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span>, y: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">`string`</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.indexOf(y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myIndexOf(<span class="string">`hello`</span>, <span class="string">`e`</span>))</span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">x: Cat | Dog</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">       ... </span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝320p-고급-타입들"><a href="#📝320p-고급-타입들" class="headerlink" title="📝320p. 고급 타입들"></a>📝320p. 고급 타입들</h2><h3 id="문자열-리터럴-타입"><a href="#문자열-리터럴-타입" class="headerlink" title="문자열 리터럴 타입"></a>문자열 리터럴 타입</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event; <span class="string">&#x27;keyup&#x27;</span> = <span class="string">&#x27;keyup&#x27;</span>;<span class="comment">// O</span></span><br><span class="line"><span class="keyword">let</span> event: <span class="string">&#x27;keyup&#x27;</span> = <span class="string">&#x27;keyup2&#x27;</span>;<span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EventType = <span class="string">&#x27;keyup&#x27;</span> | <span class="string">&#x27;mouseover&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> myEvent: EventType = <span class="string">&#x27;keyup&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="룩업-타입-인덱스-타입"><a href="#룩업-타입-인덱스-타입" class="headerlink" title="룩업 타입 (= 인덱스 타입)"></a>룩업 타입 (= 인덱스 타입)</h3><p><code>keyof</code> 명령어를 통해 타입 T의 하위 타입을 생성, 타입 T는 여러 타입으로 이뤄진 유니언이나 인터페이스 타입을 의미</p><p>확장성을 고려해 <code>interface</code>를 도입</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Profile &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    gender: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 인터페이스를 <code>keyof</code>를 활용하여 룩업 타입으로 선언</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// # 1</span></span><br><span class="line"><span class="comment">// 이렇게 선언된 변수는 name , gener, age 중 하나를 할당 받기 가능</span></span><br><span class="line"><span class="keyword">type</span> Profile1 = keyof Profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue: Profile1 = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 2</span></span><br><span class="line"><span class="comment">// 배열 타입의 내장 속성인, length, push, pop, concat 등을 할당받아 사용 가능</span></span><br><span class="line"><span class="keyword">type</span> Profile2 = keyof Profile[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue2: Profile2 = <span class="string">&#x27;length&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> pValue3: Profile2 = <span class="string">&#x27;push&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 3</span></span><br><span class="line"><span class="comment">// ??? 이해 안되는 부분</span></span><br><span class="line"><span class="comment">// 어느 문자열이든 입력 가능한건가?</span></span><br><span class="line"><span class="keyword">type</span> Profile3: keyof &#123; [x: <span class="built_in">string</span>]: Profile &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue4: Profile3 = <span class="string">`hello`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 4</span></span><br><span class="line"><span class="comment">// name의 string 타입을 전달, 타입이 string일 때 접근 가능한 내장 속성 이용 가능</span></span><br><span class="line"><span class="keyword">type</span> Profile4 = keyof Profile[<span class="string">`name`</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue5: Profile4 = <span class="string">`length`</span>;</span><br><span class="line"><span class="keyword">let</span> pValue6: Profile4 = <span class="string">`abcd`</span>;<span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="non-nullable-타입"><a href="#non-nullable-타입" class="headerlink" title="non-nullable 타입"></a>non-nullable 타입</h3><p>타입스크립트 2.0 이전에는 <code>null</code> 이나 <code>undefined</code>는 모든 타입의 변수에 할당할 수 있었음</p><p>그러나, <code>tsconfig.json</code>에 <code>strictNullCheck</code>을 true로 바꾸면, <code>null</code>과 <code>undefined</code>가 자동으로 모든 타입의 할당되지 않고 별도로 타입으올 관리해줘야함.</p><h3 id="never-타입"><a href="#never-타입" class="headerlink" title="never 타입"></a>never 타입</h3><p><code>never</code>는 모든 타입의 하위 타입으로 사용할 수 있지만, <code>any</code>만 할당될 수 없다.</p><p><strong>사용용도</strong></p><ol><li>함수에 닿을 수 없는 코드 영역이 있어 반환값이 존재하지 않을 때</li><li>함수에 <code>throw</code>객체가 반환되어, 오류가 발생할 때</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> neverFunc = (): <span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(); &lt;- 닿을 수 없음</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> resultNever: <span class="built_in">never</span> = neverFunc();</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-타입"><a href="#this-타입" class="headerlink" title="this 타입"></a>this 타입</h3><p><code>this</code> 타입을 다형적 this 타입이라고도 함, 선언 위치에 따라 참조하는 대상이 달라지기 때문</p><h4 id="인터페이스에-this-사용-예시"><a href="#인터페이스에-this-사용-예시" class="headerlink" title="인터페이스에  this 사용 예시"></a>인터페이스에  <code>this</code> 사용 예시</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ListItem &#123;</span><br><span class="line">    getHead(): <span class="built_in">this</span>;</span><br><span class="line">    getTail(): <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="플루언트-인터페이스-패턴-플루언트-패턴"><a href="#플루언트-인터페이스-패턴-플루언트-패턴" class="headerlink" title="플루언트 인터페이스 패턴 (플루언트 패턴)"></a>플루언트 인터페이스 패턴 (플루언트 패턴)</h4><p>그냥 자기자신 반환해서 체이닝하는 패턴</p><blockquote><p>개인적으로 이런 형식으로 많이 사용했었음</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Mycalc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        val: <span class="number">0</span>,</span><br><span class="line">        plus(num) &#123;</span><br><span class="line">            <span class="built_in">this</span>.val += num;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        minus(num) &#123;</span><br><span class="line">            <span class="built_in">this</span>.val -= num;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mycalc().plus(<span class="number">3</span>).minus(<span class="number">2</span>).val<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;9장-고급-타입&quot;&gt;&lt;a href=&quot;#9장-고급-타입&quot; class</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 8장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-8%EC%9E%A5/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-8%EC%9E%A5/</id>
    <published>2020-04-12T04:39:05.000Z</published>
    <updated>2022-09-23T10:58:11.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p></blockquote><h1 id="8장-모듈"><a href="#8장-모듈" class="headerlink" title="8장 모듈"></a>8장 모듈</h1><h2 id="📝253p-모듈-필요성"><a href="#📝253p-모듈-필요성" class="headerlink" title="📝253p. 모듈 필요성"></a>📝253p. 모듈 필요성</h2><ol><li>유지보수</li><li>전역 스코프 오염 방지</li><li>재사용성</li></ol><h3 id="모듈러-프로그래밍-기반-과정"><a href="#모듈러-프로그래밍-기반-과정" class="headerlink" title="모듈러 프로그래밍 기반 과정"></a>모듈러 프로그래밍 기반 과정</h3><ol><li>모듈 식별</li><li>모듈 분리 선언</li><li>외부 공개</li></ol><h2 id="📝254p-내부-모듈-외부-모듈-차이"><a href="#📝254p-내부-모듈-외부-모듈-차이" class="headerlink" title="📝254p. 내부 모듈, 외부 모듈 차이"></a>📝254p. 내부 모듈, 외부 모듈 차이</h2><p>타입스크립트 1.5부터 <code>Namespce</code>라는 특징과 ES6 모듈 특지이 추가 ECMAScript 표준 용어집에 2가지 형태의 모듈 구분</p><ol><li>내부 모듈 - <code>namespace</code></li><li>외부 모듈 - <code>export</code></li></ol><p>내부모듈, <code>namespace</code>란 여러 파일에 걸쳐 하나의 이름을 공유, <code>reference</code>를 통해 참조</p><p>외부모듈은 파일마다 이름 공간이 정해짐, <code>import</code>를 통해 참조</p><p>그러므로, <code>namespace</code>는 프로젝트와 분리해 라이브러리 단위의 모듈을 구성할 때 좋음</p><blockquote><p><code>@types</code> 폴더에서 구분하여 타입선언 등 을 하는 듯 하다</p></blockquote><h2 id="📝259p-Namespace"><a href="#📝259p-Namespace" class="headerlink" title="📝259p. Namespace"></a>📝259p. Namespace</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Hello &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="namespace-module"><a href="#namespace-module" class="headerlink" title="namespace = module"></a>namespace = module</h3><p>키워드는 다르지만, 역할과 기능상 차이가 없습니다</p><h4 id="키워드-중복-이유"><a href="#키워드-중복-이유" class="headerlink" title="키워드 중복 이유"></a>키워드 중복 이유</h4><p>ES2015에서 <code>namespace</code> 용어가 표준으로 채택되면서, 원래 Typescript 1.5에서 사용하던 <code>module</code> 용어가 자연스럽게 Deprecated됨</p><blockquote><p>그런데, Typescript 타입 만드는 example code를 보면 아직은 module이라는 용어가 많이 쓰이는 듯 하다</p><p><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/chart.js/index.d.ts">참고링크 - chart.js</a></p><p><a href="https://www.slideshare.net/gloridea/dts-74589285">여기</a>는 왜 <code>module</code>과 <code>namespace</code>를 동시에 사용한걸까? </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// namespace 사용 예시</span></span><br><span class="line"><span class="keyword">namespace</span> Hello &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// module 사용 예시</span></span><br><span class="line"><span class="keyword">module</span> Hello &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 변환 결과</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hello;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>: <span class="title">Hello</span>) </span>&#123;</span><br><span class="line">    funtion print() &#123;&#125;</span><br><span class="line">&#125;(Hello || (Hello = &#123;&#125;));<span class="comment">// 모듈이 있으면 전달, 없으면 초기화 = 느슨한 확장 loose argument</span></span><br></pre></td></tr></table></figure><h2 id="📝261p-한-파일에-여러-네임스페이스-선언"><a href="#📝261p-한-파일에-여러-네임스페이스-선언" class="headerlink" title="📝261p. 한 파일에 여러 네임스페이스 선언"></a>📝261p. 한 파일에 여러 네임스페이스 선언</h2><p>네임스페이스마다 구분이 필요하게 되므로, <code>export</code> 선언 필요</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MyInfo1 &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">`name1`</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyInfo2.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">namespace</span> MyInfo2 &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">`name2`</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyInfo1.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">console</span>.log(MyInfo1.getName());</span><br><span class="line"><span class="built_in">console</span>.log(MyInfo2.getName());</span><br></pre></td></tr></table></figure><p>변환시 <code>var</code>로 변환되어 호이스팅 특성때문에 순서와 상관없이 서로 호출 가능</p><h2 id="📝263p-★-네임스페이스-여러-파일에-선언"><a href="#📝263p-★-네임스페이스-여러-파일에-선언" class="headerlink" title="📝263p. ★ 네임스페이스 여러 파일에 선언"></a>📝263p. ★ 네임스페이스 여러 파일에 선언</h2><p>프로젝트 규모 커지면, 파일 단위로 모듈을 분할</p><p><code>tsc</code> 명령시, 타입스크립트 컴파일러가 자동으로 네임스페이스간 참조 관계를 고려함</p><p>그러나, 개별 파일을 컴파일시에는 <code>///&lt;reference path=&quot;to/path&quot; /&gt;</code>가 필요함</p><p>파일 상단의 표시하면 됨</p><p>그러나, 사실 <code>tsc</code> 명령어로도 같이</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ts-node car2.ts <span class="comment"># undefined, undefined 출력</span></span><br><span class="line"></span><br><span class="line">tsc --out out.js car2.ts <span class="comment"># 합쳐 컴파일 필요</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>ts-node car2.ts</th><th>tsc -out out.js car2.ts</th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200413001659451.png" alt="image-20200413001659451"></td><td><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200413001720503.png" alt="image-20200413001720503"></td></tr></tbody></table><p>컴파일 후에도, 결과를 명시적으로 표시되게 하려면, 네임스페이스를 모듈로 선언하고 <code>import</code>를 선언 필요</p><p>(다음장에서 설명됨)</p><h2 id="📝268p-네임스페이스-모듈"><a href="#📝268p-네임스페이스-모듈" class="headerlink" title="📝268p. 네임스페이스 모듈"></a>📝268p. 네임스페이스 모듈</h2><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// car1.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Car &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">let</span> auto: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> ICar &#123;</span><br><span class="line">        name: <span class="built_in">string</span>;</span><br><span class="line">        vendor: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ns <span class="keyword">from</span> <span class="string">&#x27;./car1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// namespace를 한번 더 선언해서 사용? 이유가 있나?</span></span><br><span class="line"><span class="keyword">namespace</span> Car &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ns.Car.auto);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> Taxi <span class="keyword">implements</span> ns.Car.ICar &#123;</span><br><span class="line">        name: <span class="built_in">string</span>;</span><br><span class="line">        vendor: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">console</span>.log(ns.Car.auto);</span><br></pre></td></tr></table></figure><h2 id="📝271p-네임스페이스-이름-확장"><a href="#📝271p-네임스페이스-이름-확장" class="headerlink" title="📝271p. 네임스페이스 이름 확장"></a>📝271p. 네임스페이스 이름 확장</h2><p>네임스페이스 이름은 <code>.</code>을 허용, 이름 계층 확장하는데 사용</p><p><strong>사용 예시</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 순서 바뀌어도 문제는 없지만, 상위에서 하위로 선언하는게 맞음</span></span><br><span class="line"><span class="keyword">namespace</span> Animal&#123;&#125;</span><br><span class="line"><span class="keyword">namespace</span> Animal.Pet&#123;&#125;</span><br></pre></td></tr></table></figure><p>그러나 상속에 개념이 전혀 아니고, 서로 다른 네임스페이스이므로, 변수나 메소드 공유 X</p><h2 id="📝274p-브라우저에서-네임스페이스-모듈-호출"><a href="#📝274p-브라우저에서-네임스페이스-모듈-호출" class="headerlink" title="📝274p. 브라우저에서 네임스페이스 모듈 호출"></a>📝274p. 브라우저에서 네임스페이스 모듈 호출</h2><blockquote><p> 네임스페이스간 결국 js에는 없는 개념으로, 순서대로 js 스크립트 호출해서 사용해야한다는 것 같음</p></blockquote><h2 id="📝276p-모듈-사용법"><a href="#📝276p-모듈-사용법" class="headerlink" title="📝276p. 모듈 사용법"></a>📝276p. 모듈 사용법</h2><h3 id="개별-export"><a href="#개별-export" class="headerlink" title="개별 export"></a>개별 export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ICar &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ICar, Test &#125; <span class="keyword">from</span> <span class="string">&#x27;../to/path&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="함께-export"><a href="#함께-export" class="headerlink" title="함께 export"></a>함께 export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ver: <span class="built_in">string</span> = <span class="string">`1.0`</span>;</span><br><span class="line"><span class="keyword">let</span> display = <span class="function">() =&gt;</span> <span class="string">`hello`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; ver, display &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ver, display &#125; <span class="keyword">from</span> <span class="string">&#x27;../to/path&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="모두-export"><a href="#모두-export" class="headerlink" title="모두 export"></a>모두 export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> ver: <span class="built_in">string</span> = <span class="string">`1.0`</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> display = <span class="function">() =&gt;</span> <span class="string">`hello`</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&#x27;./to/path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.ver);</span><br><span class="line"><span class="built_in">console</span>.log(m.display());</span><br></pre></td></tr></table></figure><h3 id="모듈-재노출"><a href="#모듈-재노출" class="headerlink" title="모듈 재노출"></a>모듈 재노출</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;../to/path&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;../to/path&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&#x27;./to/path&#x27;</span>;</span><br></pre></td></tr></table></figure><p>모듈 파일을 가져와서 다시 <code>export</code> 하는 예시, 최상위에 모듈에서 많이 사용됨</p><h2 id="📝281p-★네임스페이스로-감싸서-재노출"><a href="#📝281p-★네임스페이스로-감싸서-재노출" class="headerlink" title="📝281p. ★네임스페이스로 감싸서 재노출"></a>📝281p. ★네임스페이스로 감싸서 재노출</h2><blockquote><p>namepsace 간 class보다 상위의 개념이기 때문에 감싸서 노출하면 편한 것 같다</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// car-info.module.ts &lt;- 모듈 파일 명명법</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> CarInfo &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CarInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;./car-info.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line">CarInfo.hello();</span><br></pre></td></tr></table></figure><h2 id="📝283p-디폴트-무법"><a href="#📝283p-디폴트-무법" class="headerlink" title="📝283p. 디폴트 무법"></a>📝283p. 디폴트 무법</h2><h3 id="export-equals-import-equals-문"><a href="#export-equals-import-equals-문" class="headerlink" title="export-equals, import-equals 문"></a>export-equals, import-equals 문</h3><blockquote><p><code>default</code> 이전에 사용됬던 방식인 것 같은데, 몰랐던 부분 - 가끔 다른 프로젝트에서 종종 보였는데 이런 의미였구나</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> = Chart;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동일</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Chart;</span><br><span class="line"><span class="keyword">export</span> &#123;  Chart <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Validator <span class="keyword">from</span> <span class="string">&#x27;./validator&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동일</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Validator &#125; <span class="keyword">from</span> <span class="string">&#x27;./validator&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h3><p>모듈 하나당 <code>default</code>는 하나만 선언 가능</p><h2 id="📝289-313p-모듈시스템-생략"><a href="#📝289-313p-모듈시스템-생략" class="headerlink" title="📝289 ~ 313p. 모듈시스템 생략"></a>📝289 ~ 313p. 모듈시스템 생략</h2><blockquote><p>모듈 시스템은 각 파트마다 다르기 때문에 웹개발자라면 ES2015모듈을, Node.js개발자라면 CommonJs 모듈 형식을 기본으로 알고, 나머지는 상황에 따라 알아야할 것 같다</p></blockquote><h2 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h2><blockquote><p>책은 이론적인 부분으로 많이 설명되어있어, 실제에서는 어떻게 사용되고, 더 추가적인 내용을 찾아봄</p></blockquote><ul><li><a href="https://medium.com/naver-fe-platform/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EA%B0%80-%EB%AA%A8%EB%93%88-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EC%9D%84-%EC%B0%B8%EC%A1%B0%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95-5bfc55a88bb6">타입스크립트 컴파일러가 모듈 타입 선언을 참조하는 과정</a></li><li><a href="https://www.slideshare.net/gloridea/dts-74589285">d.ts 만들기</a> - 개인적으로 몇몇 부분이 잘못? 이해가 안되는 부분 존재</li><li><a href="https://www.zerocho.com/category/TypeScript/post/5bab2086103eac558e45cdd7">타입스크립트 전환 후기 - import, export</a> - global로 선언하는건 맞는지 모르겠는 부분</li><li><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/chart.js/index.d.ts">Chart.js의 타입 정의</a></li><li><a href="https://poiemaweb.com/typescript-typing">정적 타이핑</a></li><li><a href="https://velog.io/@bigbrothershin/TypeScript-%EB%82%A8%EC%9D%98-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%93%B8-%EB%95%8C-d.ts-%ED%8C%8C%EC%9D%BC%EC%9D%B4-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0">TypeScript - 남의 라이브러리 쓸 때 d.ts 파일이 없는 경우</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;8장-모듈&quot;&gt;&lt;a href=&quot;#8장-모듈&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Vue JSX 사용법</title>
    <link href="https://taeuk-gang.github.io/wiki/Vue%EC%97%90%EC%84%9C%EC%9D%98%20JSX%20%EC%82%AC%EC%9A%A9%EB%B2%95%20%EC%A0%95%EB%A6%AC/"/>
    <id>https://taeuk-gang.github.io/wiki/Vue%EC%97%90%EC%84%9C%EC%9D%98%20JSX%20%EC%82%AC%EC%9A%A9%EB%B2%95%20%EC%A0%95%EB%A6%AC/</id>
    <published>2020-04-08T11:39:05.000Z</published>
    <updated>2022-09-23T10:58:11.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue에서의-JSX-사용법-정리"><a href="#Vue에서의-JSX-사용법-정리" class="headerlink" title="Vue에서의 JSX 사용법 정리"></a>Vue에서의 JSX 사용법 정리</h1><blockquote><p>Vue 공식 홈페이지에서 JSX에 대한 사용법이 자세히 명시되어있지 않아 정리함</p><p><a href="https://segmentfault.com/a/1190000019659205">이 사이트</a>를 중심으로 재정리함 (중국어를 하나도 몰라서, 번역은 아님)</p></blockquote><h2 id="개인적-코드-스타일"><a href="#개인적-코드-스타일" class="headerlink" title="개인적 코드 스타일"></a>개인적 코드 스타일</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildElement &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;tsx&quot;&gt;</span><br><span class="line">import &#123; Vue, Component &#125; from &#39;vue-property-decorator&#39;;</span><br><span class="line">import &#123; VNode &#125; from &#39;vue&#39;;</span><br><span class="line"></span><br><span class="line">type ChildComponent &#x3D; any;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; # 메뉴바</span><br><span class="line">const ChildElement: ChildComponent &#x3D; &#123;</span><br><span class="line">render(): VNode &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;Test&lt;&#x2F;div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">ChildComponent,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">export default class Test extends Vue &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="JSX에서의-데이터-교류"><a href="#JSX에서의-데이터-교류" class="headerlink" title="JSX에서의 데이터 교류"></a>JSX에서의 데이터 교류</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;this.messsage&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;!-- v-html --&gt;</span><br><span class="line">&lt;div domPropsInnerHTML&#x3D;&#123;this.dangerHtml&#125;&#x2F;&gt;</span><br><span class="line">&lt;!-- v-model --&gt;</span><br><span class="line">&lt;custom-input v-model&#x3D;&#123;this.vm.name&#125; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200408202725336.png" alt="image-20200408202725336"></p><h2 id="동적-지정이-가능"><a href="#동적-지정이-가능" class="headerlink" title="동적 지정이 가능"></a>동적 지정이 가능</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 일반적인 형태 --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn btn-default&quot; style&#x3D;&quot;font-size: 12px;&quot;&gt;Button&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- JSX에서의 형태(동적 지정 가능) --&gt;</span><br><span class="line">&lt;div class&#x3D;&#123;&#96;btn btn-$&#123;this.isDefault ? &#39;default&#39; : &#39;&#39;&#125;&#96;&#125;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&#123;&#123;&#39;btn-default&#39;: this.isDefault, &#39;btn-primary&#39;: this.isPrimary&#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div style&#x3D;&#123;&#123;color: &#39;red&#39;, fontSize: &#39;14px&#39;&#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="일반적인-Template-방식과-다름"><a href="#일반적인-Template-방식과-다름" class="headerlink" title="일반적인 Template 방식과 다름"></a>일반적인 Template 방식과 다름</h2><blockquote><p>사실 거의 javascript 위에서 HTML을 작성한다고 보면 됨</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x2F;* v-if *&#x2F;&#125;</span><br><span class="line">&#123;this.withTitle &amp;&amp; &lt;Title &#x2F;&gt;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#x2F;* v-if 加 v-else *&#x2F;&#125;</span><br><span class="line">&#123;this.isSubTitle ? &lt;SubTitle &#x2F;&gt; : &lt;Title &#x2F;&gt;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#x2F;* v-for *&#x2F;&#125;</span><br><span class="line">&#123;this.options.map(option &#x3D;&gt; &#123;</span><br><span class="line">  &lt;div&gt;&#123;option.title&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;)&#125;</span><br></pre></td></tr></table></figure><h2 id="이벤트"><a href="#이벤트" class="headerlink" title="이벤트"></a>이벤트</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 일반 이벤트(@event와 동일) --&gt;</span><br><span class="line">&lt;custom-buton onClick&#x3D;&#123;this.handleClick&#125;&gt;Click me&lt;&#x2F;el-buton&gt;</span><br><span class="line">&lt;!-- 네이티브 이벤트 --&gt;</span><br><span class="line">&lt;custom-button nativeOnClick&#x3D;&#123;this.handleClick&#125;&gt;Native click&lt;&#x2F;el-button&gt;</span><br><span class="line">&lt;!-- 파라미터 이용시 --&gt;</span><br><span class="line">&lt;custom-button onClick&#x3D;&#123;e &#x3D;&gt; this.handleClick(this.id)&#125;&gt;Click and pass data&lt;&#x2F;el-button&gt;</span><br></pre></td></tr></table></figure><h2 id="작성법"><a href="#작성법" class="headerlink" title="작성법"></a>작성법</h2><p>하나의 엘리먼트로 래핑하여 작성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Demo &#x3D; () &#x3D;&gt; (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;li&gt;One&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;Two&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>여러개 작성해야할 필요가 있을 경우</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const Demo &#x3D; () &#x3D;&gt; [</span><br><span class="line">  &lt;li&gt;One&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;Two&lt;&#x2F;li&gt;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Map을 이용한 반복 작성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      options: [&#39;one&#39;, &#39;two&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">    const LiItem &#x3D; () &#x3D;&gt; this.options.map(option &#x3D;&gt; &lt;li&gt;&#123;option&#125;&lt;&#x2F;li&gt;)</span><br><span class="line">                                          </span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;LiItem &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="이벤트-capture-passive-once-…"><a href="#이벤트-capture-passive-once-…" class="headerlink" title="이벤트 capture, passive, once, …"></a>이벤트 capture, passive, once, …</h2><table><thead><tr><th>이벤트 키워드</th><th>기호</th></tr></thead><tbody><tr><td>.passive</td><td>&amp;</td></tr><tr><td>.capture</td><td>!</td></tr><tr><td>.once</td><td>~</td></tr><tr><td>.capture.once</td><td>~!</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button &#123;...&#123;</span><br><span class="line">    &#39;!click&#39;: this.doThisInCapturingMode,</span><br><span class="line">  &#39;!keyup&#39;: this.doThisOnce,</span><br><span class="line">  &#39;~!mouseover&#39;: this.doThisOnceInCapturingMode</span><br><span class="line">&#125;&#125;&gt;Click Me!&lt;&#x2F;el-button&gt;</span><br></pre></td></tr></table></figure><h2 id="이벤트-전파"><a href="#이벤트-전파" class="headerlink" title="이벤트 전파"></a>이벤트 전파</h2><table><thead><tr><th>이벤트 키워드</th><th>설명</th></tr></thead><tbody><tr><td>.stop</td><td>event.stopPropagation()</td></tr><tr><td>.prevent</td><td>event.preventDeafult()</td></tr><tr><td>.self</td><td>if (event.target !== event.currentTarget) return</td></tr><tr><td>.enter (.13)</td><td>if (event.keyCode !== 13) return</td></tr><tr><td>.ctrl  .alt   .shift   .meta</td><td>if (!event.ctrlKey) return<br />altKey, shiftKey, metaKey</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  keyup(e) &#123;</span><br><span class="line">    &#x2F;&#x2F; .self</span><br><span class="line">    if (e.target !&#x3D;&#x3D; e.currentTarget) return</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; .enter&#96; .13</span><br><span class="line">    if (!e.shiftKey || e.keyCode !&#x3D;&#x3D; 13) return</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; .stop</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; .prevent</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const LiArray &#x3D; () &#x3D;&gt; this.options.map(option &#x3D;&gt; (</span><br><span class="line">  &lt;li ref&#x3D;&quot;li&quot; key&#x3D;&#123;option&#125;&gt;&#123;option&#125;&lt;&#x2F;li&gt;</span><br><span class="line">))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const LiArray &#x3D; () &#x3D;&gt; this.options.map(option &#x3D;&gt; (</span><br><span class="line">  &lt;li ref&#x3D;&quot;li&quot; refInFor&#x3D;&#123;true&#125; key&#x3D;&#123;option&#125;&gt;&#123;option&#125;&lt;&#x2F;li&gt;</span><br><span class="line">))</span><br></pre></td></tr></table></figure><h2 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;page-header__title&quot;&gt;</span><br><span class="line">    &#123;this.$slots.title ? this.$slots.title : this.title&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>(동일 기능) Template에서는 아래와 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;page-header__title&quot;&gt;</span><br><span class="line">  &lt;slot name&#x3D;&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>JSX에서는 default상태의 슬롯은 허용되지 않는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 에러! --&gt;</span><br><span class="line">&lt;current-user&gt;</span><br><span class="line">    &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line">&lt;&#x2F;current-user&gt;</span><br></pre></td></tr></table></figure><h3 id="JSX에서는-스코프-슬롯을-사용해야함"><a href="#JSX에서는-스코프-슬롯을-사용해야함" class="headerlink" title="JSX에서는 스코프 슬롯을 사용해야함"></a>JSX에서는 스코프 슬롯을 사용해야함</h3><h4 id="일반적인-Vue-slot-형태"><a href="#일반적인-Vue-slot-형태" class="headerlink" title="일반적인 Vue slot 형태"></a>일반적인 Vue slot 형태</h4><p>부모</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">    &lt;template v-slot:default&#x3D;&quot;&#123; injectedProps &#125;&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; injectedProps.user.firstName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;el-button @click&#x3D;&quot;injectedProps.logFullName&quot;&gt;Log Full Name&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;current-user&gt;</span><br></pre></td></tr></table></figure><p>자식</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;slot v-bind:injectedProps&#x3D;&quot;slotProps&quot;&gt;</span><br><span class="line">      &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">      &lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        user: &#123;</span><br><span class="line">          firstName: &#39;snow&#39;,</span><br><span class="line">          lastName: &#39;wolf&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    computed: &#123;</span><br><span class="line">      slotProps() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          user: this.user,</span><br><span class="line">          logFullName: this.logFullName</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    methods: &#123;</span><br><span class="line">      logFullName() &#123;</span><br><span class="line">        console.log(&#96;$&#123;this.firstName&#125; $&#123;this.lastName&#125;&#96;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="JSX에서-slot-형태"><a href="#JSX에서-slot-형태" class="headerlink" title="JSX에서 slot 형태"></a>JSX에서 slot 형태</h4><p>부모</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user &#123;...&#123;</span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    subTitle: (&#123; injectedProps &#125;) &#x3D;&gt; (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h3&gt;injectedProps.user&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;el-button onClick&#x3D;&#123;injectedProps.logFullName&#125;&gt;Log Full Name&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;&gt;&lt;&#x2F;current-user&gt;</span><br></pre></td></tr></table></figure><p>자식</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        firstName: &#39;snow&#39;,</span><br><span class="line">        lastName: &#39;wolf&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  computed: &#123;</span><br><span class="line">    slotProps() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        user: this.user,</span><br><span class="line">        logFullName: this.logFullName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  methods: &#123;</span><br><span class="line">    logFullName() &#123;</span><br><span class="line">      console.log(&#96;$&#123;this.firstName&#125; $&#123;this.lastName&#125;&#96;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &#123;this.$scopedSlots.subTitle(&#123;</span><br><span class="line">          injectedProps: this.slotProps</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>중간 나중에 정리 (현재 불필요 내용)</p><hr><h2 id="이상적인-나누는-구조"><a href="#이상적인-나누는-구조" class="headerlink" title="이상적인 나누는 구조"></a>이상적인 나누는 구조</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  const TabHeader &#x3D; (</span><br><span class="line">      &lt;div class&#x3D;&quot;page-header page-header--tab&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  const Header &#x3D; () &#x3D;&gt; (</span><br><span class="line">      &lt;div class&#x3D;&quot;page-header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">      &#123;this.withTab ? TabHeader : &lt;Header&#x2F;&gt;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VueComponent-구조"><a href="#VueComponent-구조" class="headerlink" title="VueComponent 구조"></a>VueComponent 구조</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">children        </span><br><span class="line">data         </span><br><span class="line">    attrs      </span><br><span class="line">    domProps    </span><br><span class="line">    on                </span><br><span class="line">injections  </span><br><span class="line">listeners:  </span><br><span class="line">    click        </span><br><span class="line">    ...</span><br><span class="line">parent            </span><br><span class="line">props                </span><br><span class="line">scopedSlots </span><br><span class="line">slots                </span><br></pre></td></tr></table></figure><h2 id="Props-이용법"><a href="#Props-이용법" class="headerlink" title="Props 이용법"></a>Props 이용법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  const Demo &#x3D; props &#x3D;&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h3&gt;Jsx中的内部组件 &#123; props.data.title &#125;&lt;&#x2F;h3&gt;</span><br><span class="line">        &#123; props.children &#125;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &#123; props.scopedSlots.bar() &#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Demo title&#x3D;&quot;test&quot; attrsA&#x3D;&quot;a&quot; domPropsB&#x3D;&quot;b&quot; onClick&#x3D;&#123;this.demo&#125;&gt;</span><br><span class="line">          &lt;h3&gt;Children&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;template slot&#x3D;&quot;bar&quot;&gt;</span><br><span class="line">            &lt;p&gt;Slot&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;&#x2F;Demo&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue에서의-JSX-사용법-정리&quot;&gt;&lt;a href=&quot;#Vue에서의-JSX-사용법-정리&quot; class=&quot;headerlink&quot; title=&quot;Vue에서의 JSX 사용법 정리&quot;&gt;&lt;/a&gt;Vue에서의 JSX 사용법 정리&lt;/h1&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="Vue.js" scheme="https://taeuk-gang.github.io/categories/Vue-js/"/>
    
    
    <category term="Vue.js" scheme="https://taeuk-gang.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 7장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-7%EC%9E%A5/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-7%EC%9E%A5/</id>
    <published>2020-04-05T04:39:05.000Z</published>
    <updated>2022-09-23T10:58:11.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p><p>분량이 많아, 이미 아는 내용이나 자주 사용하는 부분은 생략함</p></blockquote><h1 id="7장-클래스와-인터페이스-목차"><a href="#7장-클래스와-인터페이스-목차" class="headerlink" title="7장 클래스와 인터페이스 목차"></a>7장 클래스와 인터페이스 목차</h1><h2 id="📝183p-타입스크립트의-객체지향-프로그래밍-지원"><a href="#📝183p-타입스크립트의-객체지향-프로그래밍-지원" class="headerlink" title="📝183p. 타입스크립트의 객체지향 프로그래밍 지원"></a>📝183p. 타입스크립트의 객체지향 프로그래밍 지원</h2><p>객체지향의 목적은 코드 중복을 최소화</p><p>ES6에서 <code>class</code> 키워드가 추가되면서 부족한 점이 존재</p><table><thead><tr><th>객체지향 프로그래밍 요소</th><th>Js(ES6)</th><th>Ts</th></tr></thead><tbody><tr><td>클래스</td><td>class</td><td>class</td></tr><tr><td>인터페이스</td><td>★지원안함</td><td>interface</td></tr><tr><td>인터페이스 구현</td><td>★지원안함</td><td>implements</td></tr><tr><td>상속</td><td>extends</td><td>extends</td></tr><tr><td>생성자</td><td>constructor(){}</td><td>constructor(){}</td></tr><tr><td>접근 제한자</td><td>★지원안함</td><td>private, public, protected</td></tr><tr><td>final 제한자</td><td>★지원안함</td><td>readonly(Ts 2.0부터)</td></tr><tr><td>static 키워드</td><td>static</td><td>static</td></tr><tr><td>super 키워드</td><td>super</td><td>super</td></tr></tbody></table><blockquote><p>제한자의 경우, 실제 Js로 변환됬을 경우, 사라지는 부분으로 개발상에서만 제한의 의미가 있는 것이 아쉽다</p></blockquote><h2 id="📝p187-기존Js-prototype-vs-class-비교"><a href="#📝p187-기존Js-prototype-vs-class-비교" class="headerlink" title="📝p187. 기존Js(prototype) vs class 비교"></a>📝p187. 기존Js(prototype) vs class 비교</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 Js Prototype 객체지향 프로그래밍</span></span><br><span class="line"><span class="keyword">var</span> Rectangle = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Rectangle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x * <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Rectangle;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rectangle = <span class="keyword">new</span> Rectangle(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> area = rectangle.getArea();</span><br><span class="line"><span class="built_in">console</span>.log(area);</span><br></pre></td></tr></table></figure><p>모듈 패턴은 클로저를 이용해 비공개된 내부 메소드를 캡슐화하여, 전역공간을 더럽히지 않는 장점 존재</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 객체지향 프로그래밍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rectanlge &#123;</span><br><span class="line">    x: numberl</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x * <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p188-상속-extends-포함-2-관계"><a href="#📝p188-상속-extends-포함-2-관계" class="headerlink" title="📝p188. 상속(extends), 포함(2) 관계"></a>📝p188. 상속(extends), 포함(2) 관계</h2><p>상속 생략</p><h3 id="포함-관계"><a href="#포함-관계" class="headerlink" title="포함 관계"></a>포함 관계</h3><ol><li>합성(composition) - 강한관계</li><li>집합(aggregation) - 약한관계</li></ol><h4 id="합성"><a href="#합성" class="headerlink" title="합성"></a>합성</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Engine&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">private</span> Engine;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = <span class="keyword">new</span> Engine();<span class="comment">// 인스턴스 생성</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCar = <span class="keyword">new</span> Car();</span><br><span class="line">myCar = <span class="literal">null</span>;<span class="comment">// null이 되면 포함된 클래스 함께 제거</span></span><br></pre></td></tr></table></figure><h4 id="집합"><a href="#집합" class="headerlink" title="집합"></a>집합</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Engine&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">private</span> engine: Engine;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">engine: Engine</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;<span class="comment">// 인스턴스 생성</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> engine = <span class="keyword">new</span> Engine();<span class="comment">// engine 인스턴스 별도로 선언</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car(engine);<span class="comment">// 인스턴스 생성시, 포함되는 클래스를 같이 전달</span></span><br></pre></td></tr></table></figure><p>위 코드(합성)과의 차이점은 집합은 <code>car</code> 객체가 제거되더라도,<br><code>engine</code> 객체는 외부에서 선언되었기 때문에 제거되지않음 (수명주기를 함께하지 않기때문에 약한관계)</p><blockquote><p>실무에서는 어디에 주로 사용될까?</p></blockquote><h2 id="📝p192-접근-제한자"><a href="#📝p192-접근-제한자" class="headerlink" title="📝p192. 접근 제한자"></a>📝p192. 접근 제한자</h2><table><thead><tr><th>접근 제한자</th><th>특징</th><th>상속 여부</th><th>외부 객체 접근</th></tr></thead><tbody><tr><td>public</td><td>외부 또는 자식클래스에서 접근 가능</td><td>O</td><td>O</td></tr><tr><td>protected</td><td>자식 클래스에서 접근 가능</td><td>O</td><td>X</td></tr><tr><td>private</td><td>해당 클래스에서만 접근 가능</td><td>X</td><td>X</td></tr></tbody></table><h2 id="📝p195-축약-코딩기법"><a href="#📝p195-축약-코딩기법" class="headerlink" title="📝p195. 축약 코딩기법"></a>📝p195. 축약 코딩기법</h2><p>챕터와 상관없지만, 관련 있는 변수 묶어서 선언하기 좋아보여서 기록</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [cWidth, cLength, cHeight] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="📝p195-접근-제한자-선언-gt-클래스-매개변수가-됨"><a href="#📝p195-접근-제한자-선언-gt-클래스-매개변수가-됨" class="headerlink" title="📝p195. 접근 제한자 선언 &gt; 클래스 매개변수가 됨"></a>📝p195. 접근 제한자 선언 &gt; 클래스 매개변수가 됨</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Cube &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> width: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    getWidth() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cube = <span class="keyword">new</span> Cube(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cube.width);<span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="📝p197-get-set-코딩스타일"><a href="#📝p197-get-set-코딩스타일" class="headerlink" title="📝p197. get/set 코딩스타일"></a>📝p197. get/set 코딩스타일</h2><blockquote><p>매개변수/getter/setter 한꺼번에 모아서 관리</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PC</span> </span>&#123;</span><br><span class="line">    ram = <span class="string">`0G`</span>;</span><br><span class="line"><span class="keyword">get</span> <span class="title">ramCapcity</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ram;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">set</span> <span class="title">ramCapcity</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.ram = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p197-부모-클래스-멤버-변수-이용"><a href="#📝p197-부모-클래스-멤버-변수-이용" class="headerlink" title="📝p197. 부모 클래스 멤버 변수 이용"></a>📝p197. 부모 클래스 멤버 변수 이용</h2><p><code>super()</code> 키워드와 <code>this</code> 사용</p><p><code>super</code>는 부모 클래스의 공개 멤버(<code>public</code>)에만 접근 가능</p><p><code>this</code>는 부모에게 상속받은 멤버와 현재 클래스 모두 접근 가능</p><h2 id="📝p199-기본-접근-제한자"><a href="#📝p199-기본-접근-제한자" class="headerlink" title="📝p199. 기본 접근 제한자"></a>📝p199. 기본 접근 제한자</h2><p><strong>잘못 알고 있던 사항</strong></p><p>constructor 매개변수에서 접근 제한자를 설정 안할시, default가 <code>public</code>일줄 알았는데 <code>private</code> 임</p><p>접근 제한자를 생략할 경우, 생성자 외부에서 매개변수에 접근할 수 없음!</p><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200406023739559.png" alt="image-20200406023739559"></p><h2 id="📝p202-추상-클래스를-이용한-공통-기능-정의"><a href="#📝p202-추상-클래스를-이용한-공통-기능-정의" class="headerlink" title="📝p202. 추상 클래스를 이용한 공통 기능 정의"></a>📝p202. 추상 클래스를 이용한 공통 기능 정의</h2><blockquote><p>언제 사용될까? 실무에서 자주 사용되는 케이스가 궁금</p></blockquote><p>구현 메소드는 실제 구현 내용을 포함</p><p>추상 메소드는 선언만된 메소드, 그러므로 자식 클래스에서 추상 메소드를 받아 별도 구현해야함</p><p>! 추상 메서드나 추상 멤버 변수는 자식 클래스에서 사용(<code>overriding</code>)할 수 있게 <code>public</code>으로 선언해야함</p><p>추상 클래스에 기반은 둔 구현 방식은 템플릿 메서드 패턴으로 많이 알려짐</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> AbstractBird &#123;</span><br><span class="line">  <span class="keyword">abstract</span> name: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">abstract</span> flySound(sound: <span class="built_in">string</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 구현 메소드가 있어도 상관이 없나보네</span></span><br><span class="line">  fly(): <span class="built_in">void</span> &#123;        </span><br><span class="line">      <span class="built_in">this</span>.flySound(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>: 파닥`</span>);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> RealBird <span class="keyword">extends</span> AbstractBird &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 오버라이딩</span></span><br><span class="line">  flySound(sound: <span class="built_in">string</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 날아감`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dogBird = <span class="keyword">new</span> RealBird(<span class="string">`새`</span>);</span><br><span class="line">dogBird.fly();<span class="comment">// 새 날아감</span></span><br></pre></td></tr></table></figure><h2 id="📝-p205-Interface-다중-상속"><a href="#📝-p205-Interface-다중-상속" class="headerlink" title="📝 p205. Interface 다중 상속"></a>📝 p205. Interface 다중 상속</h2><blockquote><p>몰랐던 부분</p></blockquote><p>자식 인터페이스는 여러 부모 인터페이스를 다중 상속 가능</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Car &#123; speed: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> SportsCar &#123; acceleration: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> MyOptimizedCar <span class="keyword">extends</span> Car, SportsCar &#123;</span><br><span class="line">    waterproof: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCar = &lt;MyOptimizedCar&gt;&#123;&#125;;<span class="comment">// ?? 인터페이스만으로 인스턴스를 만들 수 있는건가?</span></span><br><span class="line">myCar.speed = <span class="number">100</span>;</span><br><span class="line">myCar.acceleration = <span class="number">100</span>;</span><br><span class="line">myCar.waterproof = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>! 만약 다중 상속 받을 때, 같은 이름의 메소드를 상속받으면 재정의해야함</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">    run(): <span class="built_in">void</span>;</span><br><span class="line">    getStatus(): &#123;</span><br><span class="line">        runningSpeed: <span class="built_in">number</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">    fly(): <span class="built_in">void</span>;</span><br><span class="line">    getStatus(): &#123;</span><br><span class="line">        flightSpeed: <span class="built_in">number</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DogBird <span class="keyword">extends</span> Dog, Bird &#123;</span><br><span class="line">    getStatus(): &#123;</span><br><span class="line">        runningSpeed: <span class="built_in">number</span>,</span><br><span class="line">        flightSpeed: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NewAnimal <span class="keyword">implements</span> DogBird &#123;</span><br><span class="line">    run(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">    fly(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">    getStatus(): &#123; runningSpeed: <span class="built_in">number</span>, flightSpeed: <span class="built_in">number</span>; &#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            runningSpeed: <span class="number">10</span>,</span><br><span class="line">            flightSpeed: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p212-클래스를-배열-요소로-보고-배열-타입-선언"><a href="#📝p212-클래스를-배열-요소로-보고-배열-타입-선언" class="headerlink" title="📝p212. 클래스를 배열 요소로 보고 배열 타입 선언"></a>📝p212. 클래스를 배열 요소로 보고 배열 타입 선언</h2><blockquote><p>몰랐던 부분</p><p>클래스 자체를 타입 선언 부분에 넣을 수 있음</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> full: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> city: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.full = name + <span class="string">`(<span class="subst">$&#123;city&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> personArray: Person[] = [</span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">`kim`</span>, <span class="string">`name`</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">`kang`</span>, <span class="string">`name`</span>)</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="📝p215-인터페이스에-함수-타입-정의"><a href="#📝p215-인터페이스에-함수-타입-정의" class="headerlink" title="📝p215. 인터페이스에 함수 타입 정의"></a>📝p215. 인터페이스에 함수 타입 정의</h2><p>익명 함수에 대한 함수 타입 정의 <code>()</code>를 사용하면 정의 할 수 있음</p><p>! 매개 변수 이름과 타입이 일치하지 않더라도 상관이 없음 (??? 이유가 뭘까)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IFormat &#123;</span><br><span class="line">    (data: <span class="built_in">string</span>, toUpper?: <span class="built_in">boolean</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> format: IFormat = <span class="function"><span class="keyword">function</span> (<span class="params">data: <span class="built_in">string</span>, toUpper: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> format: IFormat = <span class="function"><span class="keyword">function</span> (<span class="params">str: <span class="built_in">string</span>, isUpper: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p216-오버라이딩"><a href="#📝p216-오버라이딩" class="headerlink" title="📝p216. 오버라이딩"></a>📝p216. 오버라이딩</h2><p>오버라이딩 = 부모에서 상속받아, 자식 클래스에서 새로 구현하는 방법</p><p><strong>두 가지 조건 필요</strong></p><ol><li><p>조건1: 부모클래스의 매개변수 타입이 같거나 상위 타입이여야함</p></li><li><p>조건2: 부모클래스의 매개변수 개수가 같거나 많아야 함</p></li></ol><h2 id="📝p219-오버로딩"><a href="#📝p219-오버로딩" class="headerlink" title="📝p219. 오버로딩"></a>📝p219. 오버로딩</h2><p>오버로딩 = 메서드의 이름은 같지만 매개변수의 타입과 개수가 다르게 정의하는 방법</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 점점 상위의 타입으로 선언</span></span><br><span class="line">typeCheck(value: <span class="built_in">number</span>);</span><br><span class="line">typeCheck(value: <span class="built_in">string</span>);</span><br><span class="line">typeCheck(value: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">`number`</span>) <span class="built_in">console</span>.log(<span class="string">`this is number`</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">`string`</span>) <span class="built_in">console</span>.log(<span class="string">`this is string`</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">`nothing`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p222-인터페이스를-클래스에서-구현하여-오버로딩"><a href="#📝p222-인터페이스를-클래스에서-구현하여-오버로딩" class="headerlink" title="📝p222. 인터페이스를 클래스에서 구현하여 오버로딩"></a>📝p222. 인터페이스를 클래스에서 구현하여 오버로딩</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPoint &#123;</span><br><span class="line">    getX(x: <span class="built_in">any</span>): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Point <span class="keyword">implements</span> IPoint &#123;</span><br><span class="line">    getX(x?: <span class="built_in">number</span> | <span class="built_in">string</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>! 인터페이스를 이용하면 선언과 구현을 분리하고 구현부의 구조를 강제</p><p>이 점에서 로직과 구조가 섞여 있는 클래스를 상속해 오버로딩하는 것보다</p><p>구조만을 가지고 있는 인터페이스를 이용하는 것이 복잡고 낮습니다.</p><h2 id="📝p224-다형성"><a href="#📝p224-다형성" class="headerlink" title="📝p224. 다형성"></a>📝p224. 다형성</h2><h3 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h3><ol><li>클래스의 다형성</li><li>인터페이스의 다형성</li><li>매개변수의 다형성</li></ol><h3 id="클래스의-다형성"><a href="#클래스의-다형성" class="headerlink" title="클래스의 다형성"></a>클래스의 다형성</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Planet &#123;</span><br><span class="line">    stopTransduction(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`stop - planet`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Earth <span class="keyword">extends</span> Planet &#123;</span><br><span class="line">    <span class="keyword">public</span> features: <span class="built_in">string</span>[] = [<span class="string">`soil`</span>, <span class="string">`water`</span>, <span class="string">`oxyzen`</span>];</span><br><span class="line"></span><br><span class="line">    stopTransduction(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`stop - earth`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    earthStop(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`stop2 - earth`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> earth: Planet = <span class="keyword">new</span> Earth();<span class="comment">// ★ Earth 인스턴스를 생성했지만, 타입은 상위의 Planet임</span></span><br><span class="line">earth.stopTransduction();<span class="comment">// stop - earth, 인스턴스의 메소드를 사용</span></span><br><span class="line"><span class="built_in">console</span>.log(earth.features);<span class="comment">// Error, 접근 불가</span></span><br><span class="line">earth.earthStop();<span class="comment">// Error, 오버라이딩 되지 않은 메소드는 접근 불가</span></span><br></pre></td></tr></table></figure><p>부모 클래스의 타입을 지정받은 인스턴스는 실제 동작은 부모 클래스 기준으로 실행됨</p><p>그래서 자식 클래스 멤버 변수(<code>features</code>)에 접근할 수 없음</p><p>그러나, 메소드 자체는 자식 인스턴스의 것이 실행됨 (런타임 다형성(runtime polymorphism)), ex. <code>duck typing</code></p><h3 id="인터페이스의-다형성"><a href="#인터페이스의-다형성" class="headerlink" title="인터페이스의 다형성"></a>인터페이스의 다형성</h3><blockquote><p>클래스와 다르지 않아 코드만 적고 생략</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">    getAlias: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">    getAge(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PoliceMan <span class="keyword">implements</span> IPerson &#123;</span><br><span class="line">    getAlias = <span class="function">() =&gt;</span> <span class="string">`happy`</span>;</span><br><span class="line">    </span><br><span class="line">    getAge(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    hasClub() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> policeMan: IPerson = <span class="keyword">new</span> PoliceMan();</span><br><span class="line"><span class="built_in">console</span>.log(policeMan.hasClub());<span class="comment">// Error, 접근 불가</span></span><br></pre></td></tr></table></figure><h3 id="매개변수의-다형성-유니언-타입"><a href="#매개변수의-다형성-유니언-타입" class="headerlink" title="매개변수의 다형성 (유니언 타입)"></a>매개변수의 다형성 (유니언 타입)</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display(data: <span class="built_in">string</span> | <span class="built_in">number</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h4><p>타입 가드가 빡셈</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MonitorDisplay &#123;</span><br><span class="line">    display(monitor: Led | Oled | Uhd) &#123;</span><br><span class="line">        <span class="keyword">if</span> (monitor <span class="keyword">instanceof</span> Led) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (monitor <span class="keyword">instanceof</span> Oled) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (monitor <span class="keyword">instanceof</span> Uhd) &#123;</span><br><span class="line">            <span class="keyword">let</span> myMonitor: Uhd = &lt;Uhd&gt;monitor;</span><br><span class="line">            <span class="keyword">return</span> myMonitor.getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>type</code> 키워드시 축약은 가능하지만 근본적인 해결책은 될 수 없음(클래스 타입 추가시마다, 매번 업데이트 필요)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 여긴 또 신기하게 대문자로 명명했네..</span></span><br><span class="line"><span class="keyword">type</span> MultiTypes = Led | Oled | Uhd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MonitorDisplay &#123;</span><br><span class="line">    display(monitor: MultiTypes) &#123; ...(<span class="keyword">if</span>들) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="★★-매개변수의-다형성-인터페이스"><a href="#★★-매개변수의-다형성-인터페이스" class="headerlink" title="★★ 매개변수의 다형성 (인터페이스)"></a>★★ 매개변수의 다형성 (인터페이스)</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Monitor &#123;</span><br><span class="line">    getName(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Led <span class="keyword">implements</span> Monitor &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">    getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`LED: `</span> + <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Oled <span class="keyword">implements</span> Monitor &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">    getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Oled: `</span> + <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MonitorDisplay &#123;</span><br><span class="line">    display(monitor: Monitor) &#123;</span><br><span class="line">        <span class="keyword">let</span> myMonitor: Monitor = monitor;</span><br><span class="line">        <span class="keyword">return</span> myMonitor.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if문 없이 코딩이 가능함</p><h2 id="📝p236-getter-setter-사용-이유"><a href="#📝p236-getter-setter-사용-이유" class="headerlink" title="📝p236. getter/setter 사용 이유"></a>📝p236. getter/setter 사용 이유</h2><p>굳이 <code>this.name = &#39;anything&#39;</code> 처럼 멤버 변수를 사용하지 않고 <code>get/set</code> 키워드를 사용하는 이유</p><p>값을 설정하거나 읽을 때, 로직을 추가 가능(= 조건 추가 가능)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">get name(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.studentName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.includes(<span class="string">`happy`</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES5-변환시"><a href="#ES5-변환시" class="headerlink" title="ES5 변환시"></a>ES5 변환시</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a> 참고</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Student.prototype, <span class="string">`name`</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.studentName;</span><br><span class="line">&#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.includes(<span class="string">`happy`</span>)) <span class="built_in">this</span>.studentName = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    enumerable: <span class="literal">true</span>,<span class="comment">// true: 객체 키 열거 가능, default: false</span></span><br><span class="line">    configurable: <span class="literal">true</span><span class="comment">// true: 이 속성 값 수정/삭제 가능, default: false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Student.prototype) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prop);<span class="comment">// 여기에 enumerable 하지 않으면 표시되지 않음</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p240-static"><a href="#📝p240-static" class="headerlink" title="📝p240. static"></a>📝p240. <code>static</code></h2><p><code>static</code> 키워드는 객체 생성 없이  접근 가능하므로 메모리 절약 효과 존재</p><p>객체 생성 없이 바로 접근 가능</p><p><code>static</code> 멤버 변수는 인스턴스간 값 공유</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Circle &#123;</span><br><span class="line">    <span class="keyword">static</span> circleArea: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    get area(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Circle.circleArea;<span class="comment">// this가 아닌 Circle을 사용했음</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> set area(pArea: <span class="built_in">number</span>) &#123;</span><br><span class="line">        Circle.circleArea = pArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Circle.area = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle();</span><br><span class="line"><span class="built_in">console</span>.log(circle.area);<span class="comment">// 100, 공유되는 것을 확인</span></span><br></pre></td></tr></table></figure><h2 id="📝p242-싱글톤-패턴"><a href="#📝p242-싱글톤-패턴" class="headerlink" title="📝p242. 싱글톤 패턴"></a>📝p242. 싱글톤 패턴</h2><p><code>static</code> 키워드를 활용하면 유일한 상태 정보 저장 가능</p><p>이렇게 하기위해서는 객체 생성을 막고, 클래스 변수, 메소드 등 모두를 <code>static</code>으로 선언</p><p>단일 상태 관리에는 좋지만, 인스턴스 생성은 불가능</p><p><strong>생성법</strong></p><ol><li>부지런한 초기화 (eager initalization) - 클래스 선언시 초기화</li><li>게으른 초기화 (lazy initalization) - 메소드 호출시 초기화</li></ol><h3 id="Eager-Initalization"><a href="#Eager-Initalization" class="headerlink" title="Eager Initalization"></a>Eager Initalization</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> EagerLogger &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> uniqueObj: EagerLogger = <span class="keyword">new</span> EagerLogger();<span class="comment">// 내부에서 자체적 선언</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// private를 붙여 인스턴스 생성 방지</span></span><br><span class="line">    <span class="keyword">private</span> EagerLogger() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static으로 외부 접근 허용</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getLogger(): EaggerLogger &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uniqueObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lazy-Initalization"><a href="#Lazy-Initalization" class="headerlink" title="Lazy Initalization"></a>Lazy Initalization</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LazyLogger &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> uniqueObj: LazyLogger;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> LazyLogger() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getLogger(): LazyLogger &#123;</span><br><span class="line">        <span class="comment">// 생성된 적이 없으면 새로 생성, 타입은 LazyLogger이므로 ==로 타입검사 피함</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.uniqueObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.uniqueObj = <span class="keyword">new</span> LazyLogger();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uniqueObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p247-readonly-vs-const"><a href="#📝p247-readonly-vs-const" class="headerlink" title="📝p247. readonly vs const"></a>📝p247. readonly vs const</h2><blockquote><p><code>const</code>가 사용되는 곳은 <code>readonly</code>를 사용하지 못한다고 이해하면 편한 것 같다</p></blockquote><table><thead><tr><th>특성</th><th>const</th><th>readonly</th></tr></thead><tbody><tr><td>상수 선언</td><td>가능</td><td>가능</td></tr><tr><td>초기화 강제성</td><td>필수</td><td>선택</td></tr><tr><td>값 재할당</td><td>불가능</td><td>가능(?)</td></tr><tr><td>선언 가능 대상</td><td>변수</td><td>멤버 변수<br />객체 리터럴<br />새타입</td></tr><tr><td>선언 불가능 대상</td><td>멤버 변수<br />객체 리터럴<br />새타입</td><td>변수</td></tr><tr><td>사용 용도</td><td>상수</td><td>읽기 전용 속성</td></tr><tr><td>컴파일 선언 유지</td><td>유지</td><td>사라짐</td></tr><tr><td>지원 표준</td><td>ES6</td><td>TS 2.0</td></tr></tbody></table><h2 id="📝p250-readonly-제거되는-경우"><a href="#📝p250-readonly-제거되는-경우" class="headerlink" title="📝p250. readonly 제거되는 경우"></a>📝p250. readonly 제거되는 경우</h2><p><code>type</code> 에일리어싱시 사라짐</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emotion: &#123; <span class="keyword">readonly</span> name: <span class="built_in">string</span> &#125; = &#123; name: <span class="string">`sad`</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aliasing</span>(<span class="params">pEmotion: &#123; name: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">    pEmotion.name = <span class="string">`happy`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(emotion.name);<span class="comment">// sad</span></span><br><span class="line">emotion.name = <span class="string">`happy`</span>;<span class="comment">// Error</span></span><br><span class="line">aliasing(emotion);</span><br><span class="line"><span class="built_in">console</span>.log(emotion.name);<span class="comment">// happy, 변경됨</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;p&gt;분량이 많아, 이미 아는 내용이나 자주 사용하는 부분은 생략함&lt;/p&gt;
&lt;/blockquote&gt;
&lt;</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 6장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-6%EC%9E%A5/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-6%EC%9E%A5/</id>
    <published>2020-03-22T11:39:05.000Z</published>
    <updated>2022-09-23T10:58:11.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.</p></blockquote><h2 id="6장-함수-목차"><a href="#6장-함수-목차" class="headerlink" title="6장 함수 목차"></a>6장 함수 목차</h2><ol><li>사용법 (Js vs Ts 비교)</li><li>매개변수<ol><li>초기값 지정</li><li><code>...rest</code> 매개변수</li><li>선택 매개변수 지정</li><li>오버로드</li></ol></li><li>익명 함수<ol><li>화살표 함수</li><li>타입 선언</li><li>콜백 함수</li></ol></li></ol><h2 id="📝p151-함수-Js-vs-Ts-비교"><a href="#📝p151-함수-Js-vs-Ts-비교" class="headerlink" title="📝p151. 함수 (Js vs Ts 비교)"></a>📝p151. 함수 (Js vs Ts 비교)</h2><h3 id="js의-경우"><a href="#js의-경우" class="headerlink" title="js의 경우"></a>js의 경우</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>);<span class="comment">// 10</span></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>);<span class="comment">// 10, 이후 인자값은 무시당함</span></span><br><span class="line">max(<span class="string">`a`</span>, <span class="string">`b`</span>);<span class="comment">// `b`</span></span><br><span class="line">max(<span class="string">`c`</span>, <span class="string">`aaa`</span>);<span class="comment">//`c`, 으음... 문자열 첫번째값의 아스키 코드값인가?</span></span><br></pre></td></tr></table></figure><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323073951872.png" alt="이미지"></p><h3 id="ts의-경우"><a href="#ts의-경우" class="headerlink" title="ts의 경우"></a>ts의 경우</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>);<span class="comment">// 10</span></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>);<span class="comment">// Error: 인자 개수 에러</span></span><br><span class="line">max(<span class="string">`a`</span>, <span class="string">`b`</span>);<span class="comment">// Error: 인자 타입 에러</span></span><br></pre></td></tr></table></figure><h4 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h4><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323073806380.png" alt="이미지"></p><h2 id="📝p156-매개변수-초기값"><a href="#📝p156-매개변수-초기값" class="headerlink" title="📝p156. 매개변수 초기값"></a>📝p156. 매개변수 초기값</h2><p>ES6부터 매개변수의 값을 지정 받지 않아도, 초기값으로 값을 지정해줄 수 있게됨</p><p>코드도 간결해지고 complexity도 낮아짐</p><h3 id="ES6-이전"><a href="#ES6-이전" class="headerlink" title="ES6 이전"></a>ES6 이전</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    param = param || <span class="string">`초기값`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323074303810.png" alt="이미지"></p><h3 id="ES6-이후"><a href="#ES6-이후" class="headerlink" title="ES6 이후"></a>ES6 이후</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param = <span class="string">`초기값`</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323074341475.png" alt="이미지"></p><h2 id="📝p159-나머지-매개변수"><a href="#📝p159-나머지-매개변수" class="headerlink" title="📝p159. 나머지 매개변수"></a>📝p159. 나머지 매개변수</h2><p>ES6부터 생긴 기능, 정의되지 않은 매개변수를 받기 편해짐</p><h3 id="ES6-이전-1"><a href="#ES6-이전-1" class="headerlink" title="ES6 이전"></a>ES6 이전</h3><p><code>arguments</code>는 잘 사용하지 않는 방식으로 알려짐 (보안)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323075104117.png" alt="이미지"></p><h3 id="ES6-이후-1"><a href="#ES6-이후-1" class="headerlink" title="ES6 이후"></a>ES6 이후</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323075122656.png" alt="이미지"></p><h3 id="나머지-매개변수-타입-지정법"><a href="#나머지-매개변수-타입-지정법" class="headerlink" title="나머지 매개변수 타입 지정법"></a>나머지 매개변수 타입 지정법</h3><blockquote><p>나머지 매개변수도 타입 지정이 가능한 것을 처음 알았다</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 처음 1개 값을 지정하면, concat()같이 아무것도 받지않았을 때는 유효하지않음</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">a: <span class="built_in">string</span>, ...restStr: <span class="built_in">string</span>[]</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;a&#125;</span> <span class="subst">$&#123;restStr.join(<span class="string">` `</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p162-선택-매개변수"><a href="#📝p162-선택-매개변수" class="headerlink" title="📝p162. 선택 매개변수"></a>📝p162. 선택 매개변수</h2><h3 id="js의-경우-1"><a href="#js의-경우-1" class="headerlink" title="js의 경우"></a>js의 경우</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);<span class="comment">// NaN</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// 3</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">// 3, 이후 파라미터를 사용되진 않지만, 받음</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323080049535.png" alt="이미지"></p><h3 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);<span class="comment">// NaN, js와 결과는 동일</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// 3</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">// Error 인자 초과</span></span><br></pre></td></tr></table></figure><h2 id="📝p164-함수-오버로드"><a href="#📝p164-함수-오버로드" class="headerlink" title="📝p164. 함수 오버로드"></a>📝p164. 함수 오버로드</h2><blockquote><p>잘 몰랐던 부분</p></blockquote><p>함수명은 같지만, 매개변수와 반환 타입이 다른 여러개의 함수를 선언 가능, 런타임 비용이 별도 추가되지 않음</p><p>가장 일반적인 타입을 가장 아래에 선언(ex. <code>any</code>가 가장 아래), 위일 수록 구체적 (순서 중요!)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: string, b: string</span>);</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: number, b: number</span>);</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: any, b: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="string">`test1`</span>, <span class="string">`test2`</span>));<span class="comment">// test1test2</span></span><br></pre></td></tr></table></figure><h2 id="📝p170-화살표-함수-유의점"><a href="#📝p170-화살표-함수-유의점" class="headerlink" title="📝p170. 화살표 함수 유의점"></a>📝p170. 화살표 함수 유의점</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad case</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="params">x</span> =&gt;</span> &#123; x; &#125;;<span class="comment">// block&#123;&#125;을 사용할 경우, 무조건 return이 필요함!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good case</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="keyword">return</span> x; &#125;;</span><br></pre></td></tr></table></figure><h2 id="📝p171-filter-reduce"><a href="#📝p171-filter-reduce" class="headerlink" title="📝p171. filter, reduce"></a>📝p171. filter, reduce</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce MDN</a></li></ul><h2 id="📝p173-객체-리터럴-선언"><a href="#📝p173-객체-리터럴-선언" class="headerlink" title="📝p173. 객체 리터럴 선언"></a>📝p173. 객체 리터럴 선언</h2><blockquote><p>개인적으로 객체 지향적으로 짤 때 좋은 코딩 스타일이라고 생각되는 문법</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">`Taeuk`</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params">yourName</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;yourName&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.hello(<span class="string">`minsu`</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323081631307.png" alt="이미지"></p><p><strong>주의사항</strong></p><p><code>function</code>을 사용했기 때문에 <code>this.name</code>을 사용할 수 있었던 부분</p><p>만약 화살표 함수를 사용한다면 이렇게 뜰 것 이다. (현재는 this값이 window(최상위)로 잡은 케이스)</p><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323081744796.png" alt="이미지"></p><h3 id="Typescript에서-this-타입-선언"><a href="#Typescript에서-this-타입-선언" class="headerlink" title="Typescript에서 this 타입 선언"></a>Typescript에서 <code>this</code> 타입 선언</h3><blockquote><p>잘 몰랐던 부분</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PersonType &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    hello(<span class="built_in">this</span>: PersonType, yourName: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p177-type-명명법"><a href="#📝p177-type-명명법" class="headerlink" title="📝p177. type 명명법"></a>📝p177. <code>type</code> 명명법</h2><blockquote><p> <code>type</code>는 대문자로 시작, 책은 소문자로 시작되서 이상해서 레퍼런스를 찾아봄</p><p>대문자로 시작하는게 표준 케이스인 것 같음</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> calcType = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323110341117.png" alt="공식 레퍼런스"></p><h2 id="📝p179-jquery-gt-VanillaJS"><a href="#📝p179-jquery-gt-VanillaJS" class="headerlink" title="📝p179. jquery -&gt; VanillaJS"></a>📝p179. jquery -&gt; VanillaJS</h2><blockquote><p>음… 왜 굳이 예시를 Jquery로 들었는지 몰라서 작성</p></blockquote><h3 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">`#myButton`</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">`버튼`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">`#myButton`</span>).addEventListener(<span class="string">`click`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">window</span>.alert(<span class="string">`버튼`</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="📝-180-콜백함수의-다른-예시-ex-Chrome-API"><a href="#📝-180-콜백함수의-다른-예시-ex-Chrome-API" class="headerlink" title="📝 180. 콜백함수의 다른 예시(ex. Chrome API)"></a>📝 180. 콜백함수의 다른 예시(ex. Chrome API)</h2><blockquote><p>Promise, async/ await 으로 바뀌는 추세이지만, 아직도 많은 부분에 callback 함수가 남아있다.</p></blockquote><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323082731982.png" alt="image-20200323082731982"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6장-함수-목차&quot;&gt;&lt;a href=&quot;#6장-함수-목차&quot; </summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 5장 정리</title>
    <link href="https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-5%EC%9E%A5/"/>
    <id>https://taeuk-gang.github.io/wiki/Typescript%20quick%20start%20-5%EC%9E%A5/</id>
    <published>2020-03-15T03:39:05.000Z</published>
    <updated>2022-09-23T10:58:11.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.</p><p>Typescript 학습하는 목적으로 이해도가 높지 못해, 작성시 참고한 링크를 작성했습니다.</p></blockquote><h2 id="📝p134-산술-연산자"><a href="#📝p134-산술-연산자" class="headerlink" title="📝p134. 산술 연산자"></a>📝p134. 산술 연산자</h2><p>ES7의 지수 연산자(<code>Math.pow</code>)를 지원, <code>**</code>를 이용</p><p>사용 예시</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> ** <span class="number">3</span>);<span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><h2 id="📝p136-비교-연산자"><a href="#📝p136-비교-연산자" class="headerlink" title="📝p136. 비교 연산자"></a>📝p136. 비교 연산자</h2><blockquote><p>다른 언어와 다르게, 자바스크립트는 <code>===</code> 등호 3개가 존재, <code>==</code>와 다른 점은 <code>==</code>은 값만 비교한다면 <code>===</code>은 값과 타입을 비교하는 것이 다름</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1&#x27;</span> == <span class="number">1</span>;<span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> === <span class="number">1</span>;<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>위 사항은 자바스크립트 또한 마찬가지지만, 타입스크립트는 같은 타입과의 비교만 지원한다.</p><h2 id="📝p137-논리-연산자"><a href="#📝p137-논리-연산자" class="headerlink" title="📝p137. 논리 연산자"></a>📝p137. 논리 연산자</h2><blockquote><p>논리 연산자는 주로 변수 선언과 함께 함수 초기값 선언에 많이 사용된다.</p></blockquote><p>사용 예시</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이런식으로 기본값이 없으면, default를 만든다. 라는 것으로 선언 가능</span></span><br><span class="line"><span class="keyword">const</span> value: <span class="built_in">string</span> = value || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 부정 연산자는 depth를 깊게하지 않기 위한, if문에 많이 사용됨</span></span><br><span class="line"><span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">`no login!`</span>);</span><br><span class="line">    location.href = <span class="string">`/login`</span>;<span class="comment">// login 라우팅으로 이동</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p139-디스트럭처링"><a href="#📝p139-디스트럭처링" class="headerlink" title="📝p139 디스트럭처링"></a>📝p139 디스트럭처링</h2><h3 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h3><ol><li>객체 디스트럭처링</li><li>배열 디스트럭처링</li></ol><h3 id="1-객체-디스트럭처링"><a href="#1-객체-디스트럭처링" class="headerlink" title="1. 객체 디스트럭처링"></a>1. 객체 디스트럭처링</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; id, country = <span class="number">88</span> &#125; = &#123; id: <span class="string">`happy`</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id);<span class="comment">// happy</span></span><br><span class="line"><span class="built_in">console</span>.log(country);<span class="comment">// 88</span></span><br></pre></td></tr></table></figure><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; id: newName1, country: newName2 &#125; = &#123; id: <span class="string">`happy`</span>, country: <span class="number">88</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(newName1);<span class="comment">// happy</span></span><br><span class="line"><span class="built_in">console</span>.log(newName2);<span class="comment">// 88</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, country);<span class="comment">// error Not defined</span></span><br></pre></td></tr></table></figure><h4 id="함수-파라미터-초기값-설정"><a href="#함수-파라미터-초기값-설정" class="headerlink" title="함수 파라미터 초기값 설정"></a>함수 파라미터 초기값 설정</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">`happy`</span> &#125;);<span class="comment">// happy, none 출력</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123; name, country = <span class="string">`none`</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, country);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="type-키워드-활용"><a href="#type-키워드-활용" class="headerlink" title="type 키워드 활용"></a>type 키워드 활용</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line">fruit(&#123; a: <span class="string">`apple`</span>, b: <span class="number">10</span> &#125;);<span class="comment">// apple 10</span></span><br><span class="line">fruit(&#123; a: <span class="string">`apple`</span>&#125;);<span class="comment">// apple undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params">&#123; a, b &#125;: C</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-배열-디스트럭처링"><a href="#2-배열-디스트럭처링" class="headerlink" title="2. 배열 디스트럭처링"></a>2. 배열 디스트럭처링</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="string">`one`</span>, <span class="string">`two`</span>, <span class="string">`three`</span>, <span class="string">`four`</span>, <span class="string">`five`</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이전 방식</span></span><br><span class="line"><span class="keyword">let</span> num1 = numbers[<span class="number">0</span>];<span class="comment">// one</span></span><br><span class="line"><span class="keyword">let</span> num2 = numbers[<span class="number">1</span>];<span class="comment">// two</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이후 방식</span></span><br><span class="line"><span class="keyword">let</span> [num1, num2] = numbers;<span class="comment">// one, two</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과 동일</span></span><br><span class="line"><span class="built_in">console</span>.log(num1, num2);<span class="comment">// one, two</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 중간 빼오기</span></span><br><span class="line"><span class="keyword">let</span> [, , num3, num4, ] = numbers;</span><br><span class="line"><span class="built_in">console</span>.log(num3, num4);<span class="comment">// three, four</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 교체</span></span><br><span class="line">[num4, num3] = [num3, num4];</span><br><span class="line"><span class="built_in">console</span>.log(num3, num4);<span class="comment">// four, three</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 초기값 지정</span></span><br><span class="line"><span class="keyword">let</span> [color1, color2 = <span class="string">`blue`</span>] = [<span class="string">`black`</span>];</span><br><span class="line"><span class="built_in">console</span>.log(color1, color2);<span class="comment">// black blue</span></span><br></pre></td></tr></table></figure><h2 id="📝p146-전개-연산자"><a href="#📝p146-전개-연산자" class="headerlink" title="📝p146. 전개 연산자"></a>📝p146. 전개 연산자</h2><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first, ...second] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(first, second);<span class="comment">// 1  2, 3</span></span><br></pre></td></tr></table></figure><h3 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numGroup = &#123; <span class="attr">n1</span>: <span class="number">1</span>, <span class="attr">n2</span>: <span class="number">2</span>, <span class="attr">n3</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; n2, ...n13 &#125; = numGroup;</span><br><span class="line"><span class="built_in">console</span>.log(n2, n13);<span class="comment">// 2    &#123; n1: 1, n3: 3&#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.&lt;/p&gt;
&lt;p&gt;Typescript 학습하는 목적으로 이해도가 높지 못해, 작성시 참고한 링크를 작성했습</summary>
      
    
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/categories/Typescript/"/>
    
    
    <category term="Typescript" scheme="https://taeuk-gang.github.io/tags/Typescript/"/>
    
  </entry>
  
</feed>
